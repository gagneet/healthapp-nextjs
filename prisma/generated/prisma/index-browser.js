
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  licenseNumber: 'licenseNumber',
  contactInfo: 'contactInfo',
  address: 'address',
  settings: 'settings',
  isActive: 'isActive',
  hipaaCoveredEntity: 'hipaaCoveredEntity',
  businessAssociateAgreement: 'businessAssociateAgreement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  image: 'image',
  emailVerified: 'emailVerified',
  role: 'role',
  accountStatus: 'accountStatus',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  emailVerifiedLegacy: 'emailVerifiedLegacy',
  emailVerificationToken: 'emailVerificationToken',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  lastLoginAt: 'lastLoginAt',
  profilePictureUrl: 'profilePictureUrl',
  timezone: 'timezone',
  locale: 'locale',
  preferences: 'preferences',
  termsAcceptedAt: 'termsAcceptedAt',
  privacyPolicyAcceptedAt: 'privacyPolicyAcceptedAt',
  hipaaConsentDate: 'hipaaConsentDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  fullName: 'fullName'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  expiresAt: 'expiresAt',
  tokenType: 'tokenType',
  scope: 'scope',
  idToken: 'idToken',
  sessionState: 'sessionState',
  providerEmail: 'providerEmail',
  providerName: 'providerName',
  linkedAt: 'linkedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  lastAccessedAt: 'lastAccessedAt',
  healthcareContext: 'healthcareContext'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.AccountLinkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  providerEmail: 'providerEmail',
  linkedAt: 'linkedAt',
  lastUsedAt: 'lastUsedAt',
  isPrimary: 'isPrimary',
  metadata: 'metadata'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  medicalRecordNumber: 'medicalRecordNumber',
  patientId: 'patientId',
  emergencyContacts: 'emergencyContacts',
  insuranceInformation: 'insuranceInformation',
  medicalHistory: 'medicalHistory',
  allergies: 'allergies',
  currentMedications: 'currentMedications',
  heightCm: 'heightCm',
  weightKg: 'weightKg',
  bloodType: 'bloodType',
  primaryLanguage: 'primaryLanguage',
  riskLevel: 'riskLevel',
  riskFactors: 'riskFactors',
  communicationPreferences: 'communicationPreferences',
  privacySettings: 'privacySettings',
  primaryCareDoctorId: 'primaryCareDoctorId',
  primaryCareHspId: 'primaryCareHspId',
  careCoordinatorId: 'careCoordinatorId',
  careCoordinatorType: 'careCoordinatorType',
  overallAdherenceScore: 'overallAdherenceScore',
  lastAdherenceCalculation: 'lastAdherenceCalculation',
  totalAppointments: 'totalAppointments',
  missedAppointments: 'missedAppointments',
  lastVisitDate: 'lastVisitDate',
  nextAppointmentDate: 'nextAppointmentDate',
  isActive: 'isActive',
  requiresInterpreter: 'requiresInterpreter',
  hasMobilityIssues: 'hasMobilityIssues',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  linkedProviderId: 'linkedProviderId',
  providerLinkedAt: 'providerLinkedAt',
  providerConsentGiven: 'providerConsentGiven',
  providerConsentGivenAt: 'providerConsentGivenAt',
  providerConsentMethod: 'providerConsentMethod'
};

exports.Prisma.HealthcareProviderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  licenseNumber: 'licenseNumber',
  specialties: 'specialties',
  subSpecialties: 'subSpecialties',
  qualifications: 'qualifications',
  yearsOfExperience: 'yearsOfExperience',
  isVerified: 'isVerified',
  verificationDocuments: 'verificationDocuments',
  verificationDate: 'verificationDate',
  verifiedBy: 'verifiedBy',
  consultationFee: 'consultationFee',
  availabilitySchedule: 'availabilitySchedule',
  notificationPreferences: 'notificationPreferences',
  practiceName: 'practiceName',
  practiceAddress: 'practiceAddress',
  practicePhone: 'practicePhone',
  practiceWebsite: 'practiceWebsite',
  totalPatients: 'totalPatients',
  activeCarePlans: 'activeCarePlans',
  averageRating: 'averageRating',
  totalReviews: 'totalReviews',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SpecialtyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userCreated: 'userCreated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  doctorId: 'doctorId',
  organizationId: 'organizationId',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  locationVerified: 'locationVerified',
  locationAccuracy: 'locationAccuracy',
  phone: 'phone',
  email: 'email',
  website: 'website',
  operatingHours: 'operatingHours',
  servicesOffered: 'servicesOffered',
  clinicImages: 'clinicImages',
  bannerImage: 'bannerImage',
  description: 'description',
  consultationFee: 'consultationFee',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  registrationNumber: 'registrationNumber',
  establishedYear: 'establishedYear',
  facilities: 'facilities',
  insuranceAccepted: 'insuranceAccepted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CarePlanScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  createdByDoctorId: 'createdByDoctorId',
  createdByHspId: 'createdByHspId',
  organizationId: 'organizationId',
  title: 'title',
  description: 'description',
  planType: 'planType',
  chronicConditions: 'chronicConditions',
  conditionSeverity: 'conditionSeverity',
  riskFactors: 'riskFactors',
  longTermGoals: 'longTermGoals',
  shortTermMilestones: 'shortTermMilestones',
  interventions: 'interventions',
  lifestyleModifications: 'lifestyleModifications',
  monitoringParameters: 'monitoringParameters',
  monitoringFrequency: 'monitoringFrequency',
  targetValues: 'targetValues',
  medications: 'medications',
  medicationManagement: 'medicationManagement',
  startDate: 'startDate',
  endDate: 'endDate',
  reviewFrequencyMonths: 'reviewFrequencyMonths',
  nextReviewDate: 'nextReviewDate',
  status: 'status',
  priority: 'priority',
  primaryCareManagerId: 'primaryCareManagerId',
  careTeamMembers: 'careTeamMembers',
  specialistReferrals: 'specialistReferrals',
  patientEducationMaterials: 'patientEducationMaterials',
  selfManagementTasks: 'selfManagementTasks',
  patientGoals: 'patientGoals',
  progressNotes: 'progressNotes',
  outcomeMeasures: 'outcomeMeasures',
  qualityOfLifeScores: 'qualityOfLifeScores',
  emergencyActionPlan: 'emergencyActionPlan',
  warningSigns: 'warningSigns',
  emergencyContacts: 'emergencyContacts',
  details: 'details',
  channelId: 'channelId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DietPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  totalCalories: 'totalCalories',
  startDate: 'startDate',
  endDate: 'endDate',
  details: 'details',
  expiredOn: 'expiredOn',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.WorkoutPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  caloriesBurned: 'caloriesBurned',
  startDate: 'startDate',
  endDate: 'endDate',
  time: 'time',
  details: 'details',
  expiredOn: 'expiredOn',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CarePlanToDietPlanScalarFieldEnum = {
  carePlanId: 'carePlanId',
  dietPlanId: 'dietPlanId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.CarePlanToWorkoutPlanScalarFieldEnum = {
  carePlanId: 'carePlanId',
  workoutPlanId: 'workoutPlanId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  carePlanId: 'carePlanId',
  name: 'name',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.MedicineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  details: 'details',
  creatorId: 'creatorId',
  publicMedicine: 'publicMedicine',
  isActive: 'isActive',
  algoliaObjectId: 'algoliaObjectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  participantId: 'participantId',
  organizerType: 'organizerType',
  organizerId: 'organizerId',
  medicineId: 'medicineId',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  rrRule: 'rrRule',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  carePlanId: 'carePlanId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  participantOneType: 'participantOneType',
  participantOneId: 'participantOneId',
  participantTwoType: 'participantTwoType',
  participantTwoId: 'participantTwoId',
  organizerType: 'organizerType',
  organizerId: 'organizerId',
  providerId: 'providerId',
  providerName: 'providerName',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  rrRule: 'rrRule',
  details: 'details',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  doctorId: 'doctorId',
  patientId: 'patientId',
  slotId: 'slotId',
  carePlanId: 'carePlanId'
};

exports.Prisma.DoctorAvailabilityScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  isAvailable: 'isAvailable',
  slotDuration: 'slotDuration',
  maxAppointmentsPerSlot: 'maxAppointmentsPerSlot',
  breakStartTime: 'breakStartTime',
  breakEndTime: 'breakEndTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VitalTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unit: 'unit',
  normalRangeMin: 'normalRangeMin',
  normalRangeMax: 'normalRangeMax',
  description: 'description',
  validationRules: 'validationRules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VitalReadingScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  vitalTypeId: 'vitalTypeId',
  adherenceRecordId: 'adherenceRecordId',
  value: 'value',
  unit: 'unit',
  readingTime: 'readingTime',
  deviceInfo: 'deviceInfo',
  isFlagged: 'isFlagged',
  notes: 'notes',
  attachments: 'attachments',
  isValidated: 'isValidated',
  validatedBy: 'validatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  systolicValue: 'systolicValue',
  diastolicValue: 'diastolicValue',
  pulseRate: 'pulseRate',
  respiratoryRate: 'respiratoryRate',
  oxygenSaturation: 'oxygenSaturation',
  alertLevel: 'alertLevel',
  alertReasons: 'alertReasons'
};

exports.Prisma.SymptomScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  carePlanId: 'carePlanId',
  symptomName: 'symptomName',
  severity: 'severity',
  description: 'description',
  bodyLocation: 'bodyLocation',
  onsetTime: 'onsetTime',
  recordedAt: 'recordedAt',
  triggers: 'triggers',
  relievingFactors: 'relievingFactors',
  associatedSymptoms: 'associatedSymptoms',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AdherenceRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  scheduledEventId: 'scheduledEventId',
  adherenceType: 'adherenceType',
  dueAt: 'dueAt',
  recordedAt: 'recordedAt',
  isCompleted: 'isCompleted',
  isPartial: 'isPartial',
  isMissed: 'isMissed',
  responseData: 'responseData',
  notes: 'notes',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ServicePlanScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  name: 'name',
  description: 'description',
  serviceType: 'serviceType',
  price: 'price',
  currency: 'currency',
  billingCycle: 'billingCycle',
  features: 'features',
  patientLimit: 'patientLimit',
  trialPeriodDays: 'trialPeriodDays',
  setupFee: 'setupFee',
  isActive: 'isActive',
  stripePriceId: 'stripePriceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PatientSubscriptionScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  providerId: 'providerId',
  servicePlanId: 'servicePlanId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  nextBillingDate: 'nextBillingDate',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  paymentMethodId: 'paymentMethodId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeCustomerId: 'stripeCustomerId',
  lastPaymentDate: 'lastPaymentDate',
  lastPaymentAmount: 'lastPaymentAmount',
  failureCount: 'failureCount',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PatientDoctorAssignmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  assignmentType: 'assignmentType',
  permissions: 'permissions',
  specialtyFocus: 'specialtyFocus',
  carePlanIds: 'carePlanIds',
  assignedByDoctorId: 'assignedByDoctorId',
  assignedByAdminId: 'assignedByAdminId',
  patientConsentRequired: 'patientConsentRequired',
  patientConsentStatus: 'patientConsentStatus',
  consentMethod: 'consentMethod',
  consentOtp: 'consentOtp',
  consentOtpExpiresAt: 'consentOtpExpiresAt',
  consentGrantedAt: 'consentGrantedAt',
  assignmentStartDate: 'assignmentStartDate',
  assignmentEndDate: 'assignmentEndDate',
  isActive: 'isActive',
  assignmentReason: 'assignmentReason',
  notes: 'notes',
  requiresSameOrganization: 'requiresSameOrganization',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceType: 'deviceType',
  pushToken: 'pushToken',
  deviceId: 'deviceId',
  isActive: 'isActive',
  notificationSettings: 'notificationSettings',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  hspId: 'hspId',
  organizationId: 'organizationId',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  isUrgent: 'isUrgent',
  channels: 'channels',
  scheduledFor: 'scheduledFor',
  expiresAt: 'expiresAt',
  status: 'status',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  deliveryAttempts: 'deliveryAttempts',
  deliveryLog: 'deliveryLog',
  readAt: 'readAt',
  acknowledgedAt: 'acknowledgedAt',
  relatedAppointmentId: 'relatedAppointmentId',
  relatedMedicationId: 'relatedMedicationId',
  relatedCarePlanId: 'relatedCarePlanId',
  relatedTreatmentPlanId: 'relatedTreatmentPlanId',
  metadata: 'metadata',
  requiresAction: 'requiresAction',
  actionUrl: 'actionUrl',
  actionTaken: 'actionTaken',
  actionTakenAt: 'actionTakenAt',
  templateId: 'templateId',
  personalizationData: 'personalizationData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  recipientId: 'recipientId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userRole: 'userRole',
  organizationId: 'organizationId',
  action: 'action',
  resource: 'resource',
  patientId: 'patientId',
  entityType: 'entityType',
  entityId: 'entityId',
  phiAccessed: 'phiAccessed',
  accessGranted: 'accessGranted',
  denialReason: 'denialReason',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  requestId: 'requestId',
  dataChanges: 'dataChanges',
  encryptedData: 'encryptedData',
  riskLevel: 'riskLevel',
  securityAlerts: 'securityAlerts',
  retentionDate: 'retentionDate',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.SequelizeMetaScalarFieldEnum = {
  name: 'name'
};

exports.Prisma.AppointmentSlotScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  maxAppointments: 'maxAppointments',
  bookedAppointments: 'bookedAppointments',
  isAvailable: 'isAvailable',
  slotType: 'slotType',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CarePlanTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  conditions: 'conditions',
  specialties: 'specialties',
  tags: 'tags',
  templateData: 'templateData',
  createdBy: 'createdBy',
  organizationId: 'organizationId',
  isPublic: 'isPublic',
  isApproved: 'isApproved',
  approvedBy: 'approvedBy',
  version: 'version',
  parentTemplateId: 'parentTemplateId',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DashboardMetricScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  metricType: 'metricType',
  metricData: 'metricData',
  calculatedAt: 'calculatedAt',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  doctorId: 'doctorId',
  organizationId: 'organizationId',
  medicalLicenseNumber: 'medicalLicenseNumber',
  npiNumber: 'npiNumber',
  boardCertifications: 'boardCertifications',
  medicalSchool: 'medicalSchool',
  residencyPrograms: 'residencyPrograms',
  specialties: 'specialties',
  subSpecialties: 'subSpecialties',
  yearsOfExperience: 'yearsOfExperience',
  capabilities: 'capabilities',
  isVerified: 'isVerified',
  verificationDocuments: 'verificationDocuments',
  verificationDate: 'verificationDate',
  verifiedBy: 'verifiedBy',
  consultationFee: 'consultationFee',
  availabilitySchedule: 'availabilitySchedule',
  languagesSpoken: 'languagesSpoken',
  notificationPreferences: 'notificationPreferences',
  practiceName: 'practiceName',
  practiceAddress: 'practiceAddress',
  practicePhone: 'practicePhone',
  biography: 'biography',
  signaturePic: 'signaturePic',
  razorpayAccountId: 'razorpayAccountId',
  totalPatients: 'totalPatients',
  activeTreatmentPlans: 'activeTreatmentPlans',
  activeCarePlans: 'activeCarePlans',
  averageRating: 'averageRating',
  totalReviews: 'totalReviews',
  isAvailableOnline: 'isAvailableOnline',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  specialtyId: 'specialtyId',
  profilePictureUrl: 'profilePictureUrl',
  bannerImageUrl: 'bannerImageUrl',
  qualificationDetails: 'qualificationDetails',
  registrationDetails: 'registrationDetails',
  subscriptionDetails: 'subscriptionDetails',
  signatureImageUrl: 'signatureImageUrl',
  signatureData: 'signatureData',
  gender: 'gender',
  mobileNumber: 'mobileNumber'
};

exports.Prisma.HspScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hspId: 'hspId',
  organizationId: 'organizationId',
  hspType: 'hspType',
  licenseNumber: 'licenseNumber',
  certificationNumber: 'certificationNumber',
  certifications: 'certifications',
  education: 'education',
  specializations: 'specializations',
  yearsOfExperience: 'yearsOfExperience',
  capabilities: 'capabilities',
  requiresSupervision: 'requiresSupervision',
  supervisingDoctorId: 'supervisingDoctorId',
  supervisionLevel: 'supervisionLevel',
  isVerified: 'isVerified',
  verificationDocuments: 'verificationDocuments',
  verificationDate: 'verificationDate',
  verifiedBy: 'verifiedBy',
  hourlyRate: 'hourlyRate',
  availabilitySchedule: 'availabilitySchedule',
  languagesSpoken: 'languagesSpoken',
  notificationPreferences: 'notificationPreferences',
  departments: 'departments',
  shiftPreferences: 'shiftPreferences',
  totalPatientsAssisted: 'totalPatientsAssisted',
  activeCarePlans: 'activeCarePlans',
  tasksCompleted: 'tasksCompleted',
  averageRating: 'averageRating',
  totalReviews: 'totalReviews',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MedicationLogScalarFieldEnum = {
  id: 'id',
  medicationId: 'medicationId',
  patientId: 'patientId',
  scheduledAt: 'scheduledAt',
  takenAt: 'takenAt',
  dosageTaken: 'dosageTaken',
  notes: 'notes',
  adherenceStatus: 'adherenceStatus',
  reminderSent: 'reminderSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientAlertScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  alertType: 'alertType',
  severity: 'severity',
  title: 'title',
  message: 'message',
  actionRequired: 'actionRequired',
  acknowledged: 'acknowledged',
  acknowledgedAt: 'acknowledgedAt',
  acknowledgedBy: 'acknowledgedBy',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientConsentOtpScalarFieldEnum = {
  id: 'id',
  secondaryAssignmentId: 'secondaryAssignmentId',
  patientId: 'patientId',
  primaryDoctorId: 'primaryDoctorId',
  secondaryDoctorId: 'secondaryDoctorId',
  secondaryHspId: 'secondaryHspId',
  otpCode: 'otpCode',
  otpMethod: 'otpMethod',
  patientPhone: 'patientPhone',
  patientEmail: 'patientEmail',
  generatedAt: 'generatedAt',
  expiresAt: 'expiresAt',
  attemptsCount: 'attemptsCount',
  maxAttempts: 'maxAttempts',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  isExpired: 'isExpired',
  isBlocked: 'isBlocked',
  blockedAt: 'blockedAt',
  requestedByUserId: 'requestedByUserId',
  requestIpAddress: 'requestIpAddress',
  requestUserAgent: 'requestUserAgent',
  smsSent: 'smsSent',
  smsSentAt: 'smsSentAt',
  smsError: 'smsError',
  emailSent: 'emailSent',
  emailSentAt: 'emailSentAt',
  emailError: 'emailError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PatientProviderAssignmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  providerId: 'providerId',
  role: 'role',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy',
  endedAt: 'endedAt',
  notes: 'notes'
};

exports.Prisma.PatientProviderConsentHistoryScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  previousProviderId: 'previousProviderId',
  newProviderId: 'newProviderId',
  doctorId: 'doctorId',
  hspId: 'hspId',
  consentRequired: 'consentRequired',
  consentRequested: 'consentRequested',
  consentRequestedAt: 'consentRequestedAt',
  consentGiven: 'consentGiven',
  consentGivenAt: 'consentGivenAt',
  consentMethod: 'consentMethod',
  consentToken: 'consentToken',
  consentTokenExpiresAt: 'consentTokenExpiresAt',
  consentVerified: 'consentVerified',
  consentDenied: 'consentDenied',
  consentDeniedAt: 'consentDeniedAt',
  reason: 'reason',
  initiatedBy: 'initiatedBy',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  stripePaymentMethodId: 'stripePaymentMethodId',
  type: 'type',
  cardBrand: 'cardBrand',
  cardLast4: 'cardLast4',
  cardExpMonth: 'cardExpMonth',
  cardExpYear: 'cardExpYear',
  bankName: 'bankName',
  bankLast4: 'bankLast4',
  isDefault: 'isDefault',
  isActive: 'isActive',
  billingAddress: 'billingAddress',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  patientId: 'patientId',
  providerId: 'providerId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethodId: 'paymentMethodId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  stripeChargeId: 'stripeChargeId',
  failureCode: 'failureCode',
  failureMessage: 'failureMessage',
  refundAmount: 'refundAmount',
  refundReason: 'refundReason',
  invoiceId: 'invoiceId',
  billingPeriodStart: 'billingPeriodStart',
  billingPeriodEnd: 'billingPeriodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  processedAt: 'processedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProviderChangeScalarFieldEnum = {
  id: 'id',
  practitionerType: 'practitionerType',
  practitionerId: 'practitionerId',
  previousProviderId: 'previousProviderId',
  newProviderId: 'newProviderId',
  changeDate: 'changeDate',
  affectedPatientsCount: 'affectedPatientsCount',
  consentRequiredCount: 'consentRequiredCount',
  consentObtainedCount: 'consentObtainedCount',
  reason: 'reason',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  activatedOn: 'activatedOn',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ScheduleEventScalarFieldEnum = {
  id: 'id',
  critical: 'critical',
  eventType: 'eventType',
  eventId: 'eventId',
  details: 'details',
  status: 'status',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ScheduledEventScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  carePlanId: 'carePlanId',
  eventType: 'eventType',
  eventId: 'eventId',
  title: 'title',
  description: 'description',
  scheduledFor: 'scheduledFor',
  timezone: 'timezone',
  status: 'status',
  priority: 'priority',
  eventData: 'eventData',
  completedAt: 'completedAt',
  completedBy: 'completedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SecondaryDoctorAssignmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  primaryDoctorId: 'primaryDoctorId',
  secondaryDoctorId: 'secondaryDoctorId',
  secondaryHspId: 'secondaryHspId',
  assignmentReason: 'assignmentReason',
  specialtyFocus: 'specialtyFocus',
  carePlanIds: 'carePlanIds',
  primaryDoctorProviderId: 'primaryDoctorProviderId',
  secondaryDoctorProviderId: 'secondaryDoctorProviderId',
  consentRequired: 'consentRequired',
  consentStatus: 'consentStatus',
  accessGranted: 'accessGranted',
  firstAccessAttemptAt: 'firstAccessAttemptAt',
  accessGrantedAt: 'accessGrantedAt',
  consentExpiresAt: 'consentExpiresAt',
  consentDurationMonths: 'consentDurationMonths',
  isActive: 'isActive',
  assignmentStartDate: 'assignmentStartDate',
  assignmentEndDate: 'assignmentEndDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SymptomDatabaseScalarFieldEnum = {
  id: 'id',
  diagnosisName: 'diagnosisName',
  symptoms: 'symptoms',
  category: 'category',
  severityIndicators: 'severityIndicators',
  commonAgeGroups: 'commonAgeGroups',
  genderSpecific: 'genderSpecific',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TreatmentDatabaseScalarFieldEnum = {
  id: 'id',
  treatmentName: 'treatmentName',
  treatmentType: 'treatmentType',
  description: 'description',
  applicableConditions: 'applicableConditions',
  duration: 'duration',
  frequency: 'frequency',
  dosageInfo: 'dosageInfo',
  category: 'category',
  severityLevel: 'severityLevel',
  ageRestrictions: 'ageRestrictions',
  contraindications: 'contraindications',
  sideEffects: 'sideEffects',
  monitoringRequired: 'monitoringRequired',
  isActive: 'isActive',
  requiresSpecialist: 'requiresSpecialist',
  prescriptionRequired: 'prescriptionRequired',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TreatmentPlanScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  organizationId: 'organizationId',
  title: 'title',
  description: 'description',
  planType: 'planType',
  primaryDiagnosis: 'primaryDiagnosis',
  secondaryDiagnoses: 'secondaryDiagnoses',
  chiefComplaint: 'chiefComplaint',
  symptoms: 'symptoms',
  treatmentGoals: 'treatmentGoals',
  interventions: 'interventions',
  medications: 'medications',
  instructions: 'instructions',
  startDate: 'startDate',
  expectedDurationDays: 'expectedDurationDays',
  endDate: 'endDate',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  followUpInstructions: 'followUpInstructions',
  status: 'status',
  priority: 'priority',
  progressNotes: 'progressNotes',
  completionPercentage: 'completionPercentage',
  outcome: 'outcome',
  emergencyContacts: 'emergencyContacts',
  warningSigns: 'warningSigns',
  assignedHsps: 'assignedHsps',
  careTeamNotes: 'careTeamNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserRoleAssignmentScalarFieldEnum = {
  id: 'id',
  userIdentity: 'userIdentity',
  linkedWith: 'linkedWith',
  linkedId: 'linkedId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VitalRequirementScalarFieldEnum = {
  id: 'id',
  carePlanId: 'carePlanId',
  vitalTypeId: 'vitalTypeId',
  frequency: 'frequency',
  preferredTime: 'preferredTime',
  isCritical: 'isCritical',
  monitoringNotes: 'monitoringNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VitalTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unit: 'unit',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VitalScalarFieldEnum = {
  id: 'id',
  vitalTemplateId: 'vitalTemplateId',
  carePlanId: 'carePlanId',
  details: 'details',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DrugInteractionScalarFieldEnum = {
  id: 'id',
  rxcuiOne: 'rxcuiOne',
  rxcuiTwo: 'rxcuiTwo',
  drugNameOne: 'drugNameOne',
  drugNameTwo: 'drugNameTwo',
  severityLevel: 'severityLevel',
  interactionType: 'interactionType',
  description: 'description',
  clinicalEffect: 'clinicalEffect',
  managementAdvice: 'managementAdvice',
  evidenceLevel: 'evidenceLevel',
  source: 'source',
  lastUpdatedAt: 'lastUpdatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.PatientAllergyScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  allergenType: 'allergenType',
  allergenName: 'allergenName',
  allergenRxnorm: 'allergenRxnorm',
  reactionSeverity: 'reactionSeverity',
  reactionSymptoms: 'reactionSymptoms',
  onsetDate: 'onsetDate',
  verifiedByDoctor: 'verifiedByDoctor',
  verifiedBy: 'verifiedBy',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicationSafetyAlertScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  medicationId: 'medicationId',
  drugInteractionId: 'drugInteractionId',
  patientAllergyId: 'patientAllergyId',
  alertType: 'alertType',
  severity: 'severity',
  alertTitle: 'alertTitle',
  alertMessage: 'alertMessage',
  recommendation: 'recommendation',
  requiresOverride: 'requiresOverride',
  resolved: 'resolved',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  resolutionNotes: 'resolutionNotes',
  overrideReason: 'overrideReason',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmergencyAlertScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  alertType: 'alertType',
  priorityLevel: 'priorityLevel',
  vitalReadingId: 'vitalReadingId',
  triggeredByRule: 'triggeredByRule',
  alertTitle: 'alertTitle',
  alertMessage: 'alertMessage',
  clinicalContext: 'clinicalContext',
  acknowledged: 'acknowledged',
  acknowledgedBy: 'acknowledgedBy',
  acknowledgedAt: 'acknowledgedAt',
  resolved: 'resolved',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  resolutionNotes: 'resolutionNotes',
  notificationsSent: 'notificationsSent',
  escalationLevel: 'escalationLevel',
  maxEscalations: 'maxEscalations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VitalAlertRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  vitalType: 'vitalType',
  conditionType: 'conditionType',
  thresholdValue: 'thresholdValue',
  thresholdMin: 'thresholdMin',
  thresholdMax: 'thresholdMax',
  unit: 'unit',
  alertLevel: 'alertLevel',
  alertMessage: 'alertMessage',
  notificationDelay: 'notificationDelay',
  minAge: 'minAge',
  maxAge: 'maxAge',
  genderSpecific: 'genderSpecific',
  isActive: 'isActive',
  appliesToAll: 'appliesToAll',
  patientConditions: 'patientConditions',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  name: 'name',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  address: 'address',
  priorityOrder: 'priorityOrder',
  canReceiveMedical: 'canReceiveMedical',
  preferredContact: 'preferredContact',
  isActive: 'isActive',
  hipaaAuthorized: 'hipaaAuthorized',
  authorizationDate: 'authorizationDate',
  authorizationExpires: 'authorizationExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoConsultationScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  doctorId: 'doctorId',
  patientId: 'patientId',
  appointmentId: 'appointmentId',
  consultationType: 'consultationType',
  status: 'status',
  priority: 'priority',
  scheduledStart: 'scheduledStart',
  scheduledEnd: 'scheduledEnd',
  actualStart: 'actualStart',
  actualEnd: 'actualEnd',
  timezone: 'timezone',
  roomId: 'roomId',
  roomToken: 'roomToken',
  doctorJoinUrl: 'doctorJoinUrl',
  patientJoinUrl: 'patientJoinUrl',
  recordingEnabled: 'recordingEnabled',
  recordingUrl: 'recordingUrl',
  chiefComplaint: 'chiefComplaint',
  presentingSymptoms: 'presentingSymptoms',
  consultationNotes: 'consultationNotes',
  diagnosis: 'diagnosis',
  treatmentPlan: 'treatmentPlan',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  connectionQuality: 'connectionQuality',
  technicalIssues: 'technicalIssues',
  durationMinutes: 'durationMinutes',
  consultationFee: 'consultationFee',
  insuranceCovered: 'insuranceCovered',
  paymentStatus: 'paymentStatus',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsultationPrescriptionScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  medicationName: 'medicationName',
  dosage: 'dosage',
  frequency: 'frequency',
  durationDays: 'durationDays',
  quantity: 'quantity',
  instructions: 'instructions',
  refillsAllowed: 'refillsAllowed',
  ndcCode: 'ndcCode',
  genericSubstitution: 'genericSubstitution',
  pharmacyInstructions: 'pharmacyInstructions',
  createdAt: 'createdAt'
};

exports.Prisma.ConsultationNoteScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  noteType: 'noteType',
  content: 'content',
  timestamp: 'timestamp',
  createdBy: 'createdBy'
};

exports.Prisma.LabOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  patientId: 'patientId',
  doctorId: 'doctorId',
  consultationId: 'consultationId',
  orderDate: 'orderDate',
  priority: 'priority',
  status: 'status',
  category: 'category',
  orderedTests: 'orderedTests',
  clinicalIndication: 'clinicalIndication',
  specialInstructions: 'specialInstructions',
  labFacilityName: 'labFacilityName',
  labFacilityCode: 'labFacilityCode',
  collectionDate: 'collectionDate',
  expectedResultDate: 'expectedResultDate',
  resultsAvailable: 'resultsAvailable',
  resultsData: 'resultsData',
  resultsPdfUrl: 'resultsPdfUrl',
  criticalValues: 'criticalValues',
  externalLabOrderId: 'externalLabOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabResultScalarFieldEnum = {
  id: 'id',
  labOrderId: 'labOrderId',
  testName: 'testName',
  testCode: 'testCode',
  resultValue: 'resultValue',
  numericValue: 'numericValue',
  resultUnit: 'resultUnit',
  referenceRange: 'referenceRange',
  resultStatus: 'resultStatus',
  abnormalFlag: 'abnormalFlag',
  criticalFlag: 'criticalFlag',
  collectionDate: 'collectionDate',
  resultDate: 'resultDate',
  verifiedDate: 'verifiedDate',
  method: 'method',
  specimenType: 'specimenType',
  comments: 'comments',
  createdAt: 'createdAt'
};

exports.Prisma.PatientGameProfileScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  totalPoints: 'totalPoints',
  currentLevel: 'currentLevel',
  experiencePoints: 'experiencePoints',
  medicationStreak: 'medicationStreak',
  appointmentStreak: 'appointmentStreak',
  vitalsStreak: 'vitalsStreak',
  longestStreak: 'longestStreak',
  badgesEarned: 'badgesEarned',
  challengesCompleted: 'challengesCompleted',
  loginStreak: 'loginStreak',
  lastActivity: 'lastActivity',
  totalActivities: 'totalActivities',
  gamificationEnabled: 'gamificationEnabled',
  notificationsEnabled: 'notificationsEnabled',
  publicProfile: 'publicProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameBadgeAwardScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  badgeType: 'badgeType',
  badgeName: 'badgeName',
  badgeDescription: 'badgeDescription',
  pointsAwarded: 'pointsAwarded',
  awardedDate: 'awardedDate',
  badgeIcon: 'badgeIcon',
  badgeColor: 'badgeColor',
  achievementData: 'achievementData'
};

exports.Prisma.GameChallengeProgressScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  challengeType: 'challengeType',
  challengeName: 'challengeName',
  targetValue: 'targetValue',
  currentProgress: 'currentProgress',
  startDate: 'startDate',
  endDate: 'endDate',
  isCompleted: 'isCompleted',
  completionDate: 'completionDate',
  pointsEarned: 'pointsEarned',
  challengeRules: 'challengeRules',
  progressData: 'progressData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConnectedDeviceScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  pluginId: 'pluginId',
  deviceName: 'deviceName',
  deviceModel: 'deviceModel',
  deviceType: 'deviceType',
  manufacturer: 'manufacturer',
  serialNumber: 'serialNumber',
  firmwareVersion: 'firmwareVersion',
  connectionType: 'connectionType',
  deviceIdentifier: 'deviceIdentifier',
  connectionConfig: 'connectionConfig',
  lastConnected: 'lastConnected',
  connectionStatus: 'connectionStatus',
  autoSyncEnabled: 'autoSyncEnabled',
  syncIntervalMinutes: 'syncIntervalMinutes',
  lastSync: 'lastSync',
  syncErrorCount: 'syncErrorCount',
  isActive: 'isActive',
  addedBy: 'addedBy',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeviceReadingScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  patientId: 'patientId',
  pluginId: 'pluginId',
  medicalDeviceId: 'medicalDeviceId',
  vitalReadingId: 'vitalReadingId',
  readingType: 'readingType',
  measurementTimestamp: 'measurementTimestamp',
  receivedTimestamp: 'receivedTimestamp',
  rawData: 'rawData',
  processedValues: 'processedValues',
  primaryValue: 'primaryValue',
  secondaryValue: 'secondaryValue',
  measurementUnit: 'measurementUnit',
  dataQualityScore: 'dataQualityScore',
  isValidated: 'isValidated',
  validationNotes: 'validationNotes',
  isAnomaly: 'isAnomaly',
  anomalyReason: 'anomalyReason',
  readingContext: 'readingContext',
  symptomsReported: 'symptomsReported',
  medicationTaken: 'medicationTaken',
  triggeredAlerts: 'triggeredAlerts',
  alertReasons: 'alertReasons',
  syncBatchId: 'syncBatchId',
  createdAt: 'createdAt'
};

exports.Prisma.DevicePluginScalarFieldEnum = {
  id: 'id',
  name: 'name',
  version: 'version',
  description: 'description',
  supportedDevices: 'supportedDevices',
  supportedRegions: 'supportedRegions',
  apiVersion: 'apiVersion',
  defaultConfig: 'defaultConfig',
  oauthConfig: 'oauthConfig',
  rateLimits: 'rateLimits',
  isEnabled: 'isEnabled',
  requiresAuth: 'requiresAuth',
  maintenanceMode: 'maintenanceMode',
  installedAt: 'installedAt',
  lastUpdated: 'lastUpdated',
  usageCount: 'usageCount'
};

exports.Prisma.MedicalDeviceScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  patientId: 'patientId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  manufacturer: 'manufacturer',
  modelNumber: 'modelNumber',
  serialNumber: 'serialNumber',
  firmwareVersion: 'firmwareVersion',
  macAddress: 'macAddress',
  ipAddress: 'ipAddress',
  bluetoothId: 'bluetoothId',
  status: 'status',
  lastConnected: 'lastConnected',
  lastDataSync: 'lastDataSync',
  batteryLevel: 'batteryLevel',
  connectionType: 'connectionType',
  dataFrequency: 'dataFrequency',
  calibrationDate: 'calibrationDate',
  nextCalibrationDue: 'nextCalibrationDue',
  isActive: 'isActive',
  configuration: 'configuration',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  prescribingDoctorId: 'prescribingDoctorId',
  prescribingHspId: 'prescribingHspId',
  organizationId: 'organizationId',
  prescriptionNumber: 'prescriptionNumber',
  externalPrescriptionId: 'externalPrescriptionId',
  medicationName: 'medicationName',
  genericName: 'genericName',
  ndcNumber: 'ndcNumber',
  rxnormCode: 'rxnormCode',
  strength: 'strength',
  dosageForm: 'dosageForm',
  routeOfAdministration: 'routeOfAdministration',
  doseAmount: 'doseAmount',
  doseUnit: 'doseUnit',
  frequency: 'frequency',
  frequencyPerDay: 'frequencyPerDay',
  dosingSchedule: 'dosingSchedule',
  sigInstructions: 'sigInstructions',
  patientInstructions: 'patientInstructions',
  foodInstructions: 'foodInstructions',
  quantityPrescribed: 'quantityPrescribed',
  quantityUnit: 'quantityUnit',
  daysSupply: 'daysSupply',
  refillsAllowed: 'refillsAllowed',
  refillsUsed: 'refillsUsed',
  indication: 'indication',
  diagnosisCodes: 'diagnosisCodes',
  isControlledSubstance: 'isControlledSubstance',
  deaSchedule: 'deaSchedule',
  prescribedDate: 'prescribedDate',
  startDate: 'startDate',
  endDate: 'endDate',
  expirationDate: 'expirationDate',
  status: 'status',
  discontinuationReason: 'discontinuationReason',
  pharmacyId: 'pharmacyId',
  pharmacyName: 'pharmacyName',
  pharmacyPhone: 'pharmacyPhone',
  ePrescribingId: 'ePrescribingId',
  transmittedToPharmacy: 'transmittedToPharmacy',
  transmissionDate: 'transmissionDate',
  estimatedCost: 'estimatedCost',
  insuranceCoverage: 'insuranceCoverage',
  drugInteractions: 'drugInteractions',
  allergyAlerts: 'allergyAlerts',
  warnings: 'warnings',
  prescriberNpi: 'prescriberNpi',
  prescriberDea: 'prescriberDea',
  electronicSignature: 'electronicSignature',
  requiresMonitoring: 'requiresMonitoring',
  monitoringParameters: 'monitoringParameters',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AdherenceLogScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  organizationId: 'organizationId',
  adherenceType: 'adherenceType',
  relatedMedicationId: 'relatedMedicationId',
  relatedPrescriptionId: 'relatedPrescriptionId',
  relatedAppointmentId: 'relatedAppointmentId',
  relatedCarePlanId: 'relatedCarePlanId',
  relatedTreatmentPlanId: 'relatedTreatmentPlanId',
  scheduledDatetime: 'scheduledDatetime',
  actualDatetime: 'actualDatetime',
  status: 'status',
  completionPercentage: 'completionPercentage',
  delayMinutes: 'delayMinutes',
  prescribedDose: 'prescribedDose',
  actualDose: 'actualDose',
  doseUnit: 'doseUnit',
  patientNotes: 'patientNotes',
  sideEffectsReported: 'sideEffectsReported',
  symptomsBefore: 'symptomsBefore',
  symptomsAfter: 'symptomsAfter',
  missedReason: 'missedReason',
  missedReasonDetails: 'missedReasonDetails',
  recordedBy: 'recordedBy',
  recordedByUserId: 'recordedByUserId',
  deviceId: 'deviceId',
  verificationMethod: 'verificationMethod',
  moodBefore: 'moodBefore',
  moodAfter: 'moodAfter',
  location: 'location',
  reminderSent: 'reminderSent',
  reminderAcknowledged: 'reminderAcknowledged',
  interventionTriggered: 'interventionTriggered',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BlacklistedTokenScalarFieldEnum = {
  jti: 'jti',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SymptomAssessmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  assessmentDate: 'assessmentDate',
  chiefComplaint: 'chiefComplaint',
  presentIllnessHistory: 'presentIllnessHistory',
  symptoms: 'symptoms',
  physicalFindings: 'physicalFindings',
  vitalSigns: 'vitalSigns',
  reviewOfSystems: 'reviewOfSystems',
  status: 'status',
  priority: 'priority',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClinicalDiagnosisScalarFieldEnum = {
  id: 'id',
  assessmentId: 'assessmentId',
  patientId: 'patientId',
  doctorId: 'doctorId',
  primaryDiagnosis: 'primaryDiagnosis',
  secondaryDiagnoses: 'secondaryDiagnoses',
  icd10Codes: 'icd10Codes',
  clinicalFindings: 'clinicalFindings',
  diagnosticTests: 'diagnosticTests',
  diagnosisSuggestions: 'diagnosisSuggestions',
  treatmentRecommendations: 'treatmentRecommendations',
  drugInteractions: 'drugInteractions',
  confidenceScore: 'confidenceScore',
  status: 'status',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  clinicalNotes: 'clinicalNotes',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  severity: 'severity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  SYSTEM_ADMIN: 'SYSTEM_ADMIN',
  HOSPITAL_ADMIN: 'HOSPITAL_ADMIN',
  DOCTOR: 'DOCTOR',
  HSP: 'HSP',
  PATIENT: 'PATIENT',
  CAREGIVER: 'CAREGIVER'
};

exports.UserAccountStatus = exports.$Enums.UserAccountStatus = {
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  DEACTIVATED: 'DEACTIVATED'
};

exports.UserGender = exports.$Enums.UserGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.PatientProviderConsentMethodLegacy = exports.$Enums.PatientProviderConsentMethodLegacy = {
  SMS: 'SMS',
  EMAIL: 'EMAIL',
  IN_PERSON: 'IN_PERSON',
  PHONE: 'PHONE',
  AUTOMATIC: 'AUTOMATIC'
};

exports.MedicationOrganizerType = exports.$Enums.MedicationOrganizerType = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT',
  CARE_TAKER: 'CARE_TAKER',
  HSP: 'HSP',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.AppointmentParticipantOneType = exports.$Enums.AppointmentParticipantOneType = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT',
  HSP: 'HSP'
};

exports.AppointmentParticipantTwoType = exports.$Enums.AppointmentParticipantTwoType = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT',
  HSP: 'HSP'
};

exports.AppointmentOrganizerType = exports.$Enums.AppointmentOrganizerType = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT',
  CARE_TAKER: 'CARE_TAKER',
  HSP: 'HSP',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.ConsultationStatus = exports.$Enums.ConsultationStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW',
  RESCHEDULED: 'RESCHEDULED',
  INTERRUPTED: 'INTERRUPTED'
};

exports.VitalReadingAlertLevel = exports.$Enums.VitalReadingAlertLevel = {
  NORMAL: 'NORMAL',
  WARNING: 'WARNING',
  CRITICAL: 'CRITICAL',
  EMERGENCY: 'EMERGENCY'
};

exports.AdherenceType = exports.$Enums.AdherenceType = {
  MEDICATION: 'MEDICATION',
  APPOINTMENT: 'APPOINTMENT',
  VITAL_CHECK: 'VITAL_CHECK',
  SYMPTOM_LOG: 'SYMPTOM_LOG',
  DIET_LOG: 'DIET_LOG',
  EXERCISE: 'EXERCISE',
  REMINDER: 'REMINDER'
};

exports.ServicePlanBillingCycle = exports.$Enums.ServicePlanBillingCycle = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  ONE_TIME: 'ONE_TIME',
  WEEKLY: 'WEEKLY'
};

exports.PatientSubscriptionStatus = exports.$Enums.PatientSubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  TRIALING: 'TRIALING'
};

exports.PatientDoctorAssignmentType = exports.$Enums.PatientDoctorAssignmentType = {
  PRIMARY: 'PRIMARY',
  SPECIALIST: 'SPECIALIST',
  SUBSTITUTE: 'SUBSTITUTE',
  TRANSFERRED: 'TRANSFERRED'
};

exports.PatientDoctorAssignmentConsentStatus = exports.$Enums.PatientDoctorAssignmentConsentStatus = {
  NOT_REQUIRED: 'NOT_REQUIRED',
  PENDING: 'PENDING',
  REQUESTED: 'REQUESTED',
  GRANTED: 'GRANTED',
  DENIED: 'DENIED',
  EXPIRED: 'EXPIRED'
};

exports.AppointmentSlotType = exports.$Enums.AppointmentSlotType = {
  REGULAR: 'REGULAR',
  EMERGENCY: 'EMERGENCY',
  CONSULTATION: 'CONSULTATION',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.DashboardMetricsEntityType = exports.$Enums.DashboardMetricsEntityType = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  ORGANIZATION: 'ORGANIZATION',
  SYSTEM: 'SYSTEM'
};

exports.MedicationLogAdherenceStatus = exports.$Enums.MedicationLogAdherenceStatus = {
  TAKEN: 'TAKEN',
  MISSED: 'MISSED',
  LATE: 'LATE',
  PARTIAL: 'PARTIAL'
};

exports.PatientAlertType = exports.$Enums.PatientAlertType = {
  MEDICATION: 'MEDICATION',
  VITAL: 'VITAL',
  APPOINTMENT: 'APPOINTMENT',
  SYMPTOM: 'SYMPTOM',
  SYSTEM: 'SYSTEM'
};

exports.PatientAlertSeverity = exports.$Enums.PatientAlertSeverity = {
  CRITICAL: 'CRITICAL',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.PatientConsentOtpMethod = exports.$Enums.PatientConsentOtpMethod = {
  SMS: 'SMS',
  EMAIL: 'EMAIL',
  BOTH: 'BOTH'
};

exports.PatientProviderConsentMethod = exports.$Enums.PatientProviderConsentMethod = {
  SMS: 'SMS',
  EMAIL: 'EMAIL',
  IN_PERSON: 'IN_PERSON',
  PHONE: 'PHONE',
  AUTOMATIC: 'AUTOMATIC'
};

exports.PatientProviderConsentStatus = exports.$Enums.PatientProviderConsentStatus = {
  PENDING: 'PENDING',
  CONSENT_REQUESTED: 'CONSENT_REQUESTED',
  APPROVED: 'APPROVED',
  DENIED: 'DENIED',
  EXPIRED: 'EXPIRED',
  COMPLETED: 'COMPLETED'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  CARD: 'CARD',
  BANK_ACCOUNT: 'BANK_ACCOUNT',
  PAYPAL: 'PAYPAL',
  APPLE_PAY: 'APPLE_PAY',
  GOOGLE_PAY: 'GOOGLE_PAY'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.ProviderChangePractitionerType = exports.$Enums.ProviderChangePractitionerType = {
  DOCTOR: 'DOCTOR',
  HSP: 'HSP'
};

exports.ProviderChangeStatus = exports.$Enums.ProviderChangeStatus = {
  ACTIVE: 'ACTIVE',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED'
};

exports.ScheduleEventType = exports.$Enums.ScheduleEventType = {
  APPOINTMENT: 'APPOINTMENT',
  REMINDER: 'REMINDER',
  MEDICATION_REMINDER: 'MEDICATION_REMINDER',
  VITALS: 'VITALS',
  CAREPLAN_ACTIVATION: 'CAREPLAN_ACTIVATION',
  DIET: 'DIET',
  WORKOUT: 'WORKOUT'
};

exports.ScheduledEventStatus = exports.$Enums.ScheduledEventStatus = {
  SCHEDULED: 'SCHEDULED',
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  MISSED: 'MISSED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  STARTED: 'STARTED',
  PRIOR: 'PRIOR'
};

exports.ScheduledEventType = exports.$Enums.ScheduledEventType = {
  MEDICATION: 'MEDICATION',
  APPOINTMENT: 'APPOINTMENT',
  VITAL_CHECK: 'VITAL_CHECK',
  SYMPTOM_LOG: 'SYMPTOM_LOG',
  DIET_LOG: 'DIET_LOG',
  EXERCISE: 'EXERCISE',
  REMINDER: 'REMINDER'
};

exports.ScheduledEventPriority = exports.$Enums.ScheduledEventPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.SecondaryDoctorAssignmentConsentStatus = exports.$Enums.SecondaryDoctorAssignmentConsentStatus = {
  PENDING: 'PENDING',
  REQUESTED: 'REQUESTED',
  GRANTED: 'GRANTED',
  DENIED: 'DENIED',
  EXPIRED: 'EXPIRED'
};

exports.UserRoleLinkedWith = exports.$Enums.UserRoleLinkedWith = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT',
  CARE_TAKER: 'CARE_TAKER',
  HSP: 'HSP',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.DrugInteractionSeverity = exports.$Enums.DrugInteractionSeverity = {
  MINOR: 'MINOR',
  MODERATE: 'MODERATE',
  MAJOR: 'MAJOR',
  CONTRAINDICATION: 'CONTRAINDICATION'
};

exports.AllergenType = exports.$Enums.AllergenType = {
  MEDICATION: 'MEDICATION',
  FOOD: 'FOOD',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  LATEX: 'LATEX',
  OTHER: 'OTHER'
};

exports.AllergySeverity = exports.$Enums.AllergySeverity = {
  MILD: 'MILD',
  MODERATE: 'MODERATE',
  SEVERE: 'SEVERE',
  ANAPHYLAXIS: 'ANAPHYLAXIS'
};

exports.MedicationAlertType = exports.$Enums.MedicationAlertType = {
  DRUG_INTERACTION: 'DRUG_INTERACTION',
  ALLERGY_CONFLICT: 'ALLERGY_CONFLICT',
  DOSE_LIMIT_EXCEEDED: 'DOSE_LIMIT_EXCEEDED',
  DUPLICATE_THERAPY: 'DUPLICATE_THERAPY',
  AGE_INAPPROPRIATE: 'AGE_INAPPROPRIATE',
  CONTRAINDICATION: 'CONTRAINDICATION',
  MONITORING_REQUIRED: 'MONITORING_REQUIRED'
};

exports.AlertSeverity = exports.$Enums.AlertSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.EmergencyAlertType = exports.$Enums.EmergencyAlertType = {
  VITAL_CRITICAL: 'VITAL_CRITICAL',
  MEDICATION_MISSED_CRITICAL: 'MEDICATION_MISSED_CRITICAL',
  DEVICE_OFFLINE: 'DEVICE_OFFLINE',
  PATIENT_UNRESPONSIVE: 'PATIENT_UNRESPONSIVE',
  EMERGENCY_BUTTON: 'EMERGENCY_BUTTON',
  FALL_DETECTED: 'FALL_DETECTED',
  MEDICATION_OVERDOSE: 'MEDICATION_OVERDOSE'
};

exports.EmergencyPriority = exports.$Enums.EmergencyPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  EMERGENCY: 'EMERGENCY',
  LIFE_THREATENING: 'LIFE_THREATENING'
};

exports.VitalConditionType = exports.$Enums.VitalConditionType = {
  GREATER_THAN: 'GREATER_THAN',
  LESS_THAN: 'LESS_THAN',
  BETWEEN: 'BETWEEN',
  OUTSIDE_RANGE: 'OUTSIDE_RANGE',
  PERCENTAGE_CHANGE: 'PERCENTAGE_CHANGE'
};

exports.ConsultationType = exports.$Enums.ConsultationType = {
  VIDEO_CONSULTATION: 'VIDEO_CONSULTATION',
  AUDIO_CONSULTATION: 'AUDIO_CONSULTATION',
  CHAT_CONSULTATION: 'CHAT_CONSULTATION',
  EMERGENCY_CONSULTATION: 'EMERGENCY_CONSULTATION',
  FOLLOW_UP_CONSULTATION: 'FOLLOW_UP_CONSULTATION',
  SPECIALIST_REFERRAL: 'SPECIALIST_REFERRAL'
};

exports.ConsultationPriority = exports.$Enums.ConsultationPriority = {
  ROUTINE: 'ROUTINE',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.LabOrderStatus = exports.$Enums.LabOrderStatus = {
  ORDERED: 'ORDERED',
  SAMPLE_COLLECTED: 'SAMPLE_COLLECTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REPORT_READY: 'REPORT_READY'
};

exports.LabTestCategory = exports.$Enums.LabTestCategory = {
  BLOOD_CHEMISTRY: 'BLOOD_CHEMISTRY',
  HEMATOLOGY: 'HEMATOLOGY',
  MICROBIOLOGY: 'MICROBIOLOGY',
  PATHOLOGY: 'PATHOLOGY',
  RADIOLOGY: 'RADIOLOGY',
  CARDIOLOGY: 'CARDIOLOGY',
  ENDOCRINOLOGY: 'ENDOCRINOLOGY',
  IMMUNOLOGY: 'IMMUNOLOGY'
};

exports.GameBadgeType = exports.$Enums.GameBadgeType = {
  ADHERENCE_STREAK: 'ADHERENCE_STREAK',
  APPOINTMENT_KEEPER: 'APPOINTMENT_KEEPER',
  VITAL_TRACKER: 'VITAL_TRACKER',
  EXERCISE_CHAMPION: 'EXERCISE_CHAMPION',
  MEDICATION_MASTER: 'MEDICATION_MASTER',
  HEALTH_IMPROVEMENT: 'HEALTH_IMPROVEMENT',
  GOAL_ACHIEVER: 'GOAL_ACHIEVER'
};

exports.GameChallengeType = exports.$Enums.GameChallengeType = {
  DAILY_MEDICATION: 'DAILY_MEDICATION',
  WEEKLY_VITALS: 'WEEKLY_VITALS',
  MONTHLY_CHECKUP: 'MONTHLY_CHECKUP',
  EXERCISE_MINUTES: 'EXERCISE_MINUTES',
  WEIGHT_MANAGEMENT: 'WEIGHT_MANAGEMENT',
  BLOOD_PRESSURE_CONTROL: 'BLOOD_PRESSURE_CONTROL',
  GLUCOSE_MANAGEMENT: 'GLUCOSE_MANAGEMENT'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  WEARABLE: 'WEARABLE',
  BLOOD_PRESSURE: 'BLOOD_PRESSURE',
  GLUCOSE_METER: 'GLUCOSE_METER',
  PULSE_OXIMETER: 'PULSE_OXIMETER',
  THERMOMETER: 'THERMOMETER',
  ECG_MONITOR: 'ECG_MONITOR',
  SCALE: 'SCALE',
  SPIROMETER: 'SPIROMETER',
  GENERIC_BLUETOOTH: 'GENERIC_BLUETOOTH'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  BLUETOOTH_LE: 'BLUETOOTH_LE',
  WIFI: 'WIFI',
  API_OAUTH: 'API_OAUTH',
  MANUAL_ENTRY: 'MANUAL_ENTRY',
  BRIDGE_DEVICE: 'BRIDGE_DEVICE'
};

exports.DeviceStatus = exports.$Enums.DeviceStatus = {
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  SYNCING: 'SYNCING',
  ERROR: 'ERROR',
  MAINTENANCE: 'MAINTENANCE'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  AccountLink: 'AccountLink',
  Patient: 'Patient',
  HealthcareProvider: 'HealthcareProvider',
  Specialty: 'Specialty',
  Clinic: 'Clinic',
  CarePlan: 'CarePlan',
  DietPlan: 'DietPlan',
  WorkoutPlan: 'WorkoutPlan',
  CarePlanToDietPlan: 'CarePlanToDietPlan',
  CarePlanToWorkoutPlan: 'CarePlanToWorkoutPlan',
  Report: 'Report',
  Medicine: 'Medicine',
  Medication: 'Medication',
  Appointment: 'Appointment',
  DoctorAvailability: 'DoctorAvailability',
  VitalType: 'VitalType',
  VitalReading: 'VitalReading',
  Symptom: 'Symptom',
  AdherenceRecord: 'AdherenceRecord',
  ServicePlan: 'ServicePlan',
  PatientSubscription: 'PatientSubscription',
  PatientDoctorAssignment: 'PatientDoctorAssignment',
  UserDevice: 'UserDevice',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  SequelizeMeta: 'SequelizeMeta',
  AppointmentSlot: 'AppointmentSlot',
  CarePlanTemplate: 'CarePlanTemplate',
  DashboardMetric: 'DashboardMetric',
  Doctor: 'Doctor',
  Hsp: 'Hsp',
  MedicationLog: 'MedicationLog',
  PatientAlert: 'PatientAlert',
  PatientConsentOtp: 'PatientConsentOtp',
  PatientProviderAssignment: 'PatientProviderAssignment',
  PatientProviderConsentHistory: 'PatientProviderConsentHistory',
  PaymentMethod: 'PaymentMethod',
  Payment: 'Payment',
  ProviderChange: 'ProviderChange',
  Provider: 'Provider',
  ScheduleEvent: 'ScheduleEvent',
  ScheduledEvent: 'ScheduledEvent',
  SecondaryDoctorAssignment: 'SecondaryDoctorAssignment',
  SymptomDatabase: 'SymptomDatabase',
  TreatmentDatabase: 'TreatmentDatabase',
  TreatmentPlan: 'TreatmentPlan',
  UserRoleAssignment: 'UserRoleAssignment',
  VitalRequirement: 'VitalRequirement',
  VitalTemplate: 'VitalTemplate',
  Vital: 'Vital',
  DrugInteraction: 'DrugInteraction',
  PatientAllergy: 'PatientAllergy',
  MedicationSafetyAlert: 'MedicationSafetyAlert',
  EmergencyAlert: 'EmergencyAlert',
  VitalAlertRule: 'VitalAlertRule',
  EmergencyContact: 'EmergencyContact',
  VideoConsultation: 'VideoConsultation',
  ConsultationPrescription: 'ConsultationPrescription',
  ConsultationNote: 'ConsultationNote',
  LabOrder: 'LabOrder',
  LabResult: 'LabResult',
  PatientGameProfile: 'PatientGameProfile',
  GameBadgeAward: 'GameBadgeAward',
  GameChallengeProgress: 'GameChallengeProgress',
  ConnectedDevice: 'ConnectedDevice',
  DeviceReading: 'DeviceReading',
  DevicePlugin: 'DevicePlugin',
  MedicalDevice: 'MedicalDevice',
  Prescription: 'Prescription',
  AdherenceLog: 'AdherenceLog',
  BlacklistedToken: 'BlacklistedToken',
  SymptomAssessment: 'SymptomAssessment',
  ClinicalDiagnosis: 'ClinicalDiagnosis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
