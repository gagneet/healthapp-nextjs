generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                                                                                                    String                             @id @default(uuid()) @db.Uuid
  name                                                                                                  String                             @db.VarChar(255)
  type                                                                                                  String?                            @default("clinic") @db.VarChar(100)
  license_number                                                                                        String?                            @unique @db.VarChar(100)
  contact_info                                                                                          Json?                              @default("{}")
  address                                                                                               Json?                              @default("{}")
  settings                                                                                              Json?                              @default("{\"timezone\": \"UTC\", \"working_hours\": {\"friday\": {\"end\": \"17:00\", \"start\": \"09:00\"}, \"monday\": {\"end\": \"17:00\", \"start\": \"09:00\"}, \"sunday\": {\"closed\": true}, \"tuesday\": {\"end\": \"17:00\", \"start\": \"09:00\"}, \"saturday\": {\"end\": \"13:00\", \"start\": \"09:00\"}, \"thursday\": {\"end\": \"17:00\", \"start\": \"09:00\"}, \"wednesday\": {\"end\": \"17:00\", \"start\": \"09:00\"}}, \"notification_preferences\": {\"sms_enabled\": false, \"push_enabled\": true, \"email_enabled\": true}}")
  is_active                                                                                             Boolean?                           @default(true)
  hipaa_covered_entity                                                                                  Boolean?                           @default(true)
  business_associate_agreement                                                                          Json?
  created_at                                                                                            DateTime?                          @db.Timestamptz(6)
  updated_at                                                                                            DateTime?                          @updatedAt @db.Timestamptz(6)
  deleted_at                                                                                            DateTime?                          @db.Timestamptz(6)
  audit_logs                                                                                            AuditLog[]
  care_plan_templates                                                                                   care_plan_templates[]
  care_plans                                                                                            CarePlan[]
  clinics                                                                                               Clinic[]
  doctors                                                                                               doctors[]
  healthcare_providers                                                                                  HealthcareProvider[]
  hsps                                                                                                  hsps[]
  notifications                                                                                         Notification[]
  patient_provider_consent_history_patient_provider_consent_history_new_provider_idToorganizations      patient_provider_consent_history[] @relation("patient_provider_consent_history_new_provider_idToorganizations")
  patient_provider_consent_history_patient_provider_consent_history_previous_provider_idToorganizations patient_provider_consent_history[] @relation("patient_provider_consent_history_previous_provider_idToorganizations")
  patients_patients_linked_provider_idToorganizations                                                   Patient[]                          @relation("patients_linked_provider_idToorganizations")
  patients                                                                                              Patient[]
  provider_change_history_provider_change_history_new_provider_idToorganizations                        provider_change_history[]          @relation("provider_change_history_new_provider_idToorganizations")
  provider_change_history_provider_change_history_previous_provider_idToorganizations                   provider_change_history[]          @relation("provider_change_history_previous_provider_idToorganizations")
  secondary_doctor_assignments_secondary_doctor_assignments_primary_doctor_provider_idToorganizations   secondary_doctor_assignments[]     @relation("secondary_doctor_assignments_primary_doctor_provider_idToorganizations")
  secondary_doctor_assignments_secondary_doctor_assignments_secondary_doctor_provider_idToorganizations secondary_doctor_assignments[]     @relation("secondary_doctor_assignments_secondary_doctor_provider_idToorganizations")
  treatment_plans                                                                                       treatment_plans[]

  @@index([is_active], map: "organizations_is_active")
  @@index([name], map: "organizations_name")
  @@index([type], map: "organizations_type")
  @@map("organizations")
}

model User {
  id                                                           String                         @id @default(uuid()) @db.Uuid
  email                                                        String                         @unique @db.VarChar(255)
  password_hash                                                String?                        @db.VarChar(255)
  
  // Auth.js v5 required fields
  name                                                         String?                        @db.VarChar(255)
  image                                                        String?                        @db.VarChar(500)
  emailVerified                                                DateTime?                      @map("email_verified_at") @db.Timestamptz(6)
  
  // Healthcare-specific fields
  role                                                         enum_users_role
  account_status                                               enum_users_account_status?     @default(PENDING_VERIFICATION)
  first_name                                                   String?                        @db.VarChar(100)
  last_name                                                    String?                        @db.VarChar(100)
  middle_name                                                  String?                        @db.VarChar(100)
  phone                                                        String?                        @db.VarChar(20)
  date_of_birth                                                DateTime?                      @db.Date
  gender                                                       enum_users_gender?
  
  // Legacy email verification (keeping for backward compatibility)
  email_verified                                               Boolean?                       @default(false)
  email_verification_token                                     String?                        @db.VarChar(255)
  password_reset_token                                         String?                        @db.VarChar(255)
  password_reset_expires                                       DateTime?                      @db.Timestamptz(6)
  two_factor_enabled                                           Boolean?                       @default(false)
  two_factor_secret                                            String?                        @db.VarChar(255)
  failed_login_attempts                                        Int?                           @default(0)
  locked_until                                                 DateTime?                      @db.Timestamptz(6)
  last_login_at                                                DateTime?                      @db.Timestamptz(6)
  
  // Legacy profile picture (keeping for backward compatibility, but `image` is primary for Auth.js)
  profile_picture_url                                          String?                        @db.VarChar(500)
  timezone                                                     String?                        @default("UTC") @db.VarChar(50)
  locale                                                       String?                        @default("en") @db.VarChar(10)
  preferences                                                  Json?                          @default("{\"privacy\": {\"profile_visible\": true, \"share_data_for_research\": false}, \"accessibility\": {\"large_text\": false, \"high_contrast\": false}, \"notifications\": {\"sms\": false, \"push\": true, \"email\": true}}")
  terms_accepted_at                                            DateTime?                      @db.Timestamptz(6)
  privacy_policy_accepted_at                                   DateTime?                      @db.Timestamptz(6)
  hipaa_consent_date                                           DateTime?                      @db.Timestamptz(6)
  created_at                                                   DateTime?                      @db.Timestamptz(6)
  updated_at                                                   DateTime?                      @updatedAt @db.Timestamptz(6)
  deleted_at                                                   DateTime?                      @db.Timestamptz(6)
  full_name                                                    String?                        @db.VarChar(255)
  appointment_slots                                            appointment_slots[]
  appointments                                                 Appointment[]
  audit_logs                                                   AuditLog[]
  care_plan_templates                                          care_plan_templates[]
  doctor_availability                                          DoctorAvailability[]
  doctors_doctors_user_idTousers                               doctors?                       @relation("doctors_user_idTousers")
  doctors_doctors_verified_byTousers                           doctors[]                      @relation("doctors_verified_byTousers")
  healthcare_provider                                          HealthcareProvider?
  healthcare_providers_healthcare_providers_verified_byTousers HealthcareProvider[]           @relation("healthcare_providers_verified_byTousers")
  hsps_hsps_user_idTousers                                     hsps?                          @relation("hsps_user_idTousers")
  hsps_hsps_verified_byTousers                                 hsps[]                         @relation("hsps_verified_byTousers")
  notifications                                                Notification[]
  patient_consent_otp                                          patient_consent_otp[]
  patient_doctor_assignments                                   PatientDoctorAssignment[]
  patient_provider_assignments                                 patient_provider_assignments[]
  patient                                                      Patient?
  providers                                                    providers[]
  scheduled_events                                             scheduled_events[]
  user_devices                                                 UserDevice[]
  user_roles                                                   user_roles[]
  
  // Authentication relationships
  accounts                                                     Account[]
  sessions                                                     Session[]
  account_links                                                AccountLink[]
  
  // Medical Safety Relationships
  verified_patient_allergies                                   PatientAllergy[]
  resolved_medication_alerts                                   MedicationSafetyAlert[]
  created_medication_alerts                                    MedicationSafetyAlert[] @relation("SafetyAlertCreatedBy")
  acknowledged_emergency_alerts                                EmergencyAlert[] @relation("EmergencyAlertAcknowledged")
  resolved_emergency_alerts                                    EmergencyAlert[] @relation("EmergencyAlertResolved")
  vital_alert_rules                                            VitalAlertRule[]
  
  // Phase 3: IoT Device Relationships
  added_devices                                                ConnectedDevice[]
  
  // Phase 4: Telemedicine Relationships
  created_consultations                                        VideoConsultation[] @relation("ConsultationCreatedBy")
  consultation_notes_created                                   ConsultationNote[] @relation("ConsultationNoteCreatedBy")

  @@index([email, account_status], map: "idx_users_email_status")
  @@index([role, account_status], map: "idx_users_role_status")
  @@index([account_status], map: "users_account_status")
  @@index([email_verified], map: "users_email_verified")
  @@index([full_name], map: "users_full_name")
  @@index([last_login_at], map: "users_last_login_at")
  @@index([phone], map: "users_phone")
  @@index([role], map: "users_role")

  @@map("users")
}


// NextAuth.js tables for future OAuth integration (Google, Microsoft, Facebook, OKTA)
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  // Healthcare-specific OAuth metadata
  provider_email    String? @db.VarChar(255)
  provider_name     String? @db.VarChar(255)
  linked_at         DateTime @default(now()) @db.Timestamptz(6)
  last_used_at      DateTime? @db.Timestamptz(6)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, provider])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  
  // Healthcare-specific session tracking fields
  ip_address            String?   @db.VarChar(45)
  user_agent            String?   @db.Text
  created_at            DateTime  @default(now()) @db.Timestamptz(6)
  last_accessed_at      DateTime? @updatedAt @db.Timestamptz(6)
  healthcare_context    Json?     @default("{}")
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id")
  @@index([expires], map: "sessions_expires")
  @@index([ip_address], map: "sessions_ip_address")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Account Linking for hybrid auth (username/password + OAuth)
model AccountLink {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String    @db.Uuid
  provider              String    @db.VarChar(50)  // "google", "microsoft", "facebook", "okta"
  provider_account_id   String    @db.VarChar(255)
  provider_email        String?   @db.VarChar(255)
  linked_at             DateTime  @default(now()) @db.Timestamptz(6)
  last_used_at          DateTime? @db.Timestamptz(6)
  is_primary            Boolean   @default(false)
  metadata              Json?     @default("{}")

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, provider], map: "account_links_user_provider")
  @@unique([provider, provider_account_id], map: "account_links_provider_account")
  @@index([user_id], map: "account_links_user_id")
  @@index([provider], map: "account_links_provider")
  @@map("account_links")
}

model Patient {
  id                                                       String                                 @id @default(uuid()) @db.Uuid
  user_id                                                  String                                 @unique(map: "patients_user_id") @db.Uuid
  organization_id                                          String?                                @db.Uuid
  medical_record_number                                    String?                                @unique @db.VarChar(50)
  patient_id                                               String?                                @unique @db.VarChar(100)
  emergency_contacts                                       Json?                                  @default("[]")
  insurance_information                                    Json?                                  @default("{}")
  medical_history                                          Json?                                  @default("[]")
  allergies                                                Json?                                  @default("[]")
  current_medications                                      Json?                                  @default("[]")
  height_cm                                                Decimal?                               @db.Decimal(5, 2)
  weight_kg                                                Decimal?                               @db.Decimal(5, 2)
  blood_type                                               String?                                @db.VarChar(5)
  primary_language                                         String?                                @default("en") @db.VarChar(10)
  risk_level                                               String?                                @default("low") @db.VarChar(20)
  risk_factors                                             Json?                                  @default("[]")
  communication_preferences                                Json?                                  @default("{\"language\": \"en\", \"time_zone\": \"UTC\", \"health_tips\": false, \"medication_reminders\": true, \"appointment_reminders\": true, \"research_participation\": false, \"preferred_contact_method\": \"email\"}")
  privacy_settings                                         Json?                                  @default("{\"share_with_family\": false, \"share_for_research\": false, \"data_sharing_consent\": false, \"marketing_communications\": false, \"provider_directory_listing\": true}")
  primary_care_doctor_id                                   String?                                @db.Uuid
  primary_care_hsp_id                                      String?                                @db.Uuid
  care_coordinator_id                                      String?                                @db.Uuid
  care_coordinator_type                                    String?                                @db.VarChar(10)
  overall_adherence_score                                  Decimal?                               @db.Decimal(5, 2)
  last_adherence_calculation                               DateTime?                              @db.Timestamptz(6)
  total_appointments                                       Int?                                   @default(0)
  missed_appointments                                      Int?                                   @default(0)
  last_visit_date                                          DateTime?                              @db.Timestamptz(6)
  next_appointment_date                                    DateTime?                              @db.Timestamptz(6)
  is_active                                                Boolean?                               @default(true)
  requires_interpreter                                     Boolean?                               @default(false)
  has_mobility_issues                                      Boolean?                               @default(false)
  created_at                                               DateTime?                              @db.Timestamptz(6)
  updated_at                                               DateTime?                              @updatedAt @db.Timestamptz(6)
  deleted_at                                               DateTime?                              @db.Timestamptz(6)
  linked_provider_id                                       String?                                @db.Uuid
  provider_linked_at                                       DateTime?                              @db.Timestamptz(6)
  provider_consent_given                                   Boolean?                               @default(false)
  provider_consent_given_at                                DateTime?                              @db.Timestamptz(6)
  provider_consent_method                                  enum_patients_provider_consent_method?
  adherence_records                                        AdherenceRecord[]
  appointments                                             Appointment[]
  audit_logs                                               AuditLog[]
  care_plans                                               CarePlan[]
  medication_logs                                          medication_logs[]
  notifications                                            Notification[]
  patient_alerts                                           patient_alerts[]
  patient_consent_otp                                      patient_consent_otp[]
  patient_doctor_assignments                               PatientDoctorAssignment[]
  patient_provider_assignments                             patient_provider_assignments[]
  patient_provider_consent_history                         patient_provider_consent_history[]
  patient_subscriptions                                    PatientSubscription[]
  organizations_patients_linked_provider_idToorganizations Organization?                          @relation("patients_linked_provider_idToorganizations", fields: [linked_provider_id], references: [id])
  organization                                             Organization?                          @relation(fields: [organization_id], references: [id])
  doctors                                                  doctors?                               @relation(fields: [primary_care_doctor_id], references: [id])
  hsps                                                     hsps?                                  @relation(fields: [primary_care_hsp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                                                     User                                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payment_methods                                          payment_methods[]
  payments                                                 payments[]
  scheduled_events                                         scheduled_events[]
  secondary_doctor_assignments                             secondary_doctor_assignments[]
  symptoms                                                 Symptom[]
  treatment_plans                                          treatment_plans[]
  vital_readings                                           VitalReading[]
  
  // Medical Safety Relationships
  patient_allergies                                        PatientAllergy[]
  medication_safety_alerts                                 MedicationSafetyAlert[]
  emergency_alerts                                         EmergencyAlert[]
  emergency_contacts_new                                   EmergencyContact[]
  
  // Phase 3: IoT Device Relationships
  connected_devices                                        ConnectedDevice[]
  device_readings                                          DeviceReading[]
  
  // Phase 4: Telemedicine Relationships
  video_consultations                                      VideoConsultation[]
  lab_orders                                               LabOrder[]
  game_profile                                             PatientGameProfile?

  @@index([primary_care_doctor_id, created_at, is_active], map: "idx_patients_doctor_created_active")
  @@index([patient_id, created_at], map: "idx_patients_id_created")
  @@index([user_id, primary_care_doctor_id], map: "idx_patients_user_doctor")
  @@index([allergies], map: "patients_allergies", type: Gin)
  @@index([is_active], map: "patients_is_active")
  @@index([linked_provider_id], map: "patients_linked_provider_id")
  @@index([medical_history], map: "patients_medical_history", type: Gin)
  @@index([organization_id], map: "patients_organization_id")
  @@index([primary_care_doctor_id], map: "patients_primary_care_doctor_id")
  @@index([primary_care_hsp_id], map: "patients_primary_care_hsp_id")
  @@index([provider_consent_given], map: "patients_provider_consent_given")
  @@index([provider_linked_at], map: "patients_provider_linked_at")
  @@index([risk_level], map: "patients_risk_level")
  @@map("patients")
}

model HealthcareProvider {
  id                                            String                         @id @default(uuid()) @db.Uuid
  user_id                                       String                         @unique(map: "healthcare_providers_user_id") @db.Uuid
  organization_id                               String?                        @db.Uuid
  license_number                                String?                        @unique @db.VarChar(100)
  specialties                                   String[]                       @default([])
  sub_specialties                               String[]                       @default([])
  qualifications                                Json?                          @default("[]")
  years_of_experience                           Int?
  is_verified                                   Boolean?                       @default(false)
  verification_documents                        Json?                          @default("[]")
  verification_date                             DateTime?                      @db.Timestamptz(6)
  verified_by                                   String?                        @db.Uuid
  consultation_fee                              Decimal?                       @db.Decimal(10, 2)
  availability_schedule                         Json?                          @default("{\"friday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"monday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"sunday\": {\"available\": false}, \"tuesday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"saturday\": {\"available\": false}, \"thursday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"wednesday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}}")
  notification_preferences                      Json?                          @default("{\"patient_updates\": true, \"marketing_emails\": false, \"sms_notifications\": true, \"push_notifications\": true, \"system_notifications\": true, \"appointment_reminders\": true}")
  practice_name                                 String?                        @db.VarChar(255)
  practice_address                              Json?                          @default("{}")
  practice_phone                                String?                        @db.VarChar(20)
  practice_website                              String?                        @db.VarChar(255)
  total_patients                                Int?                           @default(0)
  active_care_plans                             Int?                           @default(0)
  average_rating                                Decimal?                       @db.Decimal(3, 2)
  total_reviews                                 Int?                           @default(0)
  created_at                                    DateTime?                      @db.Timestamptz(6)
  updated_at                                    DateTime?                      @updatedAt @db.Timestamptz(6)
  deleted_at                                    DateTime?                      @db.Timestamptz(6)
  care_plan_templates                           care_plan_templates[]
  organization                                  Organization?                  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                                          User                           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_healthcare_providers_verified_byTousers User?                          @relation("healthcare_providers_verified_byTousers", fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient_provider_assignments                  patient_provider_assignments[]
  patient_subscriptions                         PatientSubscription[]
  payments                                      payments[]
  service_plans                                 ServicePlan[]
  vital_readings                                VitalReading[]

  @@index([is_verified], map: "healthcare_providers_is_verified")
  @@index([organization_id], map: "healthcare_providers_organization_id")
  @@index([specialties], map: "healthcare_providers_specialties", type: Gin)
  @@index([verification_date], map: "healthcare_providers_verification_date")
  @@index([organization_id, is_verified], map: "idx_providers_org_verified")
  @@map("healthcare_providers")
}

model Speciality {
  id           Int       @id @default(autoincrement())
  name         String    @unique @db.VarChar(255)
  description  String?   @db.VarChar(1000)
  user_created Int?
  created_at   DateTime  @db.Timestamptz(6)
  updated_at   DateTime  @updatedAt @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  doctors      doctors[]

  @@map("specialities")
}

model Clinic {
  id                  String        @id @default(uuid()) @db.Uuid
  name                String        @db.VarChar(255)
  doctor_id           String        @db.Uuid
  organization_id     String?       @db.Uuid
  address             Json          @default("{}")
  latitude            Decimal?      @db.Decimal(10, 8)
  longitude           Decimal?      @db.Decimal(11, 8)
  location_verified   Boolean?      @default(false)
  location_accuracy   String?       @db.VarChar(20)
  phone               String?       @db.VarChar(20)
  email               String?       @db.VarChar(255)
  website             String?       @db.VarChar(500)
  operating_hours     Json          @default("{}")
  services_offered    String[]      @default([])
  clinic_images       Json?         @default("[]")
  banner_image        String?
  description         String?
  consultation_fee    Decimal?      @db.Decimal(10, 2)
  is_primary          Boolean       @default(false)
  is_active           Boolean       @default(true)
  registration_number String?       @db.VarChar(100)
  established_year    Int?
  facilities          Json?         @default("[]")
  insurance_accepted  String[]      @default([])
  created_at          DateTime      @db.Timestamptz(6)
  updated_at          DateTime      @updatedAt @db.Timestamptz(6)
  deleted_at          DateTime?     @db.Timestamptz(6)
  doctor              doctors       @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  organization        Organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([doctor_id], map: "clinics_doctor_id")
  @@index([is_active], map: "clinics_is_active")
  @@index([is_primary], map: "clinics_is_primary")
  @@index([organization_id], map: "clinics_organization_id")
  @@index([latitude, longitude], map: "idx_clinics_coordinates")
  @@index([location_verified], map: "idx_clinics_location_verified")
  @@map("clinics")
}

model CarePlan {
  id                          String               @id @default(uuid()) @db.Uuid
  patient_id                  String               @db.Uuid
  created_by_doctor_id        String?              @db.Uuid
  created_by_hsp_id           String?              @db.Uuid
  organization_id             String?              @db.Uuid
  title                       String               @db.VarChar(255)
  description                 String?
  plan_type                   String?              @default("care_plan") @db.VarChar(20)
  chronic_conditions          String[]             @default([])
  condition_severity          Json?                @default("{}")
  risk_factors                Json?                @default("[]")
  long_term_goals             Json?                @default("[]")
  short_term_milestones       Json?                @default("[]")
  interventions               Json?                @default("[]")
  lifestyle_modifications     Json?                @default("[]")
  monitoring_parameters       Json?                @default("[]")
  monitoring_frequency        Json?                @default("{}")
  target_values               Json?                @default("{}")
  medications                 Json?                @default("[]")
  medication_management       Json?                @default("{}")
  start_date                  DateTime             @db.Timestamptz(6)
  end_date                    DateTime?            @db.Timestamptz(6)
  review_frequency_months     Int?                 @default(3)
  next_review_date            DateTime?            @db.Timestamptz(6)
  status                      String?              @default("ACTIVE") @db.VarChar(20)
  priority                    String?              @default("MEDIUM") @db.VarChar(20)
  primary_care_manager_id     String?              @db.Uuid
  care_team_members           Json?                @default("[]")
  specialist_referrals        Json?                @default("[]")
  patient_education_materials Json?                @default("[]")
  self_management_tasks       Json?                @default("[]")
  patient_goals               Json?                @default("[]")
  progress_notes              Json?                @default("[]")
  outcome_measures            Json?                @default("{}")
  quality_of_life_scores      Json?                @default("{}")
  emergency_action_plan       Json?                @default("{}")
  warning_signs               String[]             @default([])
  emergency_contacts          Json?                @default("[]")
  details                     Json?
  channel_id                  String?              @db.VarChar(255)
  created_at                  DateTime?            @db.Timestamptz(6)
  updated_at                  DateTime?            @updatedAt @db.Timestamptz(6)
  deleted_at                  DateTime?            @db.Timestamptz(6)
  doctors                     doctors?             @relation(fields: [created_by_doctor_id], references: [id])
  hsps                        hsps?                @relation(fields: [created_by_hsp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations               Organization?        @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient                     Patient              @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  prescribed_medications      Medication[] @relation("prescribed_medications")
  notifications               Notification[]
  scheduled_events            scheduled_events[]
  symptoms                    Symptom[]
  vital_requirements          vital_requirements[]
  vitals                      vitals[]

  @@index([chronic_conditions], map: "care_plans_chronic_conditions", type: Gin)
  @@index([created_by_doctor_id], map: "care_plans_created_by_doctor_id")
  @@index([created_by_hsp_id], map: "care_plans_created_by_hsp_id")
  @@index([monitoring_parameters], map: "care_plans_monitoring_parameters", type: Gin)
  @@index([next_review_date], map: "care_plans_next_review_date")
  @@index([organization_id], map: "care_plans_organization_id")
  @@index([patient_id], map: "care_plans_patient_id")
  @@index([priority], map: "care_plans_priority")
  @@index([start_date], map: "care_plans_start_date")
  @@index([status], map: "care_plans_status")
  @@index([patient_id, status, start_date], map: "idx_careplans_patient_status_start_fixed")
  @@map("care_plans")
}

model Medicine {
  id                String       @id @default(uuid()) @db.Uuid
  name              String       @db.VarChar(1000)
  type              String?      @default("tablet") @db.VarChar(1000)
  description       String?      @db.VarChar(1000)
  details           Json?        @db.Json
  creator_id        Int?
  public_medicine   Boolean?     @default(true)
  algolia_object_id String?      @db.VarChar(255)
  created_at        DateTime     @db.Timestamptz(6)
  updated_at        DateTime     @updatedAt @db.Timestamptz(6)
  deleted_at        DateTime?    @db.Timestamptz(6)
  medications       Medication[]

  @@map("medicines")
}

model Medication {
  id              String                           @id @default(uuid()) @db.Uuid
  participant_id  String                           @db.Uuid
  organizer_type  enum_medications_organizer_type?
  organizer_id    String                           @db.Uuid
  medicine_id     String                           @db.Uuid
  description     String?                          @db.VarChar(1000)
  start_date      DateTime?                        @db.Timestamptz(6)
  end_date        DateTime?                        @db.Timestamptz(6)
  rr_rule         String?                          @db.VarChar(1000)
  details         Json?                            @db.Json
  created_at      DateTime                         @db.Timestamptz(6)
  updated_at      DateTime                         @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime?                        @db.Timestamptz(6)
  care_plan_id    String?                          @db.Uuid
  medication_logs medication_logs[]
  care_plan       CarePlan?                        @relation("prescribed_medications", fields: [care_plan_id], references: [id])
  medicine        Medicine                         @relation(fields: [medicine_id], references: [id], onDelete: NoAction)
  notifications   Notification[]
  safety_alerts   MedicationSafetyAlert[]

  @@index([medicine_id], map: "medications_medicine_id")
  @@index([organizer_type, organizer_id], map: "medications_organizer_type_organizer_id")
  @@index([participant_id], map: "medications_participant_id")
  @@map("medications")
}

model Appointment {
  id                   String                                  @id @default(uuid()) @db.Uuid
  participant_one_type enum_appointments_participant_one_type?
  participant_one_id   String?                                 @db.Uuid
  participant_two_type enum_appointments_participant_two_type?
  participant_two_id   String?                                 @db.Uuid
  organizer_type       enum_appointments_organizer_type?
  organizer_id         String?                                 @db.Uuid
  provider_id          String?                                 @db.Uuid
  provider_name        String?                                 @db.VarChar(100)
  description          String?                                 @db.VarChar(1000)
  start_date           DateTime?                               @db.Date
  end_date             DateTime?                               @db.Date
  start_time           DateTime?                               @db.Timestamptz(6)
  end_time             DateTime?                               @db.Timestamptz(6)
  rr_rule              String?                                 @db.VarChar(1000)
  details              Json?                                   @db.Json
  created_at           DateTime                                @db.Timestamptz(6)
  updated_at           DateTime                                @updatedAt @db.Timestamptz(6)
  deleted_at           DateTime?                               @db.Timestamptz(6)
  doctor_id            String?                                 @db.Uuid
  patient_id           String?                                 @db.Uuid
  slot_id              String?                                 @db.Uuid
  doctor               doctors?                                @relation(fields: [doctor_id], references: [id])
  patient              Patient?                                @relation(fields: [patient_id], references: [id])
  users                User?                                   @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appointment_slots    appointment_slots?                      @relation(fields: [slot_id], references: [id])
  notifications        Notification[]
  
  // Phase 4: Telemedicine Relationships
  video_consultations  VideoConsultation[]

  @@index([organizer_id, organizer_type], map: "appointments_organizer_id_organizer_type")
  @@index([participant_one_id, participant_one_type], map: "appointments_participant_one_id_participant_one_type")
  @@index([participant_two_id, participant_two_type], map: "appointments_participant_two_id_participant_two_type")
  @@index([slot_id], map: "appointments_slot_id")
  @@index([start_date], map: "appointments_start_date")
  @@index([organizer_type, organizer_id, start_time], map: "idx_appointments_organizer_time")
  @@index([patient_id, start_time], map: "idx_appointments_patient_time")
  @@index([provider_id, start_time], map: "idx_appointments_provider_time")
  @@map("appointments")
}

model DoctorAvailability {
  id                        String    @id @default(uuid()) @db.Uuid
  doctor_id                 String    @db.Uuid
  day_of_week               Int
  start_time                DateTime  @db.Time(6)
  end_time                  DateTime  @db.Time(6)
  is_available              Boolean?  @default(true)
  slot_duration             Int?      @default(30)
  max_appointments_per_slot Int?      @default(1)
  break_start_time          DateTime? @db.Time(6)
  break_end_time            DateTime? @db.Time(6)
  created_at                DateTime  @db.Timestamptz(6)
  updated_at                DateTime  @updatedAt @db.Timestamptz(6)
  deleted_at                DateTime? @db.Timestamptz(6)
  doctor                    User      @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([doctor_id, day_of_week], map: "doctor_availability_doctor_id_day_of_week")
  @@index([doctor_id, is_available], map: "doctor_availability_doctor_id_is_available")
  @@map("doctor_availability")
}

model VitalType {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @unique(map: "vital_types_name") @db.VarChar(100)
  unit               String?              @db.VarChar(20)
  normal_range_min   Decimal?             @db.Decimal(10, 2)
  normal_range_max   Decimal?             @db.Decimal(10, 2)
  description        String?
  validation_rules   Json?                @default("{}")
  created_at         DateTime?            @db.Timestamptz(6)
  updated_at         DateTime?            @updatedAt @db.Timestamptz(6)
  deleted_at         DateTime?            @db.Timestamptz(6)
  vital_readings     VitalReading[]
  vital_requirements vital_requirements[]

  @@index([unit], map: "vital_types_unit")
  @@map("vital_types")
}

model VitalReading {
  id                   String                           @id @default(uuid()) @db.Uuid
  patient_id           String                           @db.Uuid
  vital_type_id        String                           @db.Uuid
  adherence_record_id  String?                          @db.Uuid
  value                Decimal?                         @db.Decimal(10, 2)
  unit                 String?                          @db.VarChar(20)
  reading_time         DateTime                         @db.Timestamptz(6)
  device_info          Json?                            @default("{}")
  is_flagged           Boolean?                         @default(false)
  notes                String?
  attachments          Json?                            @default("[]")
  is_validated         Boolean?                         @default(false)
  validated_by         String?                          @db.Uuid
  created_at           DateTime?                        @db.Timestamptz(6)
  updated_at           DateTime?                        @updatedAt @db.Timestamptz(6)
  deleted_at           DateTime?                        @db.Timestamptz(6)
  systolic_value       Decimal?                         @db.Decimal(5, 2)
  diastolic_value      Decimal?                         @db.Decimal(5, 2)
  pulse_rate           Int?
  respiratory_rate     Int?
  oxygen_saturation    Decimal?                         @db.Decimal(5, 2)
  alert_level          enum_vital_readings_alert_level? @default(normal)
  alert_reasons        Json?                            @default("[]")
  adherence_records    AdherenceRecord?                 @relation(fields: [adherence_record_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient              Patient                          @relation(fields: [patient_id], references: [id], onDelete: NoAction)
  healthcare_providers HealthcareProvider?              @relation(fields: [validated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vital_type           VitalType                        @relation(fields: [vital_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emergency_alerts     EmergencyAlert[]
  device_readings      DeviceReading[]

  @@index([patient_id, reading_time, vital_type_id], map: "idx_vitals_patient_time_type")
  @@index([patient_id, vital_type_id, reading_time], map: "idx_vitals_patient_type_time_desc")
  @@index([reading_time, patient_id], map: "idx_vitals_time_patient")
  @@index([alert_level])
  @@index([systolic_value, diastolic_value], map: "vital_readings_blood_pressure_idx")
  @@index([is_flagged], map: "vital_readings_is_flagged")
  @@index([is_validated], map: "vital_readings_is_validated")
  @@index([patient_id], map: "vital_readings_patient_id")
  @@index([patient_id, vital_type_id, reading_time], map: "vital_readings_patient_id_vital_type_id_reading_time")
  @@index([reading_time], map: "vital_readings_reading_time")
  @@index([vital_type_id], map: "vital_readings_vital_type_id")
  @@map("vital_readings")
}

model Symptom {
  id                  String    @id @default(uuid()) @db.Uuid
  patient_id          String    @db.Uuid
  care_plan_id        String?   @db.Uuid
  symptom_name        String    @db.VarChar(255)
  severity            Int?
  description         String?
  body_location       Json?     @default("{}")
  onset_time          DateTime? @db.Timestamptz(6)
  recorded_at         DateTime? @db.Timestamptz(6)
  triggers            Json?     @default("[]")
  relieving_factors   Json?     @default("[]")
  associated_symptoms Json?     @default("[]")
  attachments         Json?     @default("[]")
  created_at          DateTime? @db.Timestamptz(6)
  updated_at          DateTime? @updatedAt @db.Timestamptz(6)
  deleted_at          DateTime? @db.Timestamptz(6)
  care_plans          CarePlan? @relation(fields: [care_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient             Patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([patient_id, onset_time, severity], map: "idx_symptoms_patient_onset_severity")
  @@index([care_plan_id], map: "symptoms_care_plan_id")
  @@index([onset_time], map: "symptoms_onset_time")
  @@index([patient_id], map: "symptoms_patient_id")
  @@index([patient_id, recorded_at], map: "symptoms_patient_id_recorded_at")
  @@index([recorded_at], map: "symptoms_recorded_at")
  @@index([severity], map: "symptoms_severity")
  @@index([symptom_name], map: "symptoms_symptom_name")
  @@map("symptoms")
}

model AdherenceRecord {
  id                 String                                @id @default(uuid()) @db.Uuid
  patient_id         String                                @db.Uuid
  scheduled_event_id String?                               @db.Uuid
  adherence_type     enum_adherence_records_adherence_type
  due_at             DateTime                              @db.Timestamptz(6)
  recorded_at        DateTime?                             @db.Timestamptz(6)
  is_completed       Boolean?                              @default(false)
  is_partial         Boolean?                              @default(false)
  is_missed          Boolean?                              @default(false)
  response_data      Json?                                 @default("{}")
  notes              String?
  attachments        Json?                                 @default("[]")
  created_at         DateTime?                             @db.Timestamptz(6)
  updated_at         DateTime?                             @updatedAt @db.Timestamptz(6)
  deleted_at         DateTime?                             @db.Timestamptz(6)
  patient            Patient                               @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scheduled_events   scheduled_events?                     @relation(fields: [scheduled_event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vital_readings     VitalReading[]

  @@index([adherence_type], map: "adherence_records_adherence_type")
  @@index([due_at], map: "adherence_records_due_at")
  @@index([is_completed, is_missed], map: "adherence_records_is_completed_is_missed")
  @@index([patient_id], map: "adherence_records_patient_id")
  @@index([patient_id, adherence_type, due_at], map: "adherence_records_patient_id_adherence_type_due_at")
  @@index([patient_id, due_at], map: "adherence_records_patient_id_due_at")
  @@index([scheduled_event_id], map: "adherence_records_scheduled_event_id")
  @@index([scheduled_event_id, is_completed, recorded_at], map: "idx_adherence_event_status_completed")
  @@index([patient_id, due_at, is_completed], map: "idx_adherence_patient_due_status")
  @@map("adherence_records")
}

model ServicePlan {
  id                    String                           @id @default(uuid()) @db.Uuid
  provider_id           String                           @db.Uuid
  name                  String                           @db.VarChar(255)
  description           String?
  service_type          String?                          @db.VarChar(100)
  price                 Decimal                          @db.Decimal(10, 2)
  currency              String?                          @default("USD") @db.VarChar(3)
  billing_cycle         enum_service_plans_billing_cycle @default(monthly)
  features              Json?                            @default("[]") @db.Json
  patient_limit         Int?
  trial_period_days     Int?                             @default(0)
  setup_fee             Decimal?                         @default(0) @db.Decimal(10, 2)
  is_active             Boolean?                         @default(true)
  stripe_price_id       String?                          @db.VarChar(255)
  created_at            DateTime                         @db.Timestamptz(6)
  updated_at            DateTime                         @updatedAt @db.Timestamptz(6)
  deleted_at            DateTime?                        @db.Timestamptz(6)
  patient_subscriptions PatientSubscription[]
  healthcare_providers  HealthcareProvider               @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@index([billing_cycle], map: "service_plans_billing_cycle")
  @@index([is_active], map: "service_plans_is_active")
  @@index([name], map: "service_plans_name")
  @@index([price], map: "service_plans_price")
  @@index([provider_id], map: "service_plans_provider_id")
  @@index([service_type], map: "service_plans_service_type")
  @@map("service_plans")
}

model PatientSubscription {
  id                     String                             @id @default(uuid()) @db.Uuid
  patient_id             String                             @db.Uuid
  provider_id            String                             @db.Uuid
  service_plan_id        String                             @db.Uuid
  status                 enum_patient_subscriptions_status? @default(ACTIVE)
  current_period_start   DateTime                           @db.Date
  current_period_end     DateTime                           @db.Date
  next_billing_date      DateTime?                          @db.Date
  trial_start            DateTime?                          @db.Date
  trial_end              DateTime?                          @db.Date
  payment_method_id      String?                            @db.VarChar(255)
  stripe_subscription_id String?                            @unique @db.VarChar(255)
  stripe_customer_id     String?                            @db.VarChar(255)
  last_payment_date      DateTime?                          @db.Timestamptz(6)
  last_payment_amount    Decimal?                           @db.Decimal(10, 2)
  failure_count          Int?                               @default(0)
  metadata               Json?                              @default("{}") @db.Json
  created_at             DateTime                           @db.Timestamptz(6)
  updated_at             DateTime                           @updatedAt @db.Timestamptz(6)
  cancelled_at           DateTime?                          @db.Timestamptz(6)
  deleted_at             DateTime?                          @db.Timestamptz(6)
  patient                Patient                            @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  healthcare_providers   HealthcareProvider                 @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_plans          ServicePlan                        @relation(fields: [service_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments               payments[]

  @@index([next_billing_date], map: "patient_subscriptions_next_billing_date")
  @@index([patient_id], map: "patient_subscriptions_patient_id")
  @@index([patient_id, provider_id], map: "patient_subscriptions_patient_id_provider_id")
  @@index([provider_id], map: "patient_subscriptions_provider_id")
  @@index([service_plan_id], map: "patient_subscriptions_service_plan_id")
  @@index([status], map: "patient_subscriptions_status")
  @@index([stripe_customer_id], map: "patient_subscriptions_stripe_customer_id")
  @@index([stripe_subscription_id], map: "patient_subscriptions_stripe_subscription_id")
  @@map("patient_subscriptions")
}

model PatientDoctorAssignment {
  id                                                                String    @id @default(uuid()) @db.Uuid
  patient_id                                                        String    @db.Uuid
  doctor_id                                                         String    @db.Uuid
  assignment_type                                                   String    @db.VarChar(50)
  permissions                                                       Json?     @default("{\"can_prescribe\": false, \"can_order_tests\": false, \"can_view_patient\": true, \"can_create_care_plans\": false, \"can_modify_care_plans\": false, \"can_access_full_history\": false}")
  specialty_focus                                                   String[]  @default([])
  care_plan_ids                                                     String[]  @default([]) @db.Uuid
  assigned_by_doctor_id                                             String?   @db.Uuid
  assigned_by_admin_id                                              String?   @db.Uuid
  patient_consent_required                                          Boolean?  @default(false)
  patient_consent_status                                            String?   @default("not_required") @db.VarChar(20)
  consent_method                                                    String?   @db.VarChar(20)
  consent_otp                                                       String?   @db.VarChar(10)
  consent_otp_expires_at                                            DateTime? @db.Timestamptz(6)
  consent_granted_at                                                DateTime? @db.Timestamptz(6)
  assignment_start_date                                             DateTime? @db.Timestamptz(6)
  assignment_end_date                                               DateTime? @db.Timestamptz(6)
  is_active                                                         Boolean?  @default(true)
  assignment_reason                                                 String?
  notes                                                             String?
  requires_same_organization                                        Boolean?  @default(false)
  created_at                                                        DateTime? @db.Timestamptz(6)
  updated_at                                                        DateTime? @updatedAt @db.Timestamptz(6)
  deleted_at                                                        DateTime? @db.Timestamptz(6)
  users                                                             User?     @relation(fields: [assigned_by_admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctors_patient_doctor_assignments_assigned_by_doctor_idTodoctors doctors?  @relation("patient_doctor_assignments_assigned_by_doctor_idTodoctors", fields: [assigned_by_doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctor                                                            doctors   @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient                                                           Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([doctor_id, is_active, created_at], map: "idx_assignments_doctor_active_created")
  @@index([patient_id, assignment_type, is_active], map: "idx_assignments_patient_type_active")
  @@index([assignment_type], map: "patient_doctor_assignments_assignment_type")
  @@index([doctor_id], map: "patient_doctor_assignments_doctor_id")
  @@index([is_active], map: "patient_doctor_assignments_is_active")
  @@index([patient_consent_status], map: "patient_doctor_assignments_patient_consent_status")
  @@index([patient_id], map: "patient_doctor_assignments_patient_id")
  @@map("patient_doctor_assignments")
}

model UserDevice {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String    @db.Uuid
  device_type           String    @db.VarChar(50)
  push_token            String    @db.VarChar(500)
  device_id             String?   @db.VarChar(255)
  is_active             Boolean?  @default(true)
  notification_settings Json?     @default("{\"vitals\": true, \"symptoms\": true, \"emergency\": true, \"reminders\": true, \"medications\": true, \"appointments\": true}")
  last_used_at          DateTime? @db.Timestamptz(6)
  created_at            DateTime? @db.Timestamptz(6)
  updated_at            DateTime? @updatedAt @db.Timestamptz(6)
  deleted_at            DateTime? @db.Timestamptz(6)
  user                  User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, push_token], map: "user_devices_user_id_push_token")
  @@index([device_type], map: "user_devices_device_type")
  @@index([is_active], map: "user_devices_is_active")
  @@index([last_used_at], map: "user_devices_last_used_at")
  @@index([push_token], map: "user_devices_push_token")
  @@index([user_id], map: "user_devices_user_id")
  @@map("user_devices")
}

model Notification {
  id                        String           @id @default(uuid()) @db.Uuid
  patient_id                String?          @db.Uuid
  doctor_id                 String?          @db.Uuid
  hsp_id                    String?          @db.Uuid
  organization_id           String?          @db.Uuid
  type                      String           @db.VarChar(50)
  title                     String           @db.VarChar(255)
  message                   String
  priority                  String?          @default("MEDIUM") @db.VarChar(20)
  is_urgent                 Boolean?         @default(false)
  channels                  String[]         @default(["PUSH"]) @db.VarChar(255)
  scheduled_for             DateTime?        @db.Timestamptz(6)
  expires_at                DateTime?        @db.Timestamptz(6)
  status                    String?          @default("pending") @db.VarChar(20)
  sent_at                   DateTime?        @db.Timestamptz(6)
  delivered_at              DateTime?        @db.Timestamptz(6)
  delivery_attempts         Int?             @default(0)
  delivery_log              Json?            @default("[]")
  read_at                   DateTime?        @db.Timestamptz(6)
  acknowledged_at           DateTime?        @db.Timestamptz(6)
  related_appointment_id    String?          @db.Uuid
  related_medication_id     String?          @db.Uuid
  related_care_plan_id      String?          @db.Uuid
  related_treatment_plan_id String?          @db.Uuid
  metadata                  Json?            @default("{}")
  requires_action           Boolean?         @default(false)
  action_url                String?          @db.VarChar(500)
  action_taken              Boolean?         @default(false)
  action_taken_at           DateTime?        @db.Timestamptz(6)
  template_id               String?          @db.VarChar(100)
  personalization_data      Json?            @default("{}")
  created_at                DateTime?        @db.Timestamptz(6)
  updated_at                DateTime?        @updatedAt @db.Timestamptz(6)
  deleted_at                DateTime?        @db.Timestamptz(6)
  recipient_id              String?          @db.Uuid
  doctors                   doctors?         @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hsps                      hsps?            @relation(fields: [hsp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations             Organization?    @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients                  Patient?         @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                     User?            @relation(fields: [recipient_id], references: [id])
  appointments              Appointment?     @relation(fields: [related_appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  care_plans                CarePlan?        @relation(fields: [related_care_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medications               Medication?      @relation(fields: [related_medication_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  treatment_plans           treatment_plans? @relation(fields: [related_treatment_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([type, priority, created_at], map: "idx_notifications_type_priority_created")
  @@index([doctor_id], map: "notifications_doctor_id")
  @@index([expires_at], map: "notifications_expires_at")
  @@index([hsp_id], map: "notifications_hsp_id")
  @@index([is_urgent], map: "notifications_is_urgent")
  @@index([organization_id], map: "notifications_organization_id")
  @@index([patient_id], map: "notifications_patient_id")
  @@index([patient_id, status, created_at], map: "notifications_patient_id_status_created_at")
  @@index([priority], map: "notifications_priority")
  @@index([requires_action, action_taken], map: "notifications_requires_action_action_taken")
  @@index([scheduled_for], map: "notifications_scheduled_for")
  @@index([status], map: "notifications_status")
  @@index([status, scheduled_for, expires_at], map: "notifications_status_scheduled_for_expires_at")
  @@index([type], map: "notifications_type")
  @@map("notifications")
}

model AuditLog {
  id              String        @id @default(uuid()) @db.Uuid
  user_id         String?       @db.Uuid
  user_role       String?       @db.VarChar(50)
  organization_id String?       @db.Uuid
  action          String        @db.VarChar(10)
  resource        String        @db.VarChar(500)
  patient_id      String?       @db.Uuid
  phi_accessed    Boolean?      @default(false)
  access_granted  Boolean
  denial_reason   String?
  ip_address      String?       @db.Inet
  user_agent      String?
  session_id      String?       @db.VarChar(255)
  request_id      String?       @db.Uuid
  data_changes    Json?
  encrypted_data  Json?
  risk_level      String?       @default("low") @db.VarChar(10)
  security_alerts Json?         @default("[]")
  retention_date  DateTime?     @db.Timestamptz(6)
  timestamp       DateTime      @db.Timestamptz(6)
  created_at      DateTime?     @db.Timestamptz(6)
  organizations   Organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients        Patient?      @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           User?         @relation(fields: [user_id], references: [id])

  @@index([access_granted], map: "audit_logs_access_granted")
  @@index([action], map: "audit_logs_action")
  @@index([ip_address], map: "audit_logs_ip_address")
  @@index([organization_id], map: "audit_logs_organization_id")
  @@index([patient_id], map: "audit_logs_patient_id")
  @@index([patient_id, phi_accessed, timestamp], map: "audit_logs_patient_id_phi_accessed_timestamp")
  @@index([phi_accessed], map: "audit_logs_phi_accessed")
  @@index([retention_date], map: "audit_logs_retention_date")
  @@index([risk_level], map: "audit_logs_risk_level")
  @@index([risk_level, access_granted, timestamp], map: "audit_logs_risk_level_access_granted_timestamp")
  @@index([session_id], map: "audit_logs_session_id")
  @@index([timestamp], map: "audit_logs_timestamp")
  @@index([user_id], map: "audit_logs_user_id")
  @@index([user_id, timestamp], map: "audit_logs_user_id_timestamp")
  @@index([user_id, created_at, action], map: "idx_audit_user_created_action")
  @@map("audit_logs")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model appointment_slots {
  id                  String                            @id @db.Uuid
  doctor_id           String                            @db.Uuid
  date                DateTime                          @db.Date
  start_time          DateTime                          @db.Time(6)
  end_time            DateTime                          @db.Time(6)
  max_appointments    Int?                              @default(1)
  booked_appointments Int?                              @default(0)
  is_available        Boolean?                          @default(true)
  slot_type           enum_appointment_slots_slot_type? @default(regular)
  notes               String?
  created_at          DateTime                          @db.Timestamptz(6)
  updated_at          DateTime                          @db.Timestamptz(6)
  deleted_at          DateTime?                         @db.Timestamptz(6)
  users               User                              @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appointments        Appointment[]

  @@index([date, is_available], map: "appointment_slots_date_is_available")
  @@index([doctor_id, date, start_time], map: "appointment_slots_doctor_id_date_start_time")
  @@index([doctor_id, is_available], map: "appointment_slots_doctor_id_is_available")
}

model care_plan_templates {
  id                        String                @id @db.Uuid
  name                      String                @db.VarChar(255)
  description               String?
  conditions                String[]              @default([])
  specialties               String[]              @default([])
  tags                      String[]              @default([])
  template_data             Json                  @default("{}")
  created_by                String                @db.Uuid
  organization_id           String?               @db.Uuid
  is_public                 Boolean?              @default(false)
  is_approved               Boolean?              @default(false)
  approved_by               String?               @db.Uuid
  version                   String?               @default("1.0") @db.VarChar(20)
  parent_template_id        String?               @db.Uuid
  usage_count               Int?                  @default(0)
  created_at                DateTime              @db.Timestamptz(6)
  updated_at                DateTime              @db.Timestamptz(6)
  deleted_at                DateTime?             @db.Timestamptz(6)
  users                     User?                 @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_providers      HealthcareProvider    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations             Organization?         @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  care_plan_templates       care_plan_templates?  @relation("care_plan_templatesTocare_plan_templates", fields: [parent_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_care_plan_templates care_plan_templates[] @relation("care_plan_templatesTocare_plan_templates")

  @@index([conditions], map: "idx_templates_conditions", type: Gin)
  @@index([created_by], map: "idx_templates_created_by")
  @@index([is_approved], map: "idx_templates_is_approved")
  @@index([is_public], map: "idx_templates_is_public")
  @@index([name], map: "idx_templates_name")
  @@index([organization_id], map: "idx_templates_organization_id")
  @@index([specialties], map: "idx_templates_specialties", type: Gin)
  @@index([tags], map: "idx_templates_tags", type: Gin)
}

model dashboard_metrics {
  id            String                             @id @db.Uuid
  entity_type   enum_dashboard_metrics_entity_type
  entity_id     String                             @db.Uuid
  metric_type   String                             @db.VarChar(100)
  metric_data   Json                               @default("{}")
  calculated_at DateTime                           @db.Timestamptz(6)
  valid_until   DateTime?                          @db.Timestamptz(6)
  created_at    DateTime?                          @db.Timestamptz(6)
  updated_at    DateTime?                          @db.Timestamptz(6)

  @@unique([entity_type, entity_id, metric_type], map: "dashboard_metrics_entity_type_entity_id_metric_type")
  @@index([calculated_at, valid_until], map: "dashboard_metrics_calculated_at_valid_until")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model doctors {
  id                                                                                     String                             @id @db.Uuid
  user_id                                                                                String                             @unique(map: "doctors_user_id") @db.Uuid
  doctor_id                                                                              String                             @unique(map: "doctors_doctor_id") @db.VarChar(50)
  organization_id                                                                        String?                            @db.Uuid
  medical_license_number                                                                 String                             @unique(map: "doctors_medical_license_number") @db.VarChar(100)
  npi_number                                                                             String?                            @unique @db.VarChar(20)
  board_certifications                                                                   String[]                           @default([])
  medical_school                                                                         String?                            @db.VarChar(255)
  residency_programs                                                                     Json?                              @default("[]")
  specialties                                                                            String[]                           @default([])
  sub_specialties                                                                        String[]                           @default([])
  years_of_experience                                                                    Int?
  capabilities                                                                           String[]                           @default(["prescribe_medications", "order_tests", "diagnose", "create_treatment_plans", "create_care_plans", "modify_medications", "monitor_vitals", "patient_education", "care_coordination", "emergency_response"])
  is_verified                                                                            Boolean?                           @default(false)
  verification_documents                                                                 Json?                              @default("[]")
  verification_date                                                                      DateTime?                          @db.Timestamptz(6)
  verified_by                                                                            String?                            @db.Uuid
  consultation_fee                                                                       Decimal?                           @db.Decimal(10, 2)
  availability_schedule                                                                  Json?                              @default("{\"friday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"monday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"sunday\": {\"available\": false}, \"tuesday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"saturday\": {\"available\": false}, \"thursday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}, \"wednesday\": {\"end\": \"17:00\", \"start\": \"09:00\", \"available\": true}}")
  languages_spoken                                                                       String[]                           @default(["en"])
  notification_preferences                                                               Json?                              @default("{\"patient_updates\": true, \"emergency_alerts\": true, \"peer_consultations\": true, \"system_notifications\": true, \"appointment_reminders\": true}")
  practice_name                                                                          String?                            @db.VarChar(255)
  practice_address                                                                       Json?                              @default("{}")
  practice_phone                                                                         String?                            @db.VarChar(20)
  signature_pic                                                                          String?
  razorpay_account_id                                                                    String?                            @db.VarChar(255)
  total_patients                                                                         Int?                               @default(0)
  active_treatment_plans                                                                 Int?                               @default(0)
  active_care_plans                                                                      Int?                               @default(0)
  average_rating                                                                         Decimal?                           @db.Decimal(3, 2)
  total_reviews                                                                          Int?                               @default(0)
  is_available_online                                                                    Boolean?                           @default(true)
  created_at                                                                             DateTime?                          @db.Timestamptz(6)
  updated_at                                                                             DateTime?                          @db.Timestamptz(6)
  deleted_at                                                                             DateTime?                          @db.Timestamptz(6)
  speciality_id                                                                          Int?
  profile_picture_url                                                                    String?
  banner_image_url                                                                       String?
  qualification_details                                                                  Json?                              @default("[]")
  registration_details                                                                   Json?                              @default("{}")
  subscription_details                                                                   Json?                              @default("{}")
  signature_image_url                                                                    String?
  signature_data                                                                         String?
  gender                                                                                 String?                            @db.VarChar(20)
  mobile_number                                                                          String?                            @db.VarChar(20)
  appointments                                                                           Appointment[]
  care_plans                                                                             CarePlan[]
  clinics                                                                                Clinic[]
  organizations                                                                          Organization?                      @relation(fields: [organization_id], references: [id])
  specialities                                                                           Speciality?                        @relation(fields: [speciality_id], references: [id])
  users_doctors_user_idTousers                                                           User                               @relation("doctors_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)
  users_doctors_verified_byTousers                                                       User?                              @relation("doctors_verified_byTousers", fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hsps                                                                                   hsps[]
  notifications                                                                          Notification[]
  patient_consent_otp_patient_consent_otp_primary_doctor_idTodoctors                     patient_consent_otp[]              @relation("patient_consent_otp_primary_doctor_idTodoctors")
  patient_consent_otp_patient_consent_otp_secondary_doctor_idTodoctors                   patient_consent_otp[]              @relation("patient_consent_otp_secondary_doctor_idTodoctors")
  patient_doctor_assignments_patient_doctor_assignments_assigned_by_doctor_idTodoctors   PatientDoctorAssignment[]          @relation("patient_doctor_assignments_assigned_by_doctor_idTodoctors")
  doctor_assignments                                                                     PatientDoctorAssignment[]
  patient_provider_consent_history                                                       patient_provider_consent_history[]
  patients                                                                               Patient[]
  secondary_doctor_assignments_secondary_doctor_assignments_primary_doctor_idTodoctors   secondary_doctor_assignments[]     @relation("secondary_doctor_assignments_primary_doctor_idTodoctors")
  secondary_doctor_assignments_secondary_doctor_assignments_secondary_doctor_idTodoctors secondary_doctor_assignments[]     @relation("secondary_doctor_assignments_secondary_doctor_idTodoctors")
  treatment_plans                                                                        treatment_plans[]
  
  // Phase 4: Telemedicine Relationships
  video_consultations                                                                    VideoConsultation[]
  lab_orders                                                                             LabOrder[]

  @@index([board_certifications], map: "doctors_board_certifications", type: Gin)
  @@index([gender], map: "doctors_gender")
  @@index([is_verified], map: "doctors_is_verified")
  @@index([is_verified, gender], map: "doctors_is_verified_gender")
  @@index([organization_id], map: "doctors_organization_id")
  @@index([specialties], map: "doctors_specialties", type: Gin)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model hsps {
  id                               String                             @id @db.Uuid
  user_id                          String                             @unique(map: "hsps_user_id") @db.Uuid
  hsp_id                           String                             @unique(map: "hsps_hsp_id") @db.VarChar(50)
  organization_id                  String?                            @db.Uuid
  hsp_type                         String                             @db.VarChar(50)
  license_number                   String?                            @unique @db.VarChar(100)
  certification_number             String?                            @db.VarChar(100)
  certifications                   String[]                           @default([])
  education                        Json?                              @default("[]")
  specializations                  String[]                           @default([])
  years_of_experience              Int?
  capabilities                     String[]                           @default(["monitor_vitals", "patient_education", "care_coordination"])
  requires_supervision             Boolean?                           @default(true)
  supervising_doctor_id            String?                            @db.Uuid
  supervision_level                String?                            @default("direct") @db.VarChar(20)
  is_verified                      Boolean?                           @default(false)
  verification_documents           Json?                              @default("[]")
  verification_date                DateTime?                          @db.Timestamptz(6)
  verified_by                      String?                            @db.Uuid
  hourly_rate                      Decimal?                           @db.Decimal(8, 2)
  availability_schedule            Json?                              @default("{\"friday\": {\"end\": \"18:00\", \"start\": \"08:00\", \"available\": true}, \"monday\": {\"end\": \"18:00\", \"start\": \"08:00\", \"available\": true}, \"sunday\": {\"available\": false}, \"tuesday\": {\"end\": \"18:00\", \"start\": \"08:00\", \"available\": true}, \"saturday\": {\"available\": false}, \"thursday\": {\"end\": \"18:00\", \"start\": \"08:00\", \"available\": true}, \"wednesday\": {\"end\": \"18:00\", \"start\": \"08:00\", \"available\": true}}")
  languages_spoken                 String[]                           @default(["en"])
  notification_preferences         Json?                              @default("{\"patient_updates\": true, \"shift_reminders\": true, \"emergency_alerts\": true, \"system_notifications\": true}")
  departments                      String[]                           @default([])
  shift_preferences                Json?                              @default("{\"preferred_shifts\": [\"day\"], \"weekend_availability\": false, \"night_shift_available\": false}")
  total_patients_assisted          Int?                               @default(0)
  active_care_plans                Int?                               @default(0)
  tasks_completed                  Int?                               @default(0)
  average_rating                   Decimal?                           @db.Decimal(3, 2)
  total_reviews                    Int?                               @default(0)
  is_available                     Boolean?                           @default(true)
  created_at                       DateTime?                          @db.Timestamptz(6)
  updated_at                       DateTime?                          @db.Timestamptz(6)
  deleted_at                       DateTime?                          @db.Timestamptz(6)
  care_plans                       CarePlan[]
  organizations                    Organization?                      @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctors                          doctors?                           @relation(fields: [supervising_doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_hsps_user_idTousers        User                               @relation("hsps_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_hsps_verified_byTousers    User?                              @relation("hsps_verified_byTousers", fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notifications                    Notification[]
  patient_consent_otp              patient_consent_otp[]
  patient_provider_consent_history patient_provider_consent_history[]
  patients                         Patient[]
  secondary_doctor_assignments     secondary_doctor_assignments[]

  @@index([departments], map: "hsps_departments", type: Gin)
  @@index([hsp_type], map: "hsps_hsp_type")
  @@index([is_verified], map: "hsps_is_verified")
  @@index([organization_id], map: "hsps_organization_id")
  @@index([specializations], map: "hsps_specializations", type: Gin)
  @@index([supervising_doctor_id], map: "hsps_supervising_doctor_id")
}

model medication_logs {
  id               String                                 @id @db.Uuid
  medication_id    String                                 @db.Uuid
  patient_id       String                                 @db.Uuid
  scheduled_at     DateTime                               @db.Timestamptz(6)
  taken_at         DateTime?                              @db.Timestamptz(6)
  dosage_taken     String?                                @db.VarChar(100)
  notes            String?
  adherence_status enum_medication_logs_adherence_status? @default(missed)
  reminder_sent    Boolean?                               @default(false)
  created_at       DateTime?                              @db.Timestamptz(6)
  updated_at       DateTime?                              @db.Timestamptz(6)
  medications      Medication                             @relation(fields: [medication_id], references: [id], onDelete: NoAction)
  patients         Patient                                @relation(fields: [patient_id], references: [id], onDelete: NoAction)

  @@index([adherence_status, scheduled_at], map: "medication_logs_adherence_status_scheduled_at")
  @@index([medication_id, scheduled_at], map: "medication_logs_medication_id_scheduled_at")
  @@index([patient_id, scheduled_at], map: "medication_logs_patient_id_scheduled_at")
}

model patient_alerts {
  id              String                         @id @db.Uuid
  patient_id      String                         @db.Uuid
  alert_type      enum_patient_alerts_alert_type
  severity        enum_patient_alerts_severity?  @default(medium)
  title           String                         @db.VarChar(200)
  message         String
  action_required Boolean?                       @default(false)
  acknowledged    Boolean?                       @default(false)
  acknowledged_at DateTime?                      @db.Timestamptz(6)
  acknowledged_by String?                        @db.Uuid
  resolved        Boolean?                       @default(false)
  resolved_at     DateTime?                      @db.Timestamptz(6)
  metadata        Json?                          @default("{}")
  created_at      DateTime?                      @db.Timestamptz(6)
  updated_at      DateTime?                      @db.Timestamptz(6)
  patients        Patient                        @relation(fields: [patient_id], references: [id], onDelete: NoAction)

  @@index([acknowledged, resolved], map: "patient_alerts_acknowledged_resolved")
  @@index([created_at], map: "patient_alerts_created_at")
  @@index([patient_id, alert_type, severity], map: "patient_alerts_patient_id_alert_type_severity")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model patient_consent_otp {
  id                                                       String                               @id @db.Uuid
  secondary_assignment_id                                  String                               @db.Uuid
  patient_id                                               String                               @db.Uuid
  primary_doctor_id                                        String                               @db.Uuid
  secondary_doctor_id                                      String?                              @db.Uuid
  secondary_hsp_id                                         String?                              @db.Uuid
  otp_code                                                 String                               @db.VarChar(10)
  otp_method                                               enum_patient_consent_otp_otp_method? @default(both)
  patient_phone                                            String?                              @db.VarChar(20)
  patient_email                                            String?                              @db.VarChar(255)
  generated_at                                             DateTime?                            @db.Timestamptz(6)
  expires_at                                               DateTime                             @db.Timestamptz(6)
  attempts_count                                           Int?                                 @default(0)
  max_attempts                                             Int?                                 @default(3)
  is_verified                                              Boolean?                             @default(false)
  verified_at                                              DateTime?                            @db.Timestamptz(6)
  is_expired                                               Boolean?                             @default(false)
  is_blocked                                               Boolean?                             @default(false)
  blocked_at                                               DateTime?                            @db.Timestamptz(6)
  requested_by_user_id                                     String                               @db.Uuid
  request_ip_address                                       String?                              @db.Inet
  request_user_agent                                       String?
  sms_sent                                                 Boolean?                             @default(false)
  sms_sent_at                                              DateTime?                            @db.Timestamptz(6)
  sms_error                                                String?
  email_sent                                               Boolean?                             @default(false)
  email_sent_at                                            DateTime?                            @db.Timestamptz(6)
  email_error                                              String?
  created_at                                               DateTime?                            @db.Timestamptz(6)
  updated_at                                               DateTime?                            @db.Timestamptz(6)
  deleted_at                                               DateTime?                            @db.Timestamptz(6)
  patients                                                 Patient                              @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctors_patient_consent_otp_primary_doctor_idTodoctors   doctors                              @relation("patient_consent_otp_primary_doctor_idTodoctors", fields: [primary_doctor_id], references: [id], onDelete: Cascade)
  users                                                    User                                 @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)
  secondary_doctor_assignments                             secondary_doctor_assignments         @relation(fields: [secondary_assignment_id], references: [id], onDelete: Cascade)
  doctors_patient_consent_otp_secondary_doctor_idTodoctors doctors?                             @relation("patient_consent_otp_secondary_doctor_idTodoctors", fields: [secondary_doctor_id], references: [id], onDelete: Cascade)
  hsps                                                     hsps?                                @relation(fields: [secondary_hsp_id], references: [id], onDelete: Cascade)

  @@index([expires_at], map: "patient_consent_otp_expires_at")
  @@index([generated_at], map: "patient_consent_otp_generated_at")
  @@index([is_blocked], map: "patient_consent_otp_is_blocked")
  @@index([is_expired], map: "patient_consent_otp_is_expired")
  @@index([is_verified], map: "patient_consent_otp_is_verified")
  @@index([otp_code], map: "patient_consent_otp_otp_code")
  @@index([patient_id], map: "patient_consent_otp_patient_id")
  @@index([requested_by_user_id], map: "patient_consent_otp_requested_by_user_id")
  @@index([secondary_assignment_id], map: "patient_consent_otp_secondary_assignment_id")
}

model patient_provider_assignments {
  id                   String             @id @db.Uuid
  patient_id           String             @db.Uuid
  provider_id          String             @db.Uuid
  role                 String?            @default("primary") @db.VarChar(50)
  assigned_at          DateTime?          @db.Timestamptz(6)
  assigned_by          String?            @db.Uuid
  ended_at             DateTime?          @db.Timestamptz(6)
  notes                String?
  users                User?              @relation(fields: [assigned_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients             Patient            @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_providers HealthcareProvider @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([patient_id, provider_id, role, ended_at], map: "patient_provider_role_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model patient_provider_consent_history {
  id                                                                                 String                                                @id @db.Uuid
  patient_id                                                                         String                                                @db.Uuid
  previous_provider_id                                                               String?                                               @db.Uuid
  new_provider_id                                                                    String                                                @db.Uuid
  doctor_id                                                                          String?                                               @db.Uuid
  hsp_id                                                                             String?                                               @db.Uuid
  consent_required                                                                   Boolean?                                              @default(false)
  consent_requested                                                                  Boolean?                                              @default(false)
  consent_requested_at                                                               DateTime?                                             @db.Timestamptz(6)
  consent_given                                                                      Boolean?                                              @default(false)
  consent_given_at                                                                   DateTime?                                             @db.Timestamptz(6)
  consent_method                                                                     enum_patient_provider_consent_history_consent_method?
  consent_token                                                                      String?                                               @db.VarChar(100)
  consent_token_expires_at                                                           DateTime?                                             @db.Timestamptz(6)
  consent_verified                                                                   Boolean?                                              @default(false)
  consent_denied                                                                     Boolean?                                              @default(false)
  consent_denied_at                                                                  DateTime?                                             @db.Timestamptz(6)
  reason                                                                             String?
  initiated_by                                                                       String?                                               @db.Uuid
  status                                                                             enum_patient_provider_consent_history_status?         @default(pending)
  metadata                                                                           Json?                                                 @default("{}")
  created_at                                                                         DateTime?                                             @db.Timestamptz(6)
  updated_at                                                                         DateTime?                                             @db.Timestamptz(6)
  doctors                                                                            doctors?                                              @relation(fields: [doctor_id], references: [id], onUpdate: NoAction)
  hsps                                                                               hsps?                                                 @relation(fields: [hsp_id], references: [id], onUpdate: NoAction)
  organizations_patient_provider_consent_history_new_provider_idToorganizations      Organization                                          @relation("patient_provider_consent_history_new_provider_idToorganizations", fields: [new_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patients                                                                           Patient                                               @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations_patient_provider_consent_history_previous_provider_idToorganizations Organization?                                         @relation("patient_provider_consent_history_previous_provider_idToorganizations", fields: [previous_provider_id], references: [id], onUpdate: NoAction)

  @@index([consent_requested_at], map: "patient_provider_consent_history_consent_requested_at")
  @@index([doctor_id], map: "patient_provider_consent_history_doctor_id")
  @@index([hsp_id], map: "patient_provider_consent_history_hsp_id")
  @@index([new_provider_id], map: "patient_provider_consent_history_new_provider_id")
  @@index([patient_id, status], map: "patient_provider_consent_history_patient_id_status")
}

model payment_methods {
  id                       String                    @id @db.Uuid
  patient_id               String                    @db.Uuid
  stripe_payment_method_id String                    @unique @db.VarChar(255)
  type                     enum_payment_methods_type
  card_brand               String?                   @db.VarChar(50)
  card_last4               String?                   @db.VarChar(4)
  card_exp_month           Int?
  card_exp_year            Int?
  bank_name                String?                   @db.VarChar(100)
  bank_last4               String?                   @db.VarChar(4)
  is_default               Boolean?                  @default(false)
  is_active                Boolean?                  @default(true)
  billing_address          Json?                     @db.Json
  metadata                 Json?                     @default("{}") @db.Json
  created_at               DateTime                  @db.Timestamptz(6)
  updated_at               DateTime                  @db.Timestamptz(6)
  deleted_at               DateTime?                 @db.Timestamptz(6)
  patients                 Patient                   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([is_active], map: "payment_methods_is_active")
  @@index([is_default], map: "payment_methods_is_default")
  @@index([patient_id], map: "payment_methods_patient_id")
  @@index([stripe_payment_method_id], map: "payment_methods_stripe_payment_method_id")
  @@index([type], map: "payment_methods_type")
}

model payments {
  id                       String                       @id @db.Uuid
  subscription_id          String                       @db.Uuid
  patient_id               String                       @db.Uuid
  provider_id              String                       @db.Uuid
  amount                   Decimal                      @db.Decimal(10, 2)
  currency                 String?                      @default("USD") @db.VarChar(3)
  status                   enum_payments_status?        @default(pending)
  payment_method           enum_payments_payment_method
  stripe_payment_intent_id String?                      @unique @db.VarChar(255)
  stripe_charge_id         String?                      @db.VarChar(255)
  failure_code             String?                      @db.VarChar(100)
  failure_message          String?
  refund_amount            Decimal?                     @default(0) @db.Decimal(10, 2)
  refund_reason            String?                      @db.VarChar(255)
  invoice_id               String?                      @db.VarChar(255)
  billing_period_start     DateTime?                    @db.Date
  billing_period_end       DateTime?                    @db.Date
  metadata                 Json?                        @default("{}") @db.Json
  created_at               DateTime                     @db.Timestamptz(6)
  updated_at               DateTime                     @db.Timestamptz(6)
  processed_at             DateTime?                    @db.Timestamptz(6)
  deleted_at               DateTime?                    @db.Timestamptz(6)
  patients                 Patient                      @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_providers     HealthcareProvider           @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient_subscriptions    PatientSubscription          @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([billing_period_start, billing_period_end], map: "payments_billing_period_start_billing_period_end")
  @@index([created_at], map: "payments_created_at")
  @@index([patient_id], map: "payments_patient_id")
  @@index([provider_id], map: "payments_provider_id")
  @@index([status], map: "payments_status")
  @@index([stripe_payment_intent_id], map: "payments_stripe_payment_intent_id")
  @@index([subscription_id], map: "payments_subscription_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model provider_change_history {
  id                                                                        String                                         @id @db.Uuid
  practitioner_type                                                         enum_provider_change_history_practitioner_type
  practitioner_id                                                           String                                         @db.Uuid
  previous_provider_id                                                      String?                                        @db.Uuid
  new_provider_id                                                           String                                         @db.Uuid
  change_date                                                               DateTime                                       @db.Timestamptz(6)
  affected_patients_count                                                   Int?                                           @default(0)
  consent_required_count                                                    Int?                                           @default(0)
  consent_obtained_count                                                    Int?                                           @default(0)
  reason                                                                    String?
  status                                                                    enum_provider_change_history_status?           @default(active)
  created_at                                                                DateTime?                                      @db.Timestamptz(6)
  updated_at                                                                DateTime?                                      @db.Timestamptz(6)
  organizations_provider_change_history_new_provider_idToorganizations      Organization                                   @relation("provider_change_history_new_provider_idToorganizations", fields: [new_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations_provider_change_history_previous_provider_idToorganizations Organization?                                  @relation("provider_change_history_previous_provider_idToorganizations", fields: [previous_provider_id], references: [id], onUpdate: NoAction)

  @@index([change_date], map: "provider_change_history_change_date")
  @@index([new_provider_id], map: "provider_change_history_new_provider_id")
  @@index([practitioner_type, practitioner_id], map: "provider_change_history_practitioner_type_practitioner_id")
  @@index([status], map: "provider_change_history_status")
}

model providers {
  id           String    @id @db.Uuid
  user_id      String    @db.Uuid
  name         String    @db.VarChar(100)
  address      String?   @db.VarChar(255)
  city         String?   @db.VarChar(255)
  state        String?   @db.VarChar(255)
  activated_on DateTime? @db.Timestamptz(6)
  details      Json?     @db.Json
  created_at   DateTime  @db.Timestamptz(6)
  updated_at   DateTime  @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  users        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "providers_user_id")
}

model schedule_events {
  id         String                           @id @db.Uuid
  critical   Boolean?
  event_type enum_schedule_events_event_type?
  event_id   String?                          @db.Uuid
  details    Json?                            @db.Json
  status     enum_schedule_events_status      @default(pending)
  date       DateTime?                        @db.Date
  start_time DateTime?                        @db.Timestamptz(6)
  end_time   DateTime?                        @db.Timestamptz(6)
  created_at DateTime?                        @db.Timestamptz(6)
  updated_at DateTime?                        @db.Timestamptz(6)
  deleted_at DateTime?                        @db.Timestamptz(6)

  @@index([event_id, event_type], map: "schedule_events_event_id_event_type")
  @@index([event_type, status, date, start_time], map: "schedule_events_event_type_status_date_start_time")
  @@index([status, date], map: "schedule_events_status_date")
}

model scheduled_events {
  id                String                           @id @db.Uuid
  patient_id        String                           @db.Uuid
  care_plan_id      String?                          @db.Uuid
  event_type        enum_scheduled_events_event_type
  event_id          String?                          @db.Uuid
  title             String                           @db.VarChar(255)
  description       String?
  scheduled_for     DateTime                         @db.Timestamptz(6)
  timezone          String?                          @default("UTC") @db.VarChar(50)
  status            enum_scheduled_events_status?    @default(SCHEDULED)
  priority          enum_scheduled_events_priority?  @default(MEDIUM)
  event_data        Json?                            @default("{}")
  completed_at      DateTime?                        @db.Timestamptz(6)
  completed_by      String?                          @db.Uuid
  created_at        DateTime?                        @db.Timestamptz(6)
  updated_at        DateTime?                        @db.Timestamptz(6)
  deleted_at        DateTime?                        @db.Timestamptz(6)
  adherence_records AdherenceRecord[]
  care_plans        CarePlan?                        @relation(fields: [care_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             User?                            @relation(fields: [completed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients          Patient                          @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([care_plan_id, scheduled_for, event_type], map: "idx_events_careplan_time_type")
  @@index([patient_id, scheduled_for, status], map: "idx_events_patient_time_status")
  @@index([care_plan_id], map: "scheduled_events_care_plan_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model secondary_doctor_assignments {
  id                                                                                     String                                            @id @db.Uuid
  patient_id                                                                             String                                            @db.Uuid
  primary_doctor_id                                                                      String                                            @db.Uuid
  secondary_doctor_id                                                                    String?                                           @db.Uuid
  secondary_hsp_id                                                                       String?                                           @db.Uuid
  assignment_reason                                                                      String?
  specialty_focus                                                                        String[]                                          @default([])
  care_plan_ids                                                                          String[]                                          @default([]) @db.Uuid
  primary_doctor_provider_id                                                             String?                                           @db.Uuid
  secondary_doctor_provider_id                                                           String?                                           @db.Uuid
  consent_required                                                                       Boolean?                                          @default(true)
  consent_status                                                                         enum_secondary_doctor_assignments_consent_status? @default(pending)
  access_granted                                                                         Boolean?                                          @default(false)
  first_access_attempt_at                                                                DateTime?                                         @db.Timestamptz(6)
  access_granted_at                                                                      DateTime?                                         @db.Timestamptz(6)
  consent_expires_at                                                                     DateTime?                                         @db.Timestamptz(6)
  consent_duration_months                                                                Int?                                              @default(6)
  is_active                                                                              Boolean?                                          @default(true)
  assignment_start_date                                                                  DateTime?                                         @db.Timestamptz(6)
  assignment_end_date                                                                    DateTime?                                         @db.Timestamptz(6)
  created_at                                                                             DateTime?                                         @db.Timestamptz(6)
  updated_at                                                                             DateTime?                                         @db.Timestamptz(6)
  deleted_at                                                                             DateTime?                                         @db.Timestamptz(6)
  patient_consent_otp                                                                    patient_consent_otp[]
  patients                                                                               Patient                                           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctors_secondary_doctor_assignments_primary_doctor_idTodoctors                        doctors                                           @relation("secondary_doctor_assignments_primary_doctor_idTodoctors", fields: [primary_doctor_id], references: [id], onDelete: Cascade)
  organizations_secondary_doctor_assignments_primary_doctor_provider_idToorganizations   Organization?                                     @relation("secondary_doctor_assignments_primary_doctor_provider_idToorganizations", fields: [primary_doctor_provider_id], references: [id])
  doctors_secondary_doctor_assignments_secondary_doctor_idTodoctors                      doctors?                                          @relation("secondary_doctor_assignments_secondary_doctor_idTodoctors", fields: [secondary_doctor_id], references: [id], onDelete: Cascade)
  organizations_secondary_doctor_assignments_secondary_doctor_provider_idToorganizations Organization?                                     @relation("secondary_doctor_assignments_secondary_doctor_provider_idToorganizations", fields: [secondary_doctor_provider_id], references: [id])
  hsps                                                                                   hsps?                                             @relation(fields: [secondary_hsp_id], references: [id], onDelete: Cascade)

  @@index([access_granted], map: "secondary_doctor_assignments_access_granted")
  @@index([consent_expires_at], map: "secondary_doctor_assignments_consent_expires_at")
  @@index([consent_status], map: "secondary_doctor_assignments_consent_status")
  @@index([is_active], map: "secondary_doctor_assignments_is_active")
  @@index([patient_id], map: "secondary_doctor_assignments_patient_id")
  @@index([primary_doctor_id], map: "secondary_doctor_assignments_primary_doctor_id")
  @@index([secondary_doctor_id], map: "secondary_doctor_assignments_secondary_doctor_id")
  @@index([secondary_hsp_id], map: "secondary_doctor_assignments_secondary_hsp_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model symptoms_database {
  id                  String    @id @db.Uuid
  diagnosis_name      String    @unique(map: "symptoms_database_diagnosis_name") @db.VarChar(255)
  symptoms            Json?     @default("{}")
  category            String?   @db.VarChar(100)
  severity_indicators Json?     @default("{}")
  common_age_groups   Json?     @default("[]")
  gender_specific     String?   @db.VarChar(20)
  is_active           Boolean?  @default(true)
  created_by          String?   @db.Uuid
  created_at          DateTime? @db.Timestamptz(6)
  updated_at          DateTime? @db.Timestamptz(6)
  deleted_at          DateTime? @db.Timestamptz(6)

  @@index([category], map: "symptoms_database_category")
  @@index([is_active], map: "symptoms_database_is_active")
  @@index([symptoms], map: "symptoms_database_symptoms", type: Gin)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model treatment_database {
  id                    String    @id @db.Uuid
  treatment_name        String    @unique(map: "treatment_database_treatment_name") @db.VarChar(255)
  treatment_type        String    @db.VarChar(50)
  description           String?
  applicable_conditions Json?     @default("[]")
  duration              String?   @db.VarChar(100)
  frequency             String?   @db.VarChar(100)
  dosage_info           Json?     @default("{}")
  category              String?   @db.VarChar(100)
  severity_level        String?   @db.VarChar(20)
  age_restrictions      Json?     @default("{}")
  contraindications     Json?     @default("[]")
  side_effects          Json?     @default("[]")
  monitoring_required   Json?     @default("[]")
  is_active             Boolean?  @default(true)
  requires_specialist   Boolean?  @default(false)
  prescription_required Boolean?  @default(false)
  created_by            String?   @db.Uuid
  created_at            DateTime? @db.Timestamptz(6)
  updated_at            DateTime? @db.Timestamptz(6)
  deleted_at            DateTime? @db.Timestamptz(6)

  @@index([applicable_conditions], map: "treatment_database_applicable_conditions", type: Gin)
  @@index([category], map: "treatment_database_category")
  @@index([is_active], map: "treatment_database_is_active")
  @@index([severity_level], map: "treatment_database_severity_level")
  @@index([treatment_type], map: "treatment_database_treatment_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model treatment_plans {
  id                     String         @id @db.Uuid
  patient_id             String         @db.Uuid
  doctor_id              String         @db.Uuid
  organization_id        String?        @db.Uuid
  title                  String         @db.VarChar(255)
  description            String?
  plan_type              String?        @default("treatment_plan") @db.VarChar(20)
  primary_diagnosis      String         @db.VarChar(255)
  secondary_diagnoses    String[]       @default([])
  chief_complaint        String?
  symptoms               Json?          @default("[]")
  treatment_goals        Json?          @default("[]")
  interventions          Json?          @default("[]")
  medications            Json?          @default("[]")
  instructions           String?
  start_date             DateTime       @db.Timestamptz(6)
  expected_duration_days Int?
  end_date               DateTime?      @db.Timestamptz(6)
  follow_up_required     Boolean?       @default(true)
  follow_up_date         DateTime?      @db.Timestamptz(6)
  follow_up_instructions String?
  status                 String?        @default("ACTIVE") @db.VarChar(20)
  priority               String?        @default("MEDIUM") @db.VarChar(20)
  progress_notes         Json?          @default("[]")
  completion_percentage  Int?           @default(0)
  outcome                String?
  emergency_contacts     Json?          @default("[]")
  warning_signs          String[]       @default([])
  assigned_hsps          String[]       @default([]) @db.Uuid
  care_team_notes        Json?          @default("[]")
  created_at             DateTime?      @db.Timestamptz(6)
  updated_at             DateTime?      @db.Timestamptz(6)
  deleted_at             DateTime?      @db.Timestamptz(6)
  notifications          Notification[]
  doctors                doctors        @relation(fields: [doctor_id], references: [id], onDelete: NoAction)
  organizations          Organization?  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patients               Patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([doctor_id], map: "treatment_plans_doctor_id")
  @@index([end_date], map: "treatment_plans_end_date")
  @@index([follow_up_date], map: "treatment_plans_follow_up_date")
  @@index([organization_id], map: "treatment_plans_organization_id")
  @@index([patient_id], map: "treatment_plans_patient_id")
  @@index([primary_diagnosis], map: "treatment_plans_primary_diagnosis")
  @@index([priority], map: "treatment_plans_priority")
  @@index([secondary_diagnoses], map: "treatment_plans_secondary_diagnoses", type: Gin)
  @@index([start_date], map: "treatment_plans_start_date")
  @@index([status], map: "treatment_plans_status")
  @@index([symptoms], map: "treatment_plans_symptoms", type: Gin)
}

model user_roles {
  id            String                       @id @db.Uuid
  user_identity String                       @db.Uuid
  linked_with   enum_user_roles_linked_with?
  linked_id     String?                      @db.Uuid
  created_at    DateTime                     @db.Timestamptz(6)
  updated_at    DateTime                     @db.Timestamptz(6)
  deleted_at    DateTime?                    @db.Timestamptz(6)
  users         User                         @relation(fields: [user_identity], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_identity, linked_with], map: "idx_userroles_identity_linked")
}

model vital_requirements {
  id               String    @id @db.Uuid
  care_plan_id     String    @db.Uuid
  vital_type_id    String    @db.Uuid
  frequency        String    @db.VarChar(100)
  preferred_time   DateTime? @db.Time(6)
  is_critical      Boolean?  @default(false)
  monitoring_notes String?
  created_at       DateTime? @db.Timestamptz(6)
  updated_at       DateTime? @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  care_plans       CarePlan  @relation(fields: [care_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vital_types      VitalType @relation(fields: [vital_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([care_plan_id], map: "vital_requirements_care_plan_id")
  @@index([frequency], map: "vital_requirements_frequency")
  @@index([is_critical], map: "vital_requirements_is_critical")
  @@index([vital_type_id], map: "vital_requirements_vital_type_id")
}

model vital_templates {
  id         String    @id @db.Uuid
  name       String    @db.VarChar(255)
  unit       String?   @db.VarChar(255)
  details    Json?     @db.Json
  created_at DateTime  @db.Timestamptz(6)
  updated_at DateTime  @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  vitals     vitals[]
}

model vitals {
  id                String          @id @db.Uuid
  vital_template_id String          @db.Uuid
  care_plan_id      String          @db.Uuid
  details           Json?           @db.Json
  description       String?         @db.VarChar(1000)
  start_date        DateTime?       @db.Timestamptz(6)
  end_date          DateTime?       @db.Timestamptz(6)
  created_at        DateTime        @db.Timestamptz(6)
  updated_at        DateTime        @db.Timestamptz(6)
  deleted_at        DateTime?       @db.Timestamptz(6)
  care_plans        CarePlan        @relation(fields: [care_plan_id], references: [id], onDelete: NoAction)
  vital_templates   vital_templates @relation(fields: [vital_template_id], references: [id], onDelete: NoAction)

  @@index([care_plan_id], map: "vitals_care_plan_id")
  @@index([vital_template_id], map: "vitals_vital_template_id")
}

enum enum_adherence_records_adherence_type {
  MEDICATION
  APPOINTMENT
  VITAL_CHECK
  SYMPTOM_LOG
  DIET_LOG
  EXERCISE
  REMINDER
}

enum enum_appointment_slots_slot_type {
  regular
  emergency
  consultation
  follow_up
}

enum enum_appointments_organizer_type {
  doctor
  patient
  care_taker
  hsp
  provider
  admin
}

enum enum_appointments_participant_one_type {
  doctor
  patient
  hsp
}

enum enum_appointments_participant_two_type {
  doctor
  patient
  hsp
}

enum enum_dashboard_metrics_entity_type {
  patient
  doctor
  organization
  system
}

enum enum_medication_logs_adherence_status {
  taken
  missed
  late
  partial
}

enum enum_medications_organizer_type {
  doctor
  patient
  care_taker
  hsp
  provider
  admin
}

enum enum_patient_alerts_alert_type {
  medication
  vital
  appointment
  symptom
  system
}

enum enum_patient_alerts_severity {
  critical
  high
  medium
  low
}

enum enum_patient_consent_otp_otp_method {
  sms
  email
  both
}

enum enum_patient_provider_consent_history_consent_method {
  sms
  email
  in_person
  phone
  automatic
}

enum enum_patient_provider_consent_history_status {
  pending
  consent_requested
  approved
  denied
  expired
  completed
}

enum enum_patient_subscriptions_status {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
  EXPIRED
  TRIALING
}

enum enum_patients_provider_consent_method {
  sms
  email
  in_person
  phone
  automatic
}

enum enum_payment_methods_type {
  card
  bank_account
  paypal
}

enum enum_payments_payment_method {
  card
  bank_account
  paypal
  apple_pay
  google_pay
}

enum enum_payments_status {
  pending
  processing
  succeeded
  failed
  cancelled
  refunded
}

enum enum_provider_change_history_practitioner_type {
  doctor
  hsp
}

enum enum_provider_change_history_status {
  active
  processing
  completed
}

enum enum_schedule_events_event_type {
  appointment
  reminder
  medication_reminder @map("medication-reminder")
  vitals
  careplan_activation @map("careplan-activation")
  diet
  workout
}

enum enum_schedule_events_status {
  scheduled
  pending
  completed
  expired
  cancelled
  started
  prior
}

enum enum_scheduled_events_event_type {
  MEDICATION
  APPOINTMENT
  VITAL_CHECK
  SYMPTOM_LOG
  DIET_LOG
  EXERCISE
  REMINDER
}

enum enum_scheduled_events_priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum enum_scheduled_events_status {
  SCHEDULED
  PENDING
  IN_PROGRESS
  COMPLETED
  MISSED
  CANCELLED
  EXPIRED
}

enum enum_secondary_doctor_assignments_consent_status {
  pending
  requested
  granted
  denied
  expired
}

enum enum_service_plans_billing_cycle {
  monthly
  yearly
  one_time @map("one-time")
  weekly
}

enum enum_user_roles_linked_with {
  doctor
  patient
  care_taker
  hsp
  provider
  admin
}

enum enum_users_account_status {
  PENDING_VERIFICATION
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
}

enum enum_users_gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum enum_users_role {
  SYSTEM_ADMIN
  HOSPITAL_ADMIN
  DOCTOR
  HSP
  PATIENT
  CAREGIVER
}

enum enum_vital_readings_alert_level {
  normal
  warning
  critical
  emergency
}

// ============================================================================
// MEDICAL SAFETY & DRUG INTERACTION MODELS
// Critical safety features for healthcare platform
// ============================================================================

model DrugInteraction {
  id                   String   @id @default(uuid()) @db.Uuid
  rxcui_one           String   @db.VarChar(50)  // RxNorm identifier for first drug
  rxcui_two           String   @db.VarChar(50)  // RxNorm identifier for second drug
  drug_name_one       String   @db.VarChar(255)
  drug_name_two       String   @db.VarChar(255)
  severity_level      DrugInteractionSeverity
  interaction_type    String   @db.VarChar(100) // "pharmacokinetic", "pharmacodynamic", "duplicate"
  description         String   @db.Text
  clinical_effect     String   @db.Text
  management_advice   String   @db.Text
  evidence_level      String   @db.VarChar(10)  // "HIGH", "MODERATE", "LOW"
  source              String   @default("RxNorm") @db.VarChar(50)
  last_updated        DateTime @updatedAt @db.Timestamptz(6)
  created_at          DateTime @default(now()) @db.Timestamptz(6)

  medication_safety_alerts MedicationSafetyAlert[]

  @@unique([rxcui_one, rxcui_two])
  @@index([severity_level])
  @@index([drug_name_one, drug_name_two])
  @@map("drug_interactions")
}

model PatientAllergy {
  id                     String                    @id @default(uuid()) @db.Uuid
  patient_id             String                    @db.Uuid
  allergen_type          AllergenType
  allergen_name          String                    @db.VarChar(255)
  allergen_rxnorm        String?                   @db.VarChar(50) // RxNorm code if medication
  reaction_severity      AllergySeverity
  reaction_symptoms      String?                   @db.Text
  onset_date             DateTime?                 @db.Date
  verified_by_doctor     Boolean                   @default(false)
  verified_by            String?                   @db.Uuid
  notes                  String?                   @db.Text
  is_active              Boolean                   @default(true)
  created_at             DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                  @updatedAt @db.Timestamptz(6)

  patient                Patient                   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  verified_by_user       User?                     @relation(fields: [verified_by], references: [id])
  medication_safety_alerts MedicationSafetyAlert[]

  @@index([patient_id, is_active])
  @@index([allergen_type, allergen_name])
  @@map("patient_allergies")
}

model MedicationSafetyAlert {
  id                    String                    @id @default(uuid()) @db.Uuid
  patient_id            String                    @db.Uuid
  medication_id         String?                   @db.Uuid
  drug_interaction_id   String?                   @db.Uuid
  patient_allergy_id    String?                   @db.Uuid
  alert_type            MedicationAlertType
  severity              AlertSeverity
  alert_title           String                    @db.VarChar(255)
  alert_message         String                    @db.Text
  recommendation        String?                   @db.Text
  requires_override     Boolean                   @default(false)
  
  // Resolution tracking
  resolved              Boolean                   @default(false)
  resolved_by           String?                   @db.Uuid
  resolved_at           DateTime?                 @db.Timestamptz(6)
  resolution_notes      String?                   @db.Text
  override_reason       String?                   @db.Text
  
  // Metadata
  created_by            String?                   @db.Uuid
  created_at            DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                  @updatedAt @db.Timestamptz(6)

  patient               Patient                   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  medication            Medication?               @relation(fields: [medication_id], references: [id])
  drug_interaction      DrugInteraction?          @relation(fields: [drug_interaction_id], references: [id])
  patient_allergy       PatientAllergy?           @relation(fields: [patient_allergy_id], references: [id])
  resolved_by_user      User?                     @relation(fields: [resolved_by], references: [id])
  created_by_user       User?                     @relation("SafetyAlertCreatedBy", fields: [created_by], references: [id])

  @@index([patient_id, severity, resolved])
  @@index([alert_type, created_at])
  @@index([resolved, created_at])
  @@map("medication_safety_alerts")
}

// ============================================================================
// EMERGENCY RESPONSE & CRITICAL CARE MODELS
// Real-time monitoring and emergency alert system
// ============================================================================

model EmergencyAlert {
  id                    String                    @id @default(uuid()) @db.Uuid
  patient_id            String                    @db.Uuid
  alert_type            EmergencyAlertType
  priority_level        EmergencyPriority
  vital_reading_id      String?                   @db.Uuid
  triggered_by_rule     String?                   @db.VarChar(255) // Rule ID that triggered alert
  alert_title           String                    @db.VarChar(255)
  alert_message         String                    @db.Text
  clinical_context      String?                   @db.Text
  
  // Response tracking
  acknowledged          Boolean                   @default(false)
  acknowledged_by       String?                   @db.Uuid
  acknowledged_at       DateTime?                 @db.Timestamptz(6)
  resolved              Boolean                   @default(false)
  resolved_by           String?                   @db.Uuid
  resolved_at           DateTime?                 @db.Timestamptz(6)
  resolution_notes      String?                   @db.Text
  
  // Emergency contact notifications
  notifications_sent    Json                      @default("[]") // Array of sent notifications
  escalation_level      Int                       @default(0)
  max_escalations       Int                       @default(3)
  
  // Metadata
  created_at            DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                  @updatedAt @db.Timestamptz(6)

  patient               Patient                   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  vital_reading         VitalReading?             @relation(fields: [vital_reading_id], references: [id])
  acknowledged_by_user  User?                     @relation("EmergencyAlertAcknowledged", fields: [acknowledged_by], references: [id])
  resolved_by_user      User?                     @relation("EmergencyAlertResolved", fields: [resolved_by], references: [id])
  device_readings       DeviceReading[]           @relation("DeviceReadingToEmergencyAlert")

  @@index([patient_id, priority_level, acknowledged, resolved])
  @@index([alert_type, created_at])
  @@index([resolved, created_at])
  @@map("emergency_alerts")
}

model VitalAlertRule {
  id                    String                    @id @default(uuid()) @db.Uuid
  name                  String                    @db.VarChar(255)
  description           String?                   @db.Text
  vital_type            String                    @db.VarChar(100) // "blood_pressure", "heart_rate", "oxygen_saturation"
  condition_type        VitalConditionType       // "greater_than", "less_than", "between", "outside_range"
  threshold_value       Decimal?                  @db.Decimal(10,2)
  threshold_min         Decimal?                  @db.Decimal(10,2)
  threshold_max         Decimal?                  @db.Decimal(10,2)
  unit                  String?                   @db.VarChar(20)
  alert_level           AlertSeverity
  alert_message         String                    @db.Text
  notification_delay    Int                       @default(0) // Seconds before notification
  
  // Age/demographic conditions
  min_age               Int?
  max_age               Int?
  gender_specific       String?                   @db.VarChar(10) // "MALE", "FEMALE", null for both
  
  // Rule management
  is_active             Boolean                   @default(true)
  applies_to_all        Boolean                   @default(true) // If false, specify patient groups
  patient_conditions    Json?                     @default("[]") // Array of conditions this rule applies to
  
  // Metadata
  created_by            String?                   @db.Uuid
  created_at            DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                  @updatedAt @db.Timestamptz(6)

  created_by_user       User?                     @relation(fields: [created_by], references: [id])

  @@index([vital_type, is_active])
  @@index([alert_level])
  @@map("vital_alert_rules")
}

model EmergencyContact {
  id                    String                    @id @default(uuid()) @db.Uuid
  patient_id            String                    @db.Uuid
  name                  String                    @db.VarChar(255)
  relationship          String                    @db.VarChar(100) // "spouse", "parent", "child", "sibling", "friend"
  phone                 String                    @db.VarChar(20)
  email                 String?                   @db.VarChar(255)
  address               Json?                     // Full address object
  priority_order        Int                       @default(1) // 1 = primary contact
  can_receive_medical   Boolean                   @default(false) // Can receive medical information
  preferred_contact     String                    @default("phone") @db.VarChar(20) // "phone", "email", "sms"
  is_active             Boolean                   @default(true)
  
  // HIPAA authorization
  hipaa_authorized      Boolean                   @default(false)
  authorization_date    DateTime?                 @db.Timestamptz(6)
  authorization_expires DateTime?                 @db.Timestamptz(6)
  
  created_at            DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                  @updatedAt @db.Timestamptz(6)

  patient               Patient                   @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([patient_id, priority_order])
  @@index([patient_id, is_active])
  @@map("emergency_contacts")
}

// ============================================================================
// ENHANCED ENUMS FOR MEDICAL SAFETY
// ============================================================================

enum DrugInteractionSeverity {
  MINOR
  MODERATE
  MAJOR
  CONTRAINDICATION
}

enum AllergenType {
  MEDICATION
  FOOD
  ENVIRONMENTAL
  LATEX
  OTHER
}

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
  ANAPHYLAXIS
}

enum MedicationAlertType {
  DRUG_INTERACTION
  ALLERGY_CONFLICT
  DOSE_LIMIT_EXCEEDED
  DUPLICATE_THERAPY
  AGE_INAPPROPRIATE
  CONTRAINDICATION
  MONITORING_REQUIRED
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum EmergencyAlertType {
  VITAL_CRITICAL
  MEDICATION_MISSED_CRITICAL
  DEVICE_OFFLINE
  PATIENT_UNRESPONSIVE
  EMERGENCY_BUTTON
  FALL_DETECTED
  MEDICATION_OVERDOSE
}

enum EmergencyPriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
  LIFE_THREATENING
}

enum VitalConditionType {
  GREATER_THAN
  LESS_THAN
  BETWEEN
  OUTSIDE_RANGE
  PERCENTAGE_CHANGE
}

// ============================================
// PHASE 4: TELEMEDICINE & CONSULTATION MODELS
// ============================================

enum ConsultationType {
  VIDEO_CONSULTATION
  AUDIO_CONSULTATION
  CHAT_CONSULTATION
  EMERGENCY_CONSULTATION
  FOLLOW_UP_CONSULTATION
  SPECIALIST_REFERRAL
}

enum ConsultationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
  INTERRUPTED
}

enum ConsultationPriority {
  ROUTINE
  URGENT
  EMERGENCY
  FOLLOW_UP
}

enum LabOrderStatus {
  ORDERED
  SAMPLE_COLLECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REPORT_READY
}

enum LabTestCategory {
  BLOOD_CHEMISTRY
  HEMATOLOGY
  MICROBIOLOGY
  PATHOLOGY
  RADIOLOGY
  CARDIOLOGY
  ENDOCRINOLOGY
  IMMUNOLOGY
}

enum GameBadgeType {
  ADHERENCE_STREAK
  APPOINTMENT_KEEPER
  VITAL_TRACKER
  EXERCISE_CHAMPION
  MEDICATION_MASTER
  HEALTH_IMPROVEMENT
  GOAL_ACHIEVER
}

enum GameChallengeType {
  DAILY_MEDICATION
  WEEKLY_VITALS
  MONTHLY_CHECKUP
  EXERCISE_MINUTES
  WEIGHT_MANAGEMENT
  BLOOD_PRESSURE_CONTROL
  GLUCOSE_MANAGEMENT
}

// Phase 3: IoT Device Integration Enums
enum DeviceType {
  WEARABLE
  BLOOD_PRESSURE
  GLUCOSE_METER
  PULSE_OXIMETER
  THERMOMETER
  ECG_MONITOR
  SCALE
  SPIROMETER
  GENERIC_BLUETOOTH
}

enum DeviceStatus {
  CONNECTED
  DISCONNECTED
  SYNCING
  ERROR
  MAINTENANCE
}

enum ConnectionType {
  BLUETOOTH_LE
  WIFI
  API_OAUTH
  MANUAL_ENTRY
  BRIDGE_DEVICE
}

model VideoConsultation {
  id                    String              @id @default(uuid()) @db.Uuid
  consultation_id       String              @unique @db.VarChar(255)
  doctor_id             String              @db.Uuid
  patient_id            String              @db.Uuid
  appointment_id        String?             @db.Uuid
  consultation_type     ConsultationType    @default(VIDEO_CONSULTATION)
  status                ConsultationStatus  @default(SCHEDULED)
  priority              ConsultationPriority @default(ROUTINE)
  
  // Scheduling
  scheduled_start       DateTime            @db.Timestamptz(6)
  scheduled_end         DateTime            @db.Timestamptz(6)
  actual_start          DateTime?           @db.Timestamptz(6)
  actual_end            DateTime?           @db.Timestamptz(6)
  timezone              String              @default("UTC") @db.VarChar(50)
  
  // Video/Audio Room Configuration
  room_id               String?             @unique @db.VarChar(255)
  room_token            String?             @db.Text
  doctor_join_url       String?             @db.Text
  patient_join_url      String?             @db.Text
  recording_enabled     Boolean             @default(false)
  recording_url         String?             @db.Text
  
  // Consultation Details
  chief_complaint       String?             @db.Text
  presenting_symptoms   String[]            @default([])
  consultation_notes    String?             @db.Text
  diagnosis             String?             @db.Text
  treatment_plan        String?             @db.Text
  follow_up_required    Boolean             @default(false)
  follow_up_date        DateTime?           @db.Timestamptz(6)
  
  // Technical Details
  connection_quality    Json?               @default("{}")
  technical_issues      String[]            @default([])
  duration_minutes      Int?
  
  // Billing & Insurance
  consultation_fee      Decimal?            @db.Decimal(10, 2)
  insurance_covered     Boolean             @default(false)
  payment_status        String?             @default("pending") @db.VarChar(50)
  
  // Metadata
  created_by            String              @db.Uuid
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @updatedAt @db.Timestamptz(6)
  
  // Relations
  doctor                doctors             @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  patient               Patient             @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  appointment           Appointment?        @relation(fields: [appointment_id], references: [id])
  creator               User                @relation("ConsultationCreatedBy", fields: [created_by], references: [id])
  prescriptions         ConsultationPrescription[]
  lab_orders            LabOrder[]
  consultation_notes_entries ConsultationNote[]
  
  @@index([doctor_id, scheduled_start])
  @@index([patient_id, status])
  @@index([status, scheduled_start])
  @@index([consultation_type, priority])
  @@map("video_consultations")
}

model ConsultationPrescription {
  id                    String              @id @default(uuid()) @db.Uuid
  consultation_id       String              @db.Uuid
  medication_name       String              @db.VarChar(255)
  dosage                String              @db.VarChar(100)
  frequency             String              @db.VarChar(100)
  duration_days         Int
  quantity              Int?
  instructions          String?             @db.Text
  refills_allowed       Int                 @default(0)
  
  // E-Prescription Details
  ndc_code              String?             @db.VarChar(50)
  generic_substitution  Boolean             @default(true)
  pharmacy_instructions String?             @db.Text
  
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  
  // Relations
  consultation          VideoConsultation   @relation(fields: [consultation_id], references: [id], onDelete: Cascade)
  
  @@index([consultation_id])
  @@map("consultation_prescriptions")
}

model ConsultationNote {
  id                    String              @id @default(uuid()) @db.Uuid
  consultation_id       String              @db.Uuid
  note_type             String              @db.VarChar(50) // "subjective", "objective", "assessment", "plan"
  content               String              @db.Text
  timestamp             DateTime            @default(now()) @db.Timestamptz(6)
  created_by            String              @db.Uuid
  
  // Relations
  consultation          VideoConsultation   @relation(fields: [consultation_id], references: [id], onDelete: Cascade)
  creator               User                @relation("ConsultationNoteCreatedBy", fields: [created_by], references: [id])
  
  @@index([consultation_id, note_type])
  @@map("consultation_notes")
}

model LabOrder {
  id                    String              @id @default(uuid()) @db.Uuid
  order_number          String              @unique @db.VarChar(100)
  patient_id            String              @db.Uuid
  doctor_id             String              @db.Uuid
  consultation_id       String?             @db.Uuid
  
  // Order Details
  order_date            DateTime            @default(now()) @db.Timestamptz(6)
  priority              String              @default("routine") @db.VarChar(50)
  status                LabOrderStatus      @default(ORDERED)
  category              LabTestCategory     @default(BLOOD_CHEMISTRY)
  
  // Tests Ordered
  ordered_tests         Json                @default("[]") // Array of test codes and names
  clinical_indication   String?             @db.Text
  special_instructions  String?             @db.Text
  
  // Lab Facility
  lab_facility_name     String?             @db.VarChar(255)
  lab_facility_code     String?             @db.VarChar(100)
  collection_date       DateTime?           @db.Timestamptz(6)
  expected_result_date  DateTime?           @db.Timestamptz(6)
  
  // Results
  results_available     Boolean             @default(false)
  results_data          Json?               @default("{}")
  results_pdf_url       String?             @db.Text
  critical_values       Boolean             @default(false)
  external_lab_order_id String?             @db.VarChar(255)
  
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @updatedAt @db.Timestamptz(6)
  
  // Relations
  patient               Patient             @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor                doctors             @relation(fields: [doctor_id], references: [id])
  consultation          VideoConsultation? @relation(fields: [consultation_id], references: [id])
  results               LabResult[]
  
  @@index([patient_id, status])
  @@index([doctor_id, order_date])
  @@index([status, expected_result_date])
  @@map("lab_orders")
}

model LabResult {
  id                    String              @id @default(uuid()) @db.Uuid
  lab_order_id          String              @db.Uuid
  test_name             String              @db.VarChar(255)
  test_code             String?             @db.VarChar(50)
  
  // Result Values
  result_value          String?             @db.VarChar(255)
  numeric_value         Decimal?            @db.Decimal(10, 3)
  result_unit           String?             @db.VarChar(50)
  reference_range       String?             @db.VarChar(255)
  
  // Status & Flags
  result_status         String              @default("final") @db.VarChar(50)
  abnormal_flag         String?             @db.VarChar(10) // "H", "L", "HH", "LL", etc.
  critical_flag         Boolean             @default(false)
  
  // Timestamps
  collection_date       DateTime?           @db.Timestamptz(6)
  result_date           DateTime            @default(now()) @db.Timestamptz(6)
  verified_date         DateTime?           @db.Timestamptz(6)
  
  // Additional Info
  method                String?             @db.VarChar(255)
  specimen_type         String?             @db.VarChar(100)
  comments              String?             @db.Text
  
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  
  // Relations
  lab_order             LabOrder            @relation(fields: [lab_order_id], references: [id], onDelete: Cascade)
  
  @@index([lab_order_id])
  @@index([test_name, result_date])
  @@index([critical_flag, result_date])
  @@map("lab_results")
}

model PatientGameProfile {
  id                    String              @id @default(uuid()) @db.Uuid
  patient_id            String              @unique @db.Uuid
  
  // Gaming Stats
  total_points          Int                 @default(0)
  current_level         Int                 @default(1)
  experience_points     Int                 @default(0)
  
  // Streak Tracking
  medication_streak     Int                 @default(0)
  appointment_streak    Int                 @default(0)
  vitals_streak         Int                 @default(0)
  longest_streak        Int                 @default(0)
  
  // Achievement Tracking
  badges_earned         String[]            @default([])
  challenges_completed  String[]            @default([])
  
  // Engagement Metrics
  login_streak          Int                 @default(0)
  last_activity         DateTime?           @db.Timestamptz(6)
  total_activities      Int                 @default(0)
  
  // Preferences
  gamification_enabled  Boolean             @default(true)
  notifications_enabled Boolean             @default(true)
  public_profile        Boolean             @default(false)
  
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @updatedAt @db.Timestamptz(6)
  
  // Relations
  patient               Patient             @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  badge_awards          GameBadgeAward[]
  challenge_progress    GameChallengeProgress[]
  
  @@index([total_points, current_level])
  @@index([patient_id, last_activity])
  @@map("patient_game_profiles")
}

model GameBadgeAward {
  id                    String              @id @default(uuid()) @db.Uuid
  patient_id            String              @db.Uuid
  badge_type            GameBadgeType
  badge_name            String              @db.VarChar(255)
  badge_description     String?             @db.Text
  points_awarded        Int                 @default(0)
  awarded_date          DateTime            @default(now()) @db.Timestamptz(6)
  
  // Badge Metadata
  badge_icon            String?             @db.VarChar(255)
  badge_color           String?             @db.VarChar(50)
  achievement_data      Json?               @default("{}")
  
  // Relations
  game_profile          PatientGameProfile  @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  
  @@index([patient_id, awarded_date])
  @@index([badge_type])
  @@map("game_badge_awards")
}

model GameChallengeProgress {
  id                    String              @id @default(uuid()) @db.Uuid
  patient_id            String              @db.Uuid
  challenge_type        GameChallengeType
  challenge_name        String              @db.VarChar(255)
  
  // Progress Tracking
  target_value          Int
  current_progress      Int                 @default(0)
  start_date            DateTime            @db.Timestamptz(6)
  end_date              DateTime            @db.Timestamptz(6)
  
  // Status
  is_completed          Boolean             @default(false)
  completion_date       DateTime?           @db.Timestamptz(6)
  points_earned         Int                 @default(0)
  
  // Challenge Data
  challenge_rules       Json?               @default("{}")
  progress_data         Json?               @default("{}")
  
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @updatedAt @db.Timestamptz(6)
  
  // Relations
  game_profile          PatientGameProfile  @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  
  @@index([patient_id, is_completed])
  @@index([challenge_type, end_date])
  @@map("game_challenge_progress")
}

// Phase 3: IoT Device Integration Models
model ConnectedDevice {
  id                      String            @id @default(uuid()) @db.Uuid
  patient_id              String            @db.Uuid
  plugin_id               String            @db.VarChar(100)
  
  // Device Information
  device_name             String            @db.VarChar(255)
  device_model            String?           @db.VarChar(255)
  device_type             DeviceType
  manufacturer            String?           @db.VarChar(255)
  serial_number           String?           @db.VarChar(100)
  firmware_version        String?           @db.VarChar(50)
  
  // Connection Configuration
  connection_type         ConnectionType
  device_identifier       String            @db.VarChar(255) // MAC address, serial, etc.
  connection_config       Json?             @default("{}")
  
  // Connection Status
  last_connected          DateTime?         @db.Timestamptz(6)
  connection_status       DeviceStatus      @default(DISCONNECTED)
  
  // Sync Configuration
  auto_sync_enabled       Boolean           @default(true)
  sync_interval_minutes   Int               @default(15)
  last_sync               DateTime?         @db.Timestamptz(6)
  sync_error_count        Int               @default(0)
  
  // Device Management
  is_active               Boolean           @default(true)
  added_by                String            @db.Uuid
  notes                   String?           @db.Text
  
  created_at              DateTime          @default(now()) @db.Timestamptz(6)
  updated_at              DateTime          @updatedAt @db.Timestamptz(6)
  
  // Relations
  patient                 Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  added_by_user           User              @relation(fields: [added_by], references: [id], onDelete: Restrict)
  device_readings         DeviceReading[]
  
  @@unique([patient_id, device_identifier])
  @@index([plugin_id, device_type])
  @@index([patient_id, connection_status])
  @@map("connected_devices")
}

model DeviceReading {
  id                      String            @id @default(uuid()) @db.Uuid
  device_id               String            @db.Uuid
  patient_id              String            @db.Uuid
  plugin_id               String            @db.VarChar(100)
  vital_reading_id        String?           @db.Uuid
  
  // Reading Information
  reading_type            String            @db.VarChar(100) // blood_pressure, glucose, weight, etc.
  measurement_timestamp   DateTime          @db.Timestamptz(6)
  received_timestamp      DateTime          @default(now()) @db.Timestamptz(6)
  
  // Data Storage
  raw_data                Json              @default("{}")
  processed_values        Json              @default("{}")
  primary_value           Decimal?          @db.Decimal(10, 3)
  secondary_value         Decimal?          @db.Decimal(10, 3)
  measurement_unit        String?           @db.VarChar(50)
  
  // Data Quality
  data_quality_score      Decimal?          @db.Decimal(3, 2)
  is_validated            Boolean           @default(false)
  validation_notes        String?           @db.Text
  is_anomaly              Boolean           @default(false)
  anomaly_reason          String?           @db.VarChar(255)
  
  // Context Information
  reading_context         String?           @db.VarChar(255) // before_meal, after_exercise, etc.
  symptoms_reported       String[]          @default([])
  medication_taken        Boolean?
  
  // Alert Information
  triggered_alerts        Boolean           @default(false)
  alert_reasons           String[]          @default([])
  
  // Sync Information
  sync_batch_id           String?           @db.Uuid
  
  created_at              DateTime          @default(now()) @db.Timestamptz(6)
  
  // Relations
  device                  ConnectedDevice   @relation(fields: [device_id], references: [id], onDelete: Cascade)
  patient                 Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  vital_reading           VitalReading?     @relation(fields: [vital_reading_id], references: [id], onDelete: SetNull)
  emergency_alerts        EmergencyAlert[]  @relation("DeviceReadingToEmergencyAlert")
  
  @@index([patient_id, reading_type, measurement_timestamp])
  @@index([device_id, measurement_timestamp])
  @@index([plugin_id, reading_type])
  @@index([triggered_alerts, measurement_timestamp])
  @@map("device_readings")
}

model DevicePlugin {
  id                      String            @id @db.VarChar(100)
  name                    String            @db.VarChar(255)
  version                 String            @db.VarChar(20)
  description             String?           @db.Text
  
  // Plugin Configuration
  supported_devices       DeviceType[]
  supported_regions       String[]          @default([])
  api_version             String            @db.VarChar(10)
  default_config          Json              @default("{}")
  oauth_config            Json?             @default("{}")
  rate_limits             Json?             @default("{}")
  
  // Plugin Status
  is_enabled              Boolean           @default(true)
  requires_auth           Boolean           @default(false)
  maintenance_mode        Boolean           @default(false)
  
  // Plugin Metadata
  installed_at            DateTime          @default(now()) @db.Timestamptz(6)
  last_updated            DateTime          @updatedAt @db.Timestamptz(6)
  usage_count             Int               @default(0)
  
  @@map("device_plugins")
}

