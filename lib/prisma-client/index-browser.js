
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  license_number: 'license_number',
  contact_info: 'contact_info',
  address: 'address',
  settings: 'settings',
  is_active: 'is_active',
  hipaa_covered_entity: 'hipaa_covered_entity',
  business_associate_agreement: 'business_associate_agreement',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  name: 'name',
  image: 'image',
  emailVerified: 'emailVerified',
  role: 'role',
  account_status: 'account_status',
  first_name: 'first_name',
  last_name: 'last_name',
  middle_name: 'middle_name',
  phone: 'phone',
  date_of_birth: 'date_of_birth',
  gender: 'gender',
  email_verified: 'email_verified',
  email_verification_token: 'email_verification_token',
  password_reset_token: 'password_reset_token',
  password_reset_expires: 'password_reset_expires',
  two_factor_enabled: 'two_factor_enabled',
  two_factor_secret: 'two_factor_secret',
  failed_login_attempts: 'failed_login_attempts',
  locked_until: 'locked_until',
  last_login_at: 'last_login_at',
  profile_picture_url: 'profile_picture_url',
  timezone: 'timezone',
  locale: 'locale',
  preferences: 'preferences',
  terms_accepted_at: 'terms_accepted_at',
  privacy_policy_accepted_at: 'privacy_policy_accepted_at',
  hipaa_consent_date: 'hipaa_consent_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  full_name: 'full_name'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  provider_email: 'provider_email',
  provider_name: 'provider_name',
  linked_at: 'linked_at',
  last_used_at: 'last_used_at'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at',
  last_accessed_at: 'last_accessed_at',
  healthcare_context: 'healthcare_context'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.AccountLinkScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  provider: 'provider',
  provider_account_id: 'provider_account_id',
  provider_email: 'provider_email',
  linked_at: 'linked_at',
  last_used_at: 'last_used_at',
  is_primary: 'is_primary',
  metadata: 'metadata'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  organization_id: 'organization_id',
  medical_record_number: 'medical_record_number',
  patient_id: 'patient_id',
  emergency_contacts: 'emergency_contacts',
  insurance_information: 'insurance_information',
  medical_history: 'medical_history',
  allergies: 'allergies',
  current_medications: 'current_medications',
  height_cm: 'height_cm',
  weight_kg: 'weight_kg',
  blood_type: 'blood_type',
  primary_language: 'primary_language',
  risk_level: 'risk_level',
  risk_factors: 'risk_factors',
  communication_preferences: 'communication_preferences',
  privacy_settings: 'privacy_settings',
  primary_care_doctor_id: 'primary_care_doctor_id',
  primary_care_hsp_id: 'primary_care_hsp_id',
  care_coordinator_id: 'care_coordinator_id',
  care_coordinator_type: 'care_coordinator_type',
  overall_adherence_score: 'overall_adherence_score',
  last_adherence_calculation: 'last_adherence_calculation',
  total_appointments: 'total_appointments',
  missed_appointments: 'missed_appointments',
  last_visit_date: 'last_visit_date',
  next_appointment_date: 'next_appointment_date',
  is_active: 'is_active',
  requires_interpreter: 'requires_interpreter',
  has_mobility_issues: 'has_mobility_issues',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  linked_provider_id: 'linked_provider_id',
  provider_linked_at: 'provider_linked_at',
  provider_consent_given: 'provider_consent_given',
  provider_consent_given_at: 'provider_consent_given_at',
  provider_consent_method: 'provider_consent_method'
};

exports.Prisma.HealthcareProviderScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  organization_id: 'organization_id',
  license_number: 'license_number',
  specialties: 'specialties',
  sub_specialties: 'sub_specialties',
  qualifications: 'qualifications',
  years_of_experience: 'years_of_experience',
  is_verified: 'is_verified',
  verification_documents: 'verification_documents',
  verification_date: 'verification_date',
  verified_by: 'verified_by',
  consultation_fee: 'consultation_fee',
  availability_schedule: 'availability_schedule',
  notification_preferences: 'notification_preferences',
  practice_name: 'practice_name',
  practice_address: 'practice_address',
  practice_phone: 'practice_phone',
  practice_website: 'practice_website',
  total_patients: 'total_patients',
  active_care_plans: 'active_care_plans',
  average_rating: 'average_rating',
  total_reviews: 'total_reviews',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.SpecialityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  user_created: 'user_created',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  doctor_id: 'doctor_id',
  organization_id: 'organization_id',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  location_verified: 'location_verified',
  location_accuracy: 'location_accuracy',
  phone: 'phone',
  email: 'email',
  website: 'website',
  operating_hours: 'operating_hours',
  services_offered: 'services_offered',
  clinic_images: 'clinic_images',
  banner_image: 'banner_image',
  description: 'description',
  consultation_fee: 'consultation_fee',
  is_primary: 'is_primary',
  is_active: 'is_active',
  registration_number: 'registration_number',
  established_year: 'established_year',
  facilities: 'facilities',
  insurance_accepted: 'insurance_accepted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.CarePlanScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  created_by_doctor_id: 'created_by_doctor_id',
  created_by_hsp_id: 'created_by_hsp_id',
  organization_id: 'organization_id',
  title: 'title',
  description: 'description',
  plan_type: 'plan_type',
  chronic_conditions: 'chronic_conditions',
  condition_severity: 'condition_severity',
  risk_factors: 'risk_factors',
  long_term_goals: 'long_term_goals',
  short_term_milestones: 'short_term_milestones',
  interventions: 'interventions',
  lifestyle_modifications: 'lifestyle_modifications',
  monitoring_parameters: 'monitoring_parameters',
  monitoring_frequency: 'monitoring_frequency',
  target_values: 'target_values',
  medications: 'medications',
  medication_management: 'medication_management',
  start_date: 'start_date',
  end_date: 'end_date',
  review_frequency_months: 'review_frequency_months',
  next_review_date: 'next_review_date',
  status: 'status',
  priority: 'priority',
  primary_care_manager_id: 'primary_care_manager_id',
  care_team_members: 'care_team_members',
  specialist_referrals: 'specialist_referrals',
  patient_education_materials: 'patient_education_materials',
  self_management_tasks: 'self_management_tasks',
  patient_goals: 'patient_goals',
  progress_notes: 'progress_notes',
  outcome_measures: 'outcome_measures',
  quality_of_life_scores: 'quality_of_life_scores',
  emergency_action_plan: 'emergency_action_plan',
  warning_signs: 'warning_signs',
  emergency_contacts: 'emergency_contacts',
  details: 'details',
  channel_id: 'channel_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.MedicineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  details: 'details',
  creator_id: 'creator_id',
  public_medicine: 'public_medicine',
  algolia_object_id: 'algolia_object_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  participant_id: 'participant_id',
  organizer_type: 'organizer_type',
  organizer_id: 'organizer_id',
  medicine_id: 'medicine_id',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  rr_rule: 'rr_rule',
  details: 'details',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  care_plan_id: 'care_plan_id'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  participant_one_type: 'participant_one_type',
  participant_one_id: 'participant_one_id',
  participant_two_type: 'participant_two_type',
  participant_two_id: 'participant_two_id',
  organizer_type: 'organizer_type',
  organizer_id: 'organizer_id',
  provider_id: 'provider_id',
  provider_name: 'provider_name',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  start_time: 'start_time',
  end_time: 'end_time',
  rr_rule: 'rr_rule',
  details: 'details',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  slot_id: 'slot_id'
};

exports.Prisma.DoctorAvailabilityScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time',
  is_available: 'is_available',
  slot_duration: 'slot_duration',
  max_appointments_per_slot: 'max_appointments_per_slot',
  break_start_time: 'break_start_time',
  break_end_time: 'break_end_time',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.VitalTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unit: 'unit',
  normal_range_min: 'normal_range_min',
  normal_range_max: 'normal_range_max',
  description: 'description',
  validation_rules: 'validation_rules',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.VitalReadingScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  vital_type_id: 'vital_type_id',
  adherence_record_id: 'adherence_record_id',
  value: 'value',
  unit: 'unit',
  reading_time: 'reading_time',
  device_info: 'device_info',
  is_flagged: 'is_flagged',
  notes: 'notes',
  attachments: 'attachments',
  is_validated: 'is_validated',
  validated_by: 'validated_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  systolic_value: 'systolic_value',
  diastolic_value: 'diastolic_value',
  pulse_rate: 'pulse_rate',
  respiratory_rate: 'respiratory_rate',
  oxygen_saturation: 'oxygen_saturation',
  alert_level: 'alert_level',
  alert_reasons: 'alert_reasons'
};

exports.Prisma.SymptomScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  care_plan_id: 'care_plan_id',
  symptom_name: 'symptom_name',
  severity: 'severity',
  description: 'description',
  body_location: 'body_location',
  onset_time: 'onset_time',
  recorded_at: 'recorded_at',
  triggers: 'triggers',
  relieving_factors: 'relieving_factors',
  associated_symptoms: 'associated_symptoms',
  attachments: 'attachments',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.AdherenceRecordScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  scheduled_event_id: 'scheduled_event_id',
  adherence_type: 'adherence_type',
  due_at: 'due_at',
  recorded_at: 'recorded_at',
  is_completed: 'is_completed',
  is_partial: 'is_partial',
  is_missed: 'is_missed',
  response_data: 'response_data',
  notes: 'notes',
  attachments: 'attachments',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.ServicePlanScalarFieldEnum = {
  id: 'id',
  provider_id: 'provider_id',
  name: 'name',
  description: 'description',
  service_type: 'service_type',
  price: 'price',
  currency: 'currency',
  billing_cycle: 'billing_cycle',
  features: 'features',
  patient_limit: 'patient_limit',
  trial_period_days: 'trial_period_days',
  setup_fee: 'setup_fee',
  is_active: 'is_active',
  stripe_price_id: 'stripe_price_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.PatientSubscriptionScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  provider_id: 'provider_id',
  service_plan_id: 'service_plan_id',
  status: 'status',
  current_period_start: 'current_period_start',
  current_period_end: 'current_period_end',
  next_billing_date: 'next_billing_date',
  trial_start: 'trial_start',
  trial_end: 'trial_end',
  payment_method_id: 'payment_method_id',
  stripe_subscription_id: 'stripe_subscription_id',
  stripe_customer_id: 'stripe_customer_id',
  last_payment_date: 'last_payment_date',
  last_payment_amount: 'last_payment_amount',
  failure_count: 'failure_count',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at',
  cancelled_at: 'cancelled_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.PatientDoctorAssignmentScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  assignment_type: 'assignment_type',
  permissions: 'permissions',
  specialty_focus: 'specialty_focus',
  care_plan_ids: 'care_plan_ids',
  assigned_by_doctor_id: 'assigned_by_doctor_id',
  assigned_by_admin_id: 'assigned_by_admin_id',
  patient_consent_required: 'patient_consent_required',
  patient_consent_status: 'patient_consent_status',
  consent_method: 'consent_method',
  consent_otp: 'consent_otp',
  consent_otp_expires_at: 'consent_otp_expires_at',
  consent_granted_at: 'consent_granted_at',
  assignment_start_date: 'assignment_start_date',
  assignment_end_date: 'assignment_end_date',
  is_active: 'is_active',
  assignment_reason: 'assignment_reason',
  notes: 'notes',
  requires_same_organization: 'requires_same_organization',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  device_type: 'device_type',
  push_token: 'push_token',
  device_id: 'device_id',
  is_active: 'is_active',
  notification_settings: 'notification_settings',
  last_used_at: 'last_used_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  hsp_id: 'hsp_id',
  organization_id: 'organization_id',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  is_urgent: 'is_urgent',
  channels: 'channels',
  scheduled_for: 'scheduled_for',
  expires_at: 'expires_at',
  status: 'status',
  sent_at: 'sent_at',
  delivered_at: 'delivered_at',
  delivery_attempts: 'delivery_attempts',
  delivery_log: 'delivery_log',
  read_at: 'read_at',
  acknowledged_at: 'acknowledged_at',
  related_appointment_id: 'related_appointment_id',
  related_medication_id: 'related_medication_id',
  related_care_plan_id: 'related_care_plan_id',
  related_treatment_plan_id: 'related_treatment_plan_id',
  metadata: 'metadata',
  requires_action: 'requires_action',
  action_url: 'action_url',
  action_taken: 'action_taken',
  action_taken_at: 'action_taken_at',
  template_id: 'template_id',
  personalization_data: 'personalization_data',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  recipient_id: 'recipient_id'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_role: 'user_role',
  organization_id: 'organization_id',
  action: 'action',
  resource: 'resource',
  patient_id: 'patient_id',
  phi_accessed: 'phi_accessed',
  access_granted: 'access_granted',
  denial_reason: 'denial_reason',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  session_id: 'session_id',
  request_id: 'request_id',
  data_changes: 'data_changes',
  encrypted_data: 'encrypted_data',
  risk_level: 'risk_level',
  security_alerts: 'security_alerts',
  retention_date: 'retention_date',
  timestamp: 'timestamp',
  created_at: 'created_at'
};

exports.Prisma.SequelizeMetaScalarFieldEnum = {
  name: 'name'
};

exports.Prisma.Appointment_slotsScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  date: 'date',
  start_time: 'start_time',
  end_time: 'end_time',
  max_appointments: 'max_appointments',
  booked_appointments: 'booked_appointments',
  is_available: 'is_available',
  slot_type: 'slot_type',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Care_plan_templatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  conditions: 'conditions',
  specialties: 'specialties',
  tags: 'tags',
  template_data: 'template_data',
  created_by: 'created_by',
  organization_id: 'organization_id',
  is_public: 'is_public',
  is_approved: 'is_approved',
  approved_by: 'approved_by',
  version: 'version',
  parent_template_id: 'parent_template_id',
  usage_count: 'usage_count',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Dashboard_metricsScalarFieldEnum = {
  id: 'id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  metric_type: 'metric_type',
  metric_data: 'metric_data',
  calculated_at: 'calculated_at',
  valid_until: 'valid_until',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  doctor_id: 'doctor_id',
  organization_id: 'organization_id',
  medical_license_number: 'medical_license_number',
  npi_number: 'npi_number',
  board_certifications: 'board_certifications',
  medical_school: 'medical_school',
  residency_programs: 'residency_programs',
  specialties: 'specialties',
  sub_specialties: 'sub_specialties',
  years_of_experience: 'years_of_experience',
  capabilities: 'capabilities',
  is_verified: 'is_verified',
  verification_documents: 'verification_documents',
  verification_date: 'verification_date',
  verified_by: 'verified_by',
  consultation_fee: 'consultation_fee',
  availability_schedule: 'availability_schedule',
  languages_spoken: 'languages_spoken',
  notification_preferences: 'notification_preferences',
  practice_name: 'practice_name',
  practice_address: 'practice_address',
  practice_phone: 'practice_phone',
  signature_pic: 'signature_pic',
  razorpay_account_id: 'razorpay_account_id',
  total_patients: 'total_patients',
  active_treatment_plans: 'active_treatment_plans',
  active_care_plans: 'active_care_plans',
  average_rating: 'average_rating',
  total_reviews: 'total_reviews',
  is_available_online: 'is_available_online',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  speciality_id: 'speciality_id',
  profile_picture_url: 'profile_picture_url',
  banner_image_url: 'banner_image_url',
  qualification_details: 'qualification_details',
  registration_details: 'registration_details',
  subscription_details: 'subscription_details',
  signature_image_url: 'signature_image_url',
  signature_data: 'signature_data',
  gender: 'gender',
  mobile_number: 'mobile_number'
};

exports.Prisma.HspsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  hsp_id: 'hsp_id',
  organization_id: 'organization_id',
  hsp_type: 'hsp_type',
  license_number: 'license_number',
  certification_number: 'certification_number',
  certifications: 'certifications',
  education: 'education',
  specializations: 'specializations',
  years_of_experience: 'years_of_experience',
  capabilities: 'capabilities',
  requires_supervision: 'requires_supervision',
  supervising_doctor_id: 'supervising_doctor_id',
  supervision_level: 'supervision_level',
  is_verified: 'is_verified',
  verification_documents: 'verification_documents',
  verification_date: 'verification_date',
  verified_by: 'verified_by',
  hourly_rate: 'hourly_rate',
  availability_schedule: 'availability_schedule',
  languages_spoken: 'languages_spoken',
  notification_preferences: 'notification_preferences',
  departments: 'departments',
  shift_preferences: 'shift_preferences',
  total_patients_assisted: 'total_patients_assisted',
  active_care_plans: 'active_care_plans',
  tasks_completed: 'tasks_completed',
  average_rating: 'average_rating',
  total_reviews: 'total_reviews',
  is_available: 'is_available',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Medication_logsScalarFieldEnum = {
  id: 'id',
  medication_id: 'medication_id',
  patient_id: 'patient_id',
  scheduled_at: 'scheduled_at',
  taken_at: 'taken_at',
  dosage_taken: 'dosage_taken',
  notes: 'notes',
  adherence_status: 'adherence_status',
  reminder_sent: 'reminder_sent',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_alertsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  alert_type: 'alert_type',
  severity: 'severity',
  title: 'title',
  message: 'message',
  action_required: 'action_required',
  acknowledged: 'acknowledged',
  acknowledged_at: 'acknowledged_at',
  acknowledged_by: 'acknowledged_by',
  resolved: 'resolved',
  resolved_at: 'resolved_at',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_consent_otpScalarFieldEnum = {
  id: 'id',
  secondary_assignment_id: 'secondary_assignment_id',
  patient_id: 'patient_id',
  primary_doctor_id: 'primary_doctor_id',
  secondary_doctor_id: 'secondary_doctor_id',
  secondary_hsp_id: 'secondary_hsp_id',
  otp_code: 'otp_code',
  otp_method: 'otp_method',
  patient_phone: 'patient_phone',
  patient_email: 'patient_email',
  generated_at: 'generated_at',
  expires_at: 'expires_at',
  attempts_count: 'attempts_count',
  max_attempts: 'max_attempts',
  is_verified: 'is_verified',
  verified_at: 'verified_at',
  is_expired: 'is_expired',
  is_blocked: 'is_blocked',
  blocked_at: 'blocked_at',
  requested_by_user_id: 'requested_by_user_id',
  request_ip_address: 'request_ip_address',
  request_user_agent: 'request_user_agent',
  sms_sent: 'sms_sent',
  sms_sent_at: 'sms_sent_at',
  sms_error: 'sms_error',
  email_sent: 'email_sent',
  email_sent_at: 'email_sent_at',
  email_error: 'email_error',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Patient_provider_assignmentsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  provider_id: 'provider_id',
  role: 'role',
  assigned_at: 'assigned_at',
  assigned_by: 'assigned_by',
  ended_at: 'ended_at',
  notes: 'notes'
};

exports.Prisma.Patient_provider_consent_historyScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  previous_provider_id: 'previous_provider_id',
  new_provider_id: 'new_provider_id',
  doctor_id: 'doctor_id',
  hsp_id: 'hsp_id',
  consent_required: 'consent_required',
  consent_requested: 'consent_requested',
  consent_requested_at: 'consent_requested_at',
  consent_given: 'consent_given',
  consent_given_at: 'consent_given_at',
  consent_method: 'consent_method',
  consent_token: 'consent_token',
  consent_token_expires_at: 'consent_token_expires_at',
  consent_verified: 'consent_verified',
  consent_denied: 'consent_denied',
  consent_denied_at: 'consent_denied_at',
  reason: 'reason',
  initiated_by: 'initiated_by',
  status: 'status',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Payment_methodsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  stripe_payment_method_id: 'stripe_payment_method_id',
  type: 'type',
  card_brand: 'card_brand',
  card_last4: 'card_last4',
  card_exp_month: 'card_exp_month',
  card_exp_year: 'card_exp_year',
  bank_name: 'bank_name',
  bank_last4: 'bank_last4',
  is_default: 'is_default',
  is_active: 'is_active',
  billing_address: 'billing_address',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  patient_id: 'patient_id',
  provider_id: 'provider_id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  payment_method: 'payment_method',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  stripe_charge_id: 'stripe_charge_id',
  failure_code: 'failure_code',
  failure_message: 'failure_message',
  refund_amount: 'refund_amount',
  refund_reason: 'refund_reason',
  invoice_id: 'invoice_id',
  billing_period_start: 'billing_period_start',
  billing_period_end: 'billing_period_end',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at',
  processed_at: 'processed_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Provider_change_historyScalarFieldEnum = {
  id: 'id',
  practitioner_type: 'practitioner_type',
  practitioner_id: 'practitioner_id',
  previous_provider_id: 'previous_provider_id',
  new_provider_id: 'new_provider_id',
  change_date: 'change_date',
  affected_patients_count: 'affected_patients_count',
  consent_required_count: 'consent_required_count',
  consent_obtained_count: 'consent_obtained_count',
  reason: 'reason',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProvidersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  activated_on: 'activated_on',
  details: 'details',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Schedule_eventsScalarFieldEnum = {
  id: 'id',
  critical: 'critical',
  event_type: 'event_type',
  event_id: 'event_id',
  details: 'details',
  status: 'status',
  date: 'date',
  start_time: 'start_time',
  end_time: 'end_time',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Scheduled_eventsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  care_plan_id: 'care_plan_id',
  event_type: 'event_type',
  event_id: 'event_id',
  title: 'title',
  description: 'description',
  scheduled_for: 'scheduled_for',
  timezone: 'timezone',
  status: 'status',
  priority: 'priority',
  event_data: 'event_data',
  completed_at: 'completed_at',
  completed_by: 'completed_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Secondary_doctor_assignmentsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  primary_doctor_id: 'primary_doctor_id',
  secondary_doctor_id: 'secondary_doctor_id',
  secondary_hsp_id: 'secondary_hsp_id',
  assignment_reason: 'assignment_reason',
  specialty_focus: 'specialty_focus',
  care_plan_ids: 'care_plan_ids',
  primary_doctor_provider_id: 'primary_doctor_provider_id',
  secondary_doctor_provider_id: 'secondary_doctor_provider_id',
  consent_required: 'consent_required',
  consent_status: 'consent_status',
  access_granted: 'access_granted',
  first_access_attempt_at: 'first_access_attempt_at',
  access_granted_at: 'access_granted_at',
  consent_expires_at: 'consent_expires_at',
  consent_duration_months: 'consent_duration_months',
  is_active: 'is_active',
  assignment_start_date: 'assignment_start_date',
  assignment_end_date: 'assignment_end_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Symptoms_databaseScalarFieldEnum = {
  id: 'id',
  diagnosis_name: 'diagnosis_name',
  symptoms: 'symptoms',
  category: 'category',
  severity_indicators: 'severity_indicators',
  common_age_groups: 'common_age_groups',
  gender_specific: 'gender_specific',
  is_active: 'is_active',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Treatment_databaseScalarFieldEnum = {
  id: 'id',
  treatment_name: 'treatment_name',
  treatment_type: 'treatment_type',
  description: 'description',
  applicable_conditions: 'applicable_conditions',
  duration: 'duration',
  frequency: 'frequency',
  dosage_info: 'dosage_info',
  category: 'category',
  severity_level: 'severity_level',
  age_restrictions: 'age_restrictions',
  contraindications: 'contraindications',
  side_effects: 'side_effects',
  monitoring_required: 'monitoring_required',
  is_active: 'is_active',
  requires_specialist: 'requires_specialist',
  prescription_required: 'prescription_required',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Treatment_plansScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  organization_id: 'organization_id',
  title: 'title',
  description: 'description',
  plan_type: 'plan_type',
  primary_diagnosis: 'primary_diagnosis',
  secondary_diagnoses: 'secondary_diagnoses',
  chief_complaint: 'chief_complaint',
  symptoms: 'symptoms',
  treatment_goals: 'treatment_goals',
  interventions: 'interventions',
  medications: 'medications',
  instructions: 'instructions',
  start_date: 'start_date',
  expected_duration_days: 'expected_duration_days',
  end_date: 'end_date',
  follow_up_required: 'follow_up_required',
  follow_up_date: 'follow_up_date',
  follow_up_instructions: 'follow_up_instructions',
  status: 'status',
  priority: 'priority',
  progress_notes: 'progress_notes',
  completion_percentage: 'completion_percentage',
  outcome: 'outcome',
  emergency_contacts: 'emergency_contacts',
  warning_signs: 'warning_signs',
  assigned_hsps: 'assigned_hsps',
  care_team_notes: 'care_team_notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  id: 'id',
  user_identity: 'user_identity',
  linked_with: 'linked_with',
  linked_id: 'linked_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Vital_requirementsScalarFieldEnum = {
  id: 'id',
  care_plan_id: 'care_plan_id',
  vital_type_id: 'vital_type_id',
  frequency: 'frequency',
  preferred_time: 'preferred_time',
  is_critical: 'is_critical',
  monitoring_notes: 'monitoring_notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Vital_templatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unit: 'unit',
  details: 'details',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.VitalsScalarFieldEnum = {
  id: 'id',
  vital_template_id: 'vital_template_id',
  care_plan_id: 'care_plan_id',
  details: 'details',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.DrugInteractionScalarFieldEnum = {
  id: 'id',
  rxcui_one: 'rxcui_one',
  rxcui_two: 'rxcui_two',
  drug_name_one: 'drug_name_one',
  drug_name_two: 'drug_name_two',
  severity_level: 'severity_level',
  interaction_type: 'interaction_type',
  description: 'description',
  clinical_effect: 'clinical_effect',
  management_advice: 'management_advice',
  evidence_level: 'evidence_level',
  source: 'source',
  last_updated: 'last_updated',
  created_at: 'created_at'
};

exports.Prisma.PatientAllergyScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  allergen_type: 'allergen_type',
  allergen_name: 'allergen_name',
  allergen_rxnorm: 'allergen_rxnorm',
  reaction_severity: 'reaction_severity',
  reaction_symptoms: 'reaction_symptoms',
  onset_date: 'onset_date',
  verified_by_doctor: 'verified_by_doctor',
  verified_by: 'verified_by',
  notes: 'notes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MedicationSafetyAlertScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  medication_id: 'medication_id',
  drug_interaction_id: 'drug_interaction_id',
  patient_allergy_id: 'patient_allergy_id',
  alert_type: 'alert_type',
  severity: 'severity',
  alert_title: 'alert_title',
  alert_message: 'alert_message',
  recommendation: 'recommendation',
  requires_override: 'requires_override',
  resolved: 'resolved',
  resolved_by: 'resolved_by',
  resolved_at: 'resolved_at',
  resolution_notes: 'resolution_notes',
  override_reason: 'override_reason',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EmergencyAlertScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  alert_type: 'alert_type',
  priority_level: 'priority_level',
  vital_reading_id: 'vital_reading_id',
  triggered_by_rule: 'triggered_by_rule',
  alert_title: 'alert_title',
  alert_message: 'alert_message',
  clinical_context: 'clinical_context',
  acknowledged: 'acknowledged',
  acknowledged_by: 'acknowledged_by',
  acknowledged_at: 'acknowledged_at',
  resolved: 'resolved',
  resolved_by: 'resolved_by',
  resolved_at: 'resolved_at',
  resolution_notes: 'resolution_notes',
  notifications_sent: 'notifications_sent',
  escalation_level: 'escalation_level',
  max_escalations: 'max_escalations',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VitalAlertRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  vital_type: 'vital_type',
  condition_type: 'condition_type',
  threshold_value: 'threshold_value',
  threshold_min: 'threshold_min',
  threshold_max: 'threshold_max',
  unit: 'unit',
  alert_level: 'alert_level',
  alert_message: 'alert_message',
  notification_delay: 'notification_delay',
  min_age: 'min_age',
  max_age: 'max_age',
  gender_specific: 'gender_specific',
  is_active: 'is_active',
  applies_to_all: 'applies_to_all',
  patient_conditions: 'patient_conditions',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  name: 'name',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  address: 'address',
  priority_order: 'priority_order',
  can_receive_medical: 'can_receive_medical',
  preferred_contact: 'preferred_contact',
  is_active: 'is_active',
  hipaa_authorized: 'hipaa_authorized',
  authorization_date: 'authorization_date',
  authorization_expires: 'authorization_expires',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VideoConsultationScalarFieldEnum = {
  id: 'id',
  consultation_id: 'consultation_id',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  appointment_id: 'appointment_id',
  consultation_type: 'consultation_type',
  status: 'status',
  priority: 'priority',
  scheduled_start: 'scheduled_start',
  scheduled_end: 'scheduled_end',
  actual_start: 'actual_start',
  actual_end: 'actual_end',
  timezone: 'timezone',
  room_id: 'room_id',
  room_token: 'room_token',
  doctor_join_url: 'doctor_join_url',
  patient_join_url: 'patient_join_url',
  recording_enabled: 'recording_enabled',
  recording_url: 'recording_url',
  chief_complaint: 'chief_complaint',
  presenting_symptoms: 'presenting_symptoms',
  consultation_notes: 'consultation_notes',
  diagnosis: 'diagnosis',
  treatment_plan: 'treatment_plan',
  follow_up_required: 'follow_up_required',
  follow_up_date: 'follow_up_date',
  connection_quality: 'connection_quality',
  technical_issues: 'technical_issues',
  duration_minutes: 'duration_minutes',
  consultation_fee: 'consultation_fee',
  insurance_covered: 'insurance_covered',
  payment_status: 'payment_status',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConsultationPrescriptionScalarFieldEnum = {
  id: 'id',
  consultation_id: 'consultation_id',
  medication_name: 'medication_name',
  dosage: 'dosage',
  frequency: 'frequency',
  duration_days: 'duration_days',
  quantity: 'quantity',
  instructions: 'instructions',
  refills_allowed: 'refills_allowed',
  ndc_code: 'ndc_code',
  generic_substitution: 'generic_substitution',
  pharmacy_instructions: 'pharmacy_instructions',
  created_at: 'created_at'
};

exports.Prisma.ConsultationNoteScalarFieldEnum = {
  id: 'id',
  consultation_id: 'consultation_id',
  note_type: 'note_type',
  content: 'content',
  timestamp: 'timestamp',
  created_by: 'created_by'
};

exports.Prisma.LabOrderScalarFieldEnum = {
  id: 'id',
  order_number: 'order_number',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  consultation_id: 'consultation_id',
  order_date: 'order_date',
  priority: 'priority',
  status: 'status',
  category: 'category',
  ordered_tests: 'ordered_tests',
  clinical_indication: 'clinical_indication',
  special_instructions: 'special_instructions',
  lab_facility_name: 'lab_facility_name',
  lab_facility_code: 'lab_facility_code',
  collection_date: 'collection_date',
  expected_result_date: 'expected_result_date',
  results_available: 'results_available',
  results_data: 'results_data',
  results_pdf_url: 'results_pdf_url',
  critical_values: 'critical_values',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LabResultScalarFieldEnum = {
  id: 'id',
  lab_order_id: 'lab_order_id',
  test_name: 'test_name',
  test_code: 'test_code',
  result_value: 'result_value',
  numeric_value: 'numeric_value',
  result_unit: 'result_unit',
  reference_range: 'reference_range',
  result_status: 'result_status',
  abnormal_flag: 'abnormal_flag',
  critical_flag: 'critical_flag',
  collection_date: 'collection_date',
  result_date: 'result_date',
  verified_date: 'verified_date',
  method: 'method',
  specimen_type: 'specimen_type',
  comments: 'comments',
  created_at: 'created_at'
};

exports.Prisma.PatientGameProfileScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  total_points: 'total_points',
  current_level: 'current_level',
  experience_points: 'experience_points',
  medication_streak: 'medication_streak',
  appointment_streak: 'appointment_streak',
  vitals_streak: 'vitals_streak',
  longest_streak: 'longest_streak',
  badges_earned: 'badges_earned',
  challenges_completed: 'challenges_completed',
  login_streak: 'login_streak',
  last_activity: 'last_activity',
  total_activities: 'total_activities',
  gamification_enabled: 'gamification_enabled',
  notifications_enabled: 'notifications_enabled',
  public_profile: 'public_profile',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.GameBadgeAwardScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  badge_type: 'badge_type',
  badge_name: 'badge_name',
  badge_description: 'badge_description',
  points_awarded: 'points_awarded',
  awarded_date: 'awarded_date',
  badge_icon: 'badge_icon',
  badge_color: 'badge_color',
  achievement_data: 'achievement_data'
};

exports.Prisma.GameChallengeProgressScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  challenge_type: 'challenge_type',
  challenge_name: 'challenge_name',
  target_value: 'target_value',
  current_progress: 'current_progress',
  start_date: 'start_date',
  end_date: 'end_date',
  is_completed: 'is_completed',
  completion_date: 'completion_date',
  points_earned: 'points_earned',
  challenge_rules: 'challenge_rules',
  progress_data: 'progress_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConnectedDeviceScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  plugin_id: 'plugin_id',
  device_name: 'device_name',
  device_model: 'device_model',
  device_type: 'device_type',
  manufacturer: 'manufacturer',
  serial_number: 'serial_number',
  firmware_version: 'firmware_version',
  connection_type: 'connection_type',
  device_identifier: 'device_identifier',
  connection_config: 'connection_config',
  last_connected: 'last_connected',
  connection_status: 'connection_status',
  auto_sync_enabled: 'auto_sync_enabled',
  sync_interval_minutes: 'sync_interval_minutes',
  last_sync: 'last_sync',
  sync_error_count: 'sync_error_count',
  is_active: 'is_active',
  added_by: 'added_by',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DeviceReadingScalarFieldEnum = {
  id: 'id',
  device_id: 'device_id',
  patient_id: 'patient_id',
  plugin_id: 'plugin_id',
  vital_reading_id: 'vital_reading_id',
  reading_type: 'reading_type',
  measurement_timestamp: 'measurement_timestamp',
  received_timestamp: 'received_timestamp',
  raw_data: 'raw_data',
  processed_values: 'processed_values',
  primary_value: 'primary_value',
  secondary_value: 'secondary_value',
  measurement_unit: 'measurement_unit',
  data_quality_score: 'data_quality_score',
  is_validated: 'is_validated',
  validation_notes: 'validation_notes',
  is_anomaly: 'is_anomaly',
  anomaly_reason: 'anomaly_reason',
  reading_context: 'reading_context',
  symptoms_reported: 'symptoms_reported',
  medication_taken: 'medication_taken',
  triggered_alerts: 'triggered_alerts',
  alert_reasons: 'alert_reasons',
  sync_batch_id: 'sync_batch_id',
  created_at: 'created_at'
};

exports.Prisma.DevicePluginScalarFieldEnum = {
  id: 'id',
  name: 'name',
  version: 'version',
  description: 'description',
  supported_devices: 'supported_devices',
  supported_regions: 'supported_regions',
  api_version: 'api_version',
  default_config: 'default_config',
  oauth_config: 'oauth_config',
  rate_limits: 'rate_limits',
  is_enabled: 'is_enabled',
  requires_auth: 'requires_auth',
  maintenance_mode: 'maintenance_mode',
  installed_at: 'installed_at',
  last_updated: 'last_updated',
  usage_count: 'usage_count'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.enum_users_role = exports.$Enums.enum_users_role = {
  SYSTEM_ADMIN: 'SYSTEM_ADMIN',
  HOSPITAL_ADMIN: 'HOSPITAL_ADMIN',
  DOCTOR: 'DOCTOR',
  HSP: 'HSP',
  PATIENT: 'PATIENT',
  CAREGIVER: 'CAREGIVER'
};

exports.enum_users_account_status = exports.$Enums.enum_users_account_status = {
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  DEACTIVATED: 'DEACTIVATED'
};

exports.enum_users_gender = exports.$Enums.enum_users_gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.enum_patients_provider_consent_method = exports.$Enums.enum_patients_provider_consent_method = {
  sms: 'sms',
  email: 'email',
  in_person: 'in_person',
  phone: 'phone',
  automatic: 'automatic'
};

exports.enum_medications_organizer_type = exports.$Enums.enum_medications_organizer_type = {
  doctor: 'doctor',
  patient: 'patient',
  care_taker: 'care_taker',
  hsp: 'hsp',
  provider: 'provider',
  admin: 'admin'
};

exports.enum_appointments_participant_one_type = exports.$Enums.enum_appointments_participant_one_type = {
  doctor: 'doctor',
  patient: 'patient',
  hsp: 'hsp'
};

exports.enum_appointments_participant_two_type = exports.$Enums.enum_appointments_participant_two_type = {
  doctor: 'doctor',
  patient: 'patient',
  hsp: 'hsp'
};

exports.enum_appointments_organizer_type = exports.$Enums.enum_appointments_organizer_type = {
  doctor: 'doctor',
  patient: 'patient',
  care_taker: 'care_taker',
  hsp: 'hsp',
  provider: 'provider',
  admin: 'admin'
};

exports.enum_vital_readings_alert_level = exports.$Enums.enum_vital_readings_alert_level = {
  normal: 'normal',
  warning: 'warning',
  critical: 'critical',
  emergency: 'emergency'
};

exports.enum_adherence_records_adherence_type = exports.$Enums.enum_adherence_records_adherence_type = {
  MEDICATION: 'MEDICATION',
  APPOINTMENT: 'APPOINTMENT',
  VITAL_CHECK: 'VITAL_CHECK',
  SYMPTOM_LOG: 'SYMPTOM_LOG',
  DIET_LOG: 'DIET_LOG',
  EXERCISE: 'EXERCISE',
  REMINDER: 'REMINDER'
};

exports.enum_service_plans_billing_cycle = exports.$Enums.enum_service_plans_billing_cycle = {
  monthly: 'monthly',
  yearly: 'yearly',
  one_time: 'one_time',
  weekly: 'weekly'
};

exports.enum_patient_subscriptions_status = exports.$Enums.enum_patient_subscriptions_status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  TRIALING: 'TRIALING'
};

exports.enum_appointment_slots_slot_type = exports.$Enums.enum_appointment_slots_slot_type = {
  regular: 'regular',
  emergency: 'emergency',
  consultation: 'consultation',
  follow_up: 'follow_up'
};

exports.enum_dashboard_metrics_entity_type = exports.$Enums.enum_dashboard_metrics_entity_type = {
  patient: 'patient',
  doctor: 'doctor',
  organization: 'organization',
  system: 'system'
};

exports.enum_medication_logs_adherence_status = exports.$Enums.enum_medication_logs_adherence_status = {
  taken: 'taken',
  missed: 'missed',
  late: 'late',
  partial: 'partial'
};

exports.enum_patient_alerts_alert_type = exports.$Enums.enum_patient_alerts_alert_type = {
  medication: 'medication',
  vital: 'vital',
  appointment: 'appointment',
  symptom: 'symptom',
  system: 'system'
};

exports.enum_patient_alerts_severity = exports.$Enums.enum_patient_alerts_severity = {
  critical: 'critical',
  high: 'high',
  medium: 'medium',
  low: 'low'
};

exports.enum_patient_consent_otp_otp_method = exports.$Enums.enum_patient_consent_otp_otp_method = {
  sms: 'sms',
  email: 'email',
  both: 'both'
};

exports.enum_patient_provider_consent_history_consent_method = exports.$Enums.enum_patient_provider_consent_history_consent_method = {
  sms: 'sms',
  email: 'email',
  in_person: 'in_person',
  phone: 'phone',
  automatic: 'automatic'
};

exports.enum_patient_provider_consent_history_status = exports.$Enums.enum_patient_provider_consent_history_status = {
  pending: 'pending',
  consent_requested: 'consent_requested',
  approved: 'approved',
  denied: 'denied',
  expired: 'expired',
  completed: 'completed'
};

exports.enum_payment_methods_type = exports.$Enums.enum_payment_methods_type = {
  card: 'card',
  bank_account: 'bank_account',
  paypal: 'paypal'
};

exports.enum_payments_status = exports.$Enums.enum_payments_status = {
  pending: 'pending',
  processing: 'processing',
  succeeded: 'succeeded',
  failed: 'failed',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.enum_payments_payment_method = exports.$Enums.enum_payments_payment_method = {
  card: 'card',
  bank_account: 'bank_account',
  paypal: 'paypal',
  apple_pay: 'apple_pay',
  google_pay: 'google_pay'
};

exports.enum_provider_change_history_practitioner_type = exports.$Enums.enum_provider_change_history_practitioner_type = {
  doctor: 'doctor',
  hsp: 'hsp'
};

exports.enum_provider_change_history_status = exports.$Enums.enum_provider_change_history_status = {
  active: 'active',
  processing: 'processing',
  completed: 'completed'
};

exports.enum_schedule_events_event_type = exports.$Enums.enum_schedule_events_event_type = {
  appointment: 'appointment',
  reminder: 'reminder',
  medication_reminder: 'medication_reminder',
  vitals: 'vitals',
  careplan_activation: 'careplan_activation',
  diet: 'diet',
  workout: 'workout'
};

exports.enum_schedule_events_status = exports.$Enums.enum_schedule_events_status = {
  scheduled: 'scheduled',
  pending: 'pending',
  completed: 'completed',
  expired: 'expired',
  cancelled: 'cancelled',
  started: 'started',
  prior: 'prior'
};

exports.enum_scheduled_events_event_type = exports.$Enums.enum_scheduled_events_event_type = {
  MEDICATION: 'MEDICATION',
  APPOINTMENT: 'APPOINTMENT',
  VITAL_CHECK: 'VITAL_CHECK',
  SYMPTOM_LOG: 'SYMPTOM_LOG',
  DIET_LOG: 'DIET_LOG',
  EXERCISE: 'EXERCISE',
  REMINDER: 'REMINDER'
};

exports.enum_scheduled_events_status = exports.$Enums.enum_scheduled_events_status = {
  SCHEDULED: 'SCHEDULED',
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  MISSED: 'MISSED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.enum_scheduled_events_priority = exports.$Enums.enum_scheduled_events_priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.enum_secondary_doctor_assignments_consent_status = exports.$Enums.enum_secondary_doctor_assignments_consent_status = {
  pending: 'pending',
  requested: 'requested',
  granted: 'granted',
  denied: 'denied',
  expired: 'expired'
};

exports.enum_user_roles_linked_with = exports.$Enums.enum_user_roles_linked_with = {
  doctor: 'doctor',
  patient: 'patient',
  care_taker: 'care_taker',
  hsp: 'hsp',
  provider: 'provider',
  admin: 'admin'
};

exports.DrugInteractionSeverity = exports.$Enums.DrugInteractionSeverity = {
  MINOR: 'MINOR',
  MODERATE: 'MODERATE',
  MAJOR: 'MAJOR',
  CONTRAINDICATION: 'CONTRAINDICATION'
};

exports.AllergenType = exports.$Enums.AllergenType = {
  MEDICATION: 'MEDICATION',
  FOOD: 'FOOD',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  LATEX: 'LATEX',
  OTHER: 'OTHER'
};

exports.AllergySeverity = exports.$Enums.AllergySeverity = {
  MILD: 'MILD',
  MODERATE: 'MODERATE',
  SEVERE: 'SEVERE',
  ANAPHYLAXIS: 'ANAPHYLAXIS'
};

exports.MedicationAlertType = exports.$Enums.MedicationAlertType = {
  DRUG_INTERACTION: 'DRUG_INTERACTION',
  ALLERGY_CONFLICT: 'ALLERGY_CONFLICT',
  DOSE_LIMIT_EXCEEDED: 'DOSE_LIMIT_EXCEEDED',
  DUPLICATE_THERAPY: 'DUPLICATE_THERAPY',
  AGE_INAPPROPRIATE: 'AGE_INAPPROPRIATE',
  CONTRAINDICATION: 'CONTRAINDICATION',
  MONITORING_REQUIRED: 'MONITORING_REQUIRED'
};

exports.AlertSeverity = exports.$Enums.AlertSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.EmergencyAlertType = exports.$Enums.EmergencyAlertType = {
  VITAL_CRITICAL: 'VITAL_CRITICAL',
  MEDICATION_MISSED_CRITICAL: 'MEDICATION_MISSED_CRITICAL',
  DEVICE_OFFLINE: 'DEVICE_OFFLINE',
  PATIENT_UNRESPONSIVE: 'PATIENT_UNRESPONSIVE',
  EMERGENCY_BUTTON: 'EMERGENCY_BUTTON',
  FALL_DETECTED: 'FALL_DETECTED',
  MEDICATION_OVERDOSE: 'MEDICATION_OVERDOSE'
};

exports.EmergencyPriority = exports.$Enums.EmergencyPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  EMERGENCY: 'EMERGENCY',
  LIFE_THREATENING: 'LIFE_THREATENING'
};

exports.VitalConditionType = exports.$Enums.VitalConditionType = {
  GREATER_THAN: 'GREATER_THAN',
  LESS_THAN: 'LESS_THAN',
  BETWEEN: 'BETWEEN',
  OUTSIDE_RANGE: 'OUTSIDE_RANGE',
  PERCENTAGE_CHANGE: 'PERCENTAGE_CHANGE'
};

exports.ConsultationType = exports.$Enums.ConsultationType = {
  VIDEO_CONSULTATION: 'VIDEO_CONSULTATION',
  AUDIO_CONSULTATION: 'AUDIO_CONSULTATION',
  CHAT_CONSULTATION: 'CHAT_CONSULTATION',
  EMERGENCY_CONSULTATION: 'EMERGENCY_CONSULTATION',
  FOLLOW_UP_CONSULTATION: 'FOLLOW_UP_CONSULTATION',
  SPECIALIST_REFERRAL: 'SPECIALIST_REFERRAL'
};

exports.ConsultationStatus = exports.$Enums.ConsultationStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW',
  RESCHEDULED: 'RESCHEDULED',
  INTERRUPTED: 'INTERRUPTED'
};

exports.ConsultationPriority = exports.$Enums.ConsultationPriority = {
  ROUTINE: 'ROUTINE',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.LabOrderStatus = exports.$Enums.LabOrderStatus = {
  ORDERED: 'ORDERED',
  SAMPLE_COLLECTED: 'SAMPLE_COLLECTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REPORT_READY: 'REPORT_READY'
};

exports.LabTestCategory = exports.$Enums.LabTestCategory = {
  BLOOD_CHEMISTRY: 'BLOOD_CHEMISTRY',
  HEMATOLOGY: 'HEMATOLOGY',
  MICROBIOLOGY: 'MICROBIOLOGY',
  PATHOLOGY: 'PATHOLOGY',
  RADIOLOGY: 'RADIOLOGY',
  CARDIOLOGY: 'CARDIOLOGY',
  ENDOCRINOLOGY: 'ENDOCRINOLOGY',
  IMMUNOLOGY: 'IMMUNOLOGY'
};

exports.GameBadgeType = exports.$Enums.GameBadgeType = {
  ADHERENCE_STREAK: 'ADHERENCE_STREAK',
  APPOINTMENT_KEEPER: 'APPOINTMENT_KEEPER',
  VITAL_TRACKER: 'VITAL_TRACKER',
  EXERCISE_CHAMPION: 'EXERCISE_CHAMPION',
  MEDICATION_MASTER: 'MEDICATION_MASTER',
  HEALTH_IMPROVEMENT: 'HEALTH_IMPROVEMENT',
  GOAL_ACHIEVER: 'GOAL_ACHIEVER'
};

exports.GameChallengeType = exports.$Enums.GameChallengeType = {
  DAILY_MEDICATION: 'DAILY_MEDICATION',
  WEEKLY_VITALS: 'WEEKLY_VITALS',
  MONTHLY_CHECKUP: 'MONTHLY_CHECKUP',
  EXERCISE_MINUTES: 'EXERCISE_MINUTES',
  WEIGHT_MANAGEMENT: 'WEIGHT_MANAGEMENT',
  BLOOD_PRESSURE_CONTROL: 'BLOOD_PRESSURE_CONTROL',
  GLUCOSE_MANAGEMENT: 'GLUCOSE_MANAGEMENT'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  WEARABLE: 'WEARABLE',
  BLOOD_PRESSURE: 'BLOOD_PRESSURE',
  GLUCOSE_METER: 'GLUCOSE_METER',
  PULSE_OXIMETER: 'PULSE_OXIMETER',
  THERMOMETER: 'THERMOMETER',
  ECG_MONITOR: 'ECG_MONITOR',
  SCALE: 'SCALE',
  SPIROMETER: 'SPIROMETER',
  GENERIC_BLUETOOTH: 'GENERIC_BLUETOOTH'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  BLUETOOTH_LE: 'BLUETOOTH_LE',
  WIFI: 'WIFI',
  API_OAUTH: 'API_OAUTH',
  MANUAL_ENTRY: 'MANUAL_ENTRY',
  BRIDGE_DEVICE: 'BRIDGE_DEVICE'
};

exports.DeviceStatus = exports.$Enums.DeviceStatus = {
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  SYNCING: 'SYNCING',
  ERROR: 'ERROR',
  MAINTENANCE: 'MAINTENANCE'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  AccountLink: 'AccountLink',
  Patient: 'Patient',
  HealthcareProvider: 'HealthcareProvider',
  Speciality: 'Speciality',
  Clinic: 'Clinic',
  CarePlan: 'CarePlan',
  Medicine: 'Medicine',
  Medication: 'Medication',
  Appointment: 'Appointment',
  DoctorAvailability: 'DoctorAvailability',
  VitalType: 'VitalType',
  VitalReading: 'VitalReading',
  Symptom: 'Symptom',
  AdherenceRecord: 'AdherenceRecord',
  ServicePlan: 'ServicePlan',
  PatientSubscription: 'PatientSubscription',
  PatientDoctorAssignment: 'PatientDoctorAssignment',
  UserDevice: 'UserDevice',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  SequelizeMeta: 'SequelizeMeta',
  appointment_slots: 'appointment_slots',
  care_plan_templates: 'care_plan_templates',
  dashboard_metrics: 'dashboard_metrics',
  doctors: 'doctors',
  hsps: 'hsps',
  medication_logs: 'medication_logs',
  patient_alerts: 'patient_alerts',
  patient_consent_otp: 'patient_consent_otp',
  patient_provider_assignments: 'patient_provider_assignments',
  patient_provider_consent_history: 'patient_provider_consent_history',
  payment_methods: 'payment_methods',
  payments: 'payments',
  provider_change_history: 'provider_change_history',
  providers: 'providers',
  schedule_events: 'schedule_events',
  scheduled_events: 'scheduled_events',
  secondary_doctor_assignments: 'secondary_doctor_assignments',
  symptoms_database: 'symptoms_database',
  treatment_database: 'treatment_database',
  treatment_plans: 'treatment_plans',
  user_roles: 'user_roles',
  vital_requirements: 'vital_requirements',
  vital_templates: 'vital_templates',
  vitals: 'vitals',
  DrugInteraction: 'DrugInteraction',
  PatientAllergy: 'PatientAllergy',
  MedicationSafetyAlert: 'MedicationSafetyAlert',
  EmergencyAlert: 'EmergencyAlert',
  VitalAlertRule: 'VitalAlertRule',
  EmergencyContact: 'EmergencyContact',
  VideoConsultation: 'VideoConsultation',
  ConsultationPrescription: 'ConsultationPrescription',
  ConsultationNote: 'ConsultationNote',
  LabOrder: 'LabOrder',
  LabResult: 'LabResult',
  PatientGameProfile: 'PatientGameProfile',
  GameBadgeAward: 'GameBadgeAward',
  GameChallengeProgress: 'GameChallengeProgress',
  ConnectedDevice: 'ConnectedDevice',
  DeviceReading: 'DeviceReading',
  DevicePlugin: 'DevicePlugin'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
