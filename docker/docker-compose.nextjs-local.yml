# ============================================================================
# NEXT.JS HEALTHCARE APPLICATION - LOCAL DEVELOPMENT DOCKER COMPOSE
# ============================================================================
# Pure Next.js 14 with NextAuth.js + Prisma + PostgreSQL Architecture
# Updated for complete Next.js API migration with healthcare business logic
# ============================================================================
version: '3.8'

services:
  # ============================================================================
  # POSTGRESQL DATABASE
  # Healthcare data storage with optimized settings for medical applications
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: healthapp-nextjs-postgres-local
    environment:
      POSTGRES_DB: healthapp_dev
      POSTGRES_USER: healthapp_user
      POSTGRES_PASSWORD: pg_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      # PostgreSQL optimization for healthcare workloads
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      POSTGRES_LOG_STATEMENT: "all"
      POSTGRES_LOG_DURATION: "on"
      POSTGRES_LOG_MIN_DURATION_STATEMENT: "0"
    ports:
      - "5432:5432"  # Standard PostgreSQL port for local development
    volumes:
      - postgres_nextjs_local_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthapp_user -d healthapp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # ============================================================================
  # REDIS CACHE
  # Session storage and application caching for healthcare performance
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: healthapp-nextjs-redis-local
    command: >
      redis-server
      --appendonly yes
      --requirepass redis_dev_password
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_nextjs_local_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "redis_dev_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # NEXT.JS HEALTHCARE APPLICATION
  # Pure Next.js with integrated API routes, NextAuth.js, and Prisma
  # ============================================================================
  nextjs:
    build:
      context: ..
      dockerfile: docker/Dockerfile.nextjs
      target: runner
      args:
        NODE_ENV: development
    container_name: healthapp-nextjs-app-local
    environment:
      # Next.js Core Configuration
      NODE_ENV: development
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      
      # NextAuth.js Configuration
      NEXTAUTH_URL: http://${HOST_IP:-localhost}:3000
      NEXTAUTH_SECRET: nextjs_healthcare_secret_key_for_development_not_for_production
      JWT_SECRET: development_jwt_secret_key_not_for_production_use_only
      
      # Database Configuration (Prisma)
      DATABASE_URL: "postgresql://healthapp_user:pg_password@postgres:5432/healthapp_dev?schema=public&connection_limit=20&pool_timeout=20"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: healthapp_dev
      POSTGRES_USER: healthapp_user
      POSTGRES_PASSWORD: pg_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_dev_password
      
      # Healthcare Application Settings
      API_VERSION: "2.0.0"
      FRONTEND_URL: http://${HOST_IP:-localhost}:3000
      NEXT_PUBLIC_API_URL: http://${HOST_IP:-localhost}:3000/api
      
      # Development & Debugging
      DEBUG: "true"
      LOG_LEVEL: "debug"
      NEXT_TELEMETRY_DISABLED: "1"
      PRISMA_DEBUG: "true"
      ENABLE_SQL_LOGGING: "true"
      ENABLE_REQUEST_LOGGING: "true"
      ENABLE_ERROR_STACK_TRACES: "true"
      
      # Healthcare Debugging
      HIPAA_AUDIT_LOGGING: "true"
      AUDIT_LOG_LEVEL: "debug"
      MEDICAL_DATA_ENCRYPTION: "false"
      
      # Session Configuration
      SESSION_TIMEOUT: "7200000"
      SESSION_MAX_AGE: "7200"
      
      # Performance Settings
      WATCHPACK_POLLING: "true"
      WDS_SOCKET_HOST: "${HOST_IP:-localhost}"
      WDS_SOCKET_PORT: "3000"
      
      # CORS Configuration
      CORS_ORIGINS: http://localhost:3000,http://${HOST_IP:-localhost}:3000
      
      # Host IP for networking
      HOST_IP: ${HOST_IP:-localhost}
      
    ports:
      - "3000:3000"  # Single port for Next.js app (frontend + API)
    volumes:
      # Development hot reload volumes
      - ../app:/app/app:ro
      - ../components:/app/components:ro
      - ../lib:/app/lib:ro
      - ../hooks:/app/hooks:ro
      - ../types:/app/types:ro
      - ../middleware.ts:/app/middleware.js:ro
      - ../prisma:/app/prisma:ro
      
      # Configuration files
      - ../package.json:/app/package.json:ro
      - ../next.config.js:/app/next.config.js:ro
      - ../tailwind.config.js:/app/tailwind.config.js:ro
      - ../tsconfig.json:/app/tsconfig.json:ro
      
      # Persistent data directories
      - nextjs_app_logs:/app/logs
      - nextjs_app_uploads:/app/uploads
      - nextjs_app_temp:/app/temp
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    
    # Development command with Prisma migration
    command: >
      sh -c "
        echo 'Starting Healthcare Next.js Application...' &&
        echo 'Running Prisma migrations...' &&
        npx prisma migrate deploy &&
        npx prisma generate &&
        echo 'Starting Next.js development server...' &&
        npm run dev
      "

  # ============================================================================
  # PGADMIN - DATABASE ADMINISTRATION
  # Web-based PostgreSQL administration for healthcare data management
  # ============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: healthapp-nextjs-pgadmin-local
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@healthapp.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_nextjs_local_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # ============================================================================
  # REDIS COMMANDER - REDIS ADMINISTRATION (Optional)
  # Web-based Redis administration for session and cache management
  # ============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: healthapp-nextjs-redis-commander-local
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_dev_password
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

# ============================================================================
# DOCKER VOLUMES
# Persistent storage for healthcare application data
# ============================================================================
volumes:
  postgres_nextjs_local_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_nextjs_local_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
  nextjs_app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
  nextjs_app_uploads:
    driver: local
  nextjs_app_temp:
    driver: local
  pgadmin_nextjs_local_data:
    driver: local

# ============================================================================
# DOCKER NETWORKS
# Isolated network for healthcare application security
# ============================================================================
networks:
  default:
    name: healthapp-nextjs-local-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16