# docker/docker-stack.test.yml
version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-healthapp_test}
      POSTGRES_USER: ${POSTGRES_USER:-healthapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pg_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "${HOST_PORT_DB:-5432}:5432"
    networks:
      - healthapp_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthapp_user -d healthapp_test"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s
    command: >
      postgres -c max_connections=200
               -c shared_buffers=128MB
               -c effective_cache_size=256MB
               -c maintenance_work_mem=32MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=8MB
               -c default_statistics_target=100
               -c log_statement=all
               -c log_destination=stderr
               -c logging_collector=off

  redis:
    image: redis:7.2-alpine
    volumes:
      - redis_test_data:/data
    ports:
      - "${HOST_PORT_REDIS:-6379}:6379"
    networks:
      - healthapp_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  app:
    image: healthapp:${ENVIRONMENT:-test}
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      ENVIRONMENT: ${ENVIRONMENT:-test}
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_SECRET: ${AUTH_SECRET}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      REDIS_URL: redis://redis:6379
    ports:
      - "${HOST_PORT_FRONTEND:-3002}:3002"
    networks:
      - healthapp_network
    deploy:
      replicas: ${REPLICAS_FRONTEND:-2}
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - postgres
      - redis

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@healthapp.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_test_data:/var/lib/pgadmin
    ports:
      - "${HOST_PORT_PGADMIN:-5050}:80"
    networks:
      - healthapp_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      - postgres

networks:
  healthapp_network:
    driver: overlay
    attachable: true

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  pgadmin_test_data:
    driver: local
