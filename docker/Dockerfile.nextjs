# Multi-stage Next.js + Prisma Healthcare Application Dockerfile
# Optimized for production deployment with Prisma client generation

FROM node:22.18.0-alpine AS deps
RUN apk add --no-cache libc6-compat build-base postgresql-client curl
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
COPY prisma ./prisma/

# Install dependencies and generate Prisma client
RUN npm ci --only=production
RUN npx prisma generate

# Clear npm cache
RUN npm cache clean --force

# Build stage
FROM node:22.18.0-alpine AS builder
WORKDIR /app
RUN apk add --no-cache build-base postgresql-client

# Copy package files and install all dependencies
COPY package.json package-lock.json ./
COPY prisma ./prisma/
RUN npm ci

# Generate Prisma client for build
RUN npx prisma generate

# Copy source code
COPY . .

# Disable Next.js telemetry during build
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the Next.js application with standalone output
RUN npm run build

# Production runtime
FROM node:22.18.0-alpine AS runner
WORKDIR /app

# Install production runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash \
    dumb-init

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy production dependencies and Prisma client
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/lib/prisma-client ./lib/prisma-client

# Copy Next.js build output
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy Prisma schema and generated client
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma/

# Create logs directory for healthcare application
RUN mkdir -p logs && chown -R nextjs:nodejs logs

# Health check for Next.js API
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3002/api/health || exit 1

USER nextjs

EXPOSE 3002

ENV PORT=3002
ENV HOSTNAME="0.0.0.0"

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start Next.js server
CMD ["node", "server.js"]