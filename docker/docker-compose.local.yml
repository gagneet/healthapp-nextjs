version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: healthapp-postgres-local
    environment:
      POSTGRES_DB: healthapp_dev
      POSTGRES_USER: healthapp_user
      POSTGRES_PASSWORD: secure_pg_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthapp_user -d healthapp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.4-alpine
    container_name: healthapp-redis-local
    command: redis-server --appendonly yes --requirepass secure_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_local_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "-a", "secure_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.local
    container_name: healthapp-app-local
    environment:
      NODE_ENV: development
      DATABASE_URL: "postgresql://healthapp_user:secure_pg_password@postgres:5432/healthapp_dev"
      REDIS_URL: "redis://:secure_redis_password@redis:6379"
      NEXTAUTH_URL: "http://localhost:3002"
      NEXTAUTH_SECRET: "localsecret" # Should be a long random string in production
      HOST_IP: ${HOST_IP:-198.168.0.148}
      WDS_SOCKET_HOST: ${HOST_IP:-198.168.0.148}
      WDS_SOCKET_PORT: 3002
    ports:
      - "3002:3002"
    volumes:
      - ../:/app
      - /app/node_modules # Avoids overwriting node_modules with host's
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

volumes:
  postgres_local_data:
    driver: local
  redis_local_data:
    driver: local

networks:
  default:
    name: healthapp-local-network
    driver: bridge