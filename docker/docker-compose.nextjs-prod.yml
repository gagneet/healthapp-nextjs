# ============================================================================
# NEXT.JS HEALTHCARE APPLICATION - PRODUCTION DOCKER COMPOSE
# ============================================================================
# Pure Next.js 14 with NextAuth.js + Prisma + PostgreSQL Architecture
# Production-ready deployment with security, performance, and scalability focus
# ============================================================================
version: '3.8'

services:
  # ============================================================================
  # POSTGRESQL DATABASE - PRODUCTION
  # Enterprise-grade healthcare data storage with high availability
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: healthapp-nextjs-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-healthapp_prod}
      POSTGRES_USER: ${POSTGRES_USER:-healthapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_THIS_IN_PRODUCTION}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      # Production PostgreSQL optimization
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements,auto_explain
      POSTGRES_LOG_STATEMENT: mod
      POSTGRES_LOG_DURATION: on
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 1000
      POSTGRES_LOG_CHECKPOINTS: on
      POSTGRES_LOG_CONNECTIONS: on
      POSTGRES_LOG_DISCONNECTIONS: on
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_nextjs_prod_data:/var/lib/postgresql/data
      - postgres_nextjs_backup:/backup
      - ./postgresql-prod.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-healthapp_user} -d ${POSTGRES_DB:-healthapp_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements,auto_explain
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # ============================================================================
  # REDIS CLUSTER - PRODUCTION
  # High-performance session storage and caching for healthcare scalability
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: healthapp-nextjs-redis-prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-CHANGE_THIS_REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-CHANGE_THIS_REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --maxclients 10000
      --tcp-keepalive 300
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_nextjs_prod_data:/data
      - redis_nextjs_backup:/backup
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-CHANGE_THIS_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================================
  # NEXT.JS HEALTHCARE APPLICATION - PRODUCTION
  # Horizontally scalable Next.js with enterprise security and performance
  # ============================================================================
  nextjs:
    build:
      context: ..
      dockerfile: docker/Dockerfile.nextjs
      target: runner
      args:
        NODE_ENV: production
    container_name: healthapp-nextjs-app-prod
    environment:
      # Next.js Production Configuration
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      
      # NextAuth.js Production Configuration
      NEXTAUTH_URL: ${NEXTAUTH_URL:-https://your-domain.com}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-CHANGE_THIS_NEXTJS_PRODUCTION_SECRET}
      JWT_SECRET: ${JWT_SECRET:-CHANGE_THIS_PRODUCTION_JWT_SECRET}
      
      # Database Configuration (Prisma)
      DATABASE_URL: "postgresql://${POSTGRES_USER:-healthapp_user}:${POSTGRES_PASSWORD:-CHANGE_THIS}@postgres:5432/${POSTGRES_DB:-healthapp_prod}?schema=public&connection_limit=50&pool_timeout=30&sslmode=require"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-healthapp_prod}
      POSTGRES_USER: ${POSTGRES_USER:-healthapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_THIS_IN_PRODUCTION}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-CHANGE_THIS_REDIS_PASSWORD}
      
      # Healthcare Application Settings
      API_VERSION: "2.0.0"
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://your-domain.com/api}
      
      # Production Security Settings
      DEBUG: "false"
      LOG_LEVEL: warn
      NEXT_TELEMETRY_DISABLED: 1
      PRISMA_DEBUG: "false"
      ENABLE_SQL_LOGGING: "false"
      ENABLE_REQUEST_LOGGING: "true"
      ENABLE_ERROR_STACK_TRACES: "false"
      
      # Healthcare Production Settings
      HIPAA_AUDIT_LOGGING: "true"
      AUDIT_LOG_LEVEL: info
      MEDICAL_DATA_ENCRYPTION: "true"
      PATIENT_DATA_RETENTION_DAYS: 2555
      
      # Session Configuration - Production Security
      SESSION_TIMEOUT: 1800000  # 30 minutes
      SESSION_MAX_AGE: 1800
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-https://your-domain.com}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 60
      
      # Security Headers
      ENABLE_SECURITY_HEADERS: "true"
      ENABLE_CSP: "true"
      
      # Healthcare Compliance
      ENABLE_2FA: "true"
      HIPAA_AUDIT_ENCRYPTION_KEY: ${HIPAA_AUDIT_ENCRYPTION_KEY:-CHANGE_THIS_32_BYTE_KEY}
      PHI_ENCRYPTION_KEY: ${PHI_ENCRYPTION_KEY:-CHANGE_THIS_32_BYTE_KEY}
      
      # AWS S3 Configuration (if used)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-healthapp-prod-bucket}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-CHANGE_THIS}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-CHANGE_THIS}
      
    ports:
      - "3000:3000"  # Single port for Next.js app (frontend + API)
    volumes:
      # Production logs and uploads
      - nextjs_app_logs:/app/logs
      - nextjs_app_uploads:/app/uploads
      - nextjs_app_backup:/app/backup
      
      # SSL certificates (if using local SSL)
      - ${SSL_CERT_PATH:-./ssl/cert.pem}:/app/ssl/cert.pem:ro
      - ${SSL_KEY_PATH:-./ssl/key.pem}:/app/ssl/key.pem:ro
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    deploy:
      replicas: 2  # Horizontal scaling for high availability
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 300s
    
    # Production startup command with migrations
    command: >
      sh -c "
        echo 'Starting Healthcare Next.js Production Application...' &&
        echo 'Environment: Production' &&
        echo 'Running Prisma migrations...' &&
        npx prisma migrate deploy &&
        npx prisma generate &&
        echo 'Starting Next.js production server...' &&
        node server.js
      "

  # ============================================================================
  # NGINX REVERSE PROXY - PRODUCTION (Optional)
  # Load balancer and SSL termination for production deployment
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: healthapp-nextjs-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERT_PATH:-./ssl/cert.pem}:/etc/nginx/ssl/cert.pem:ro
      - ${SSL_KEY_PATH:-./ssl/key.pem}:/etc/nginx/ssl/key.pem:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - nextjs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ============================================================================
  # DATABASE BACKUP SERVICE - PRODUCTION
  # Automated PostgreSQL backups for healthcare data protection
  # ============================================================================
  postgres-backup:
    image: postgres:15-alpine
    container_name: healthapp-nextjs-backup-prod
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-healthapp_prod}
      POSTGRES_USER: ${POSTGRES_USER:-healthapp_user}
      PGPASSWORD: ${POSTGRES_PASSWORD:-CHANGE_THIS_IN_PRODUCTION}
    volumes:
      - postgres_nextjs_backup:/backup
      - ./backup-script.sh:/backup-script.sh:ro
    depends_on:
      - postgres
    restart: "no"
    command: >
      sh -c "
        while true; do
          echo 'Starting automated database backup...'
          pg_dump -h postgres -U ${POSTGRES_USER:-healthapp_user} ${POSTGRES_DB:-healthapp_prod} > /backup/backup_$(date +%Y%m%d_%H%M%S).sql
          echo 'Database backup completed'
          sleep 21600  # Backup every 6 hours
        done
      "

# ============================================================================
# DOCKER VOLUMES - PRODUCTION
# Persistent storage with backup and disaster recovery support
# ============================================================================
volumes:
  postgres_nextjs_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/healthapp}/postgres
  redis_nextjs_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/healthapp}/redis
  postgres_nextjs_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-/opt/healthapp/backup}/postgres
  redis_nextjs_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-/opt/healthapp/backup}/redis
  nextjs_app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_PATH:-/opt/healthapp/logs}
  nextjs_app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${UPLOAD_PATH:-/opt/healthapp/uploads}
  nextjs_app_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-/opt/healthapp/backup}/app
  nginx_logs:
    driver: local

# ============================================================================
# DOCKER NETWORKS - PRODUCTION
# Secure network isolation for production healthcare environment
# ============================================================================
networks:
  default:
    name: healthapp-nextjs-prod-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16