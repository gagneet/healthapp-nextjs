# Multi-stage backend API Dockerfile for production
FROM node:22.18.0-alpine AS deps
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache build-base postgresql-client

# Copy package files
COPY package.json package-lock.json ./

# Install production dependencies only
RUN npm ci --only=production && npm cache clean --force

# Build stage for TypeScript compilation
FROM node:22.18.0-alpine AS builder
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache build-base

# Copy package files
COPY package.json package-lock.json ./
COPY tsconfig.backend.json tsconfig.build.json ./

# Install all dependencies (including dev)
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY .sequelizerc ./

# Compile TypeScript to JavaScript
RUN npx tsc -p tsconfig.build.json

# Production runtime
FROM node:22.18.0-alpine AS runner
WORKDIR /app

# Install runtime dependencies only
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 apiuser

# Copy dependencies and compiled JavaScript
COPY --from=deps --chown=apiuser:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=apiuser:nodejs /app/dist ./dist
COPY --chown=apiuser:nodejs .sequelizerc ./
COPY --chown=apiuser:nodejs package.json ./

# Create logs directory
RUN mkdir -p logs && chown -R apiuser:nodejs logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

USER apiuser

EXPOSE 3001

ENV NODE_ENV=production
ENV PORT=3001

CMD ["node", "dist/server.js"]