# Multi-stage backend API Dockerfile for development and production

# Base stage - Common dependencies
FROM node:22.18.0-alpine AS base
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash \
    build-base

# Copy package files
COPY package.json package-lock.json ./
COPY tsconfig.backend.json tsconfig.build.json tsconfig.docker.json ./

# Development stage
FROM base AS development
ENV NODE_ENV=development

# Install all dependencies (including dev dependencies)
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY .sequelizerc ./

# Create logs directory
RUN mkdir -p logs

# Add non-root user for development
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs apiuser

# Change ownership
RUN chown -R apiuser:nodejs /app

USER apiuser

EXPOSE 3005

# Development command (with hot reload)
CMD ["npm", "run", "backend:dev"]

# Build stage - TypeScript compilation
FROM base AS builder

# Install all dependencies (including dev dependencies)
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY .sequelizerc ./

# Compile TypeScript to JavaScript using permissive config for Docker builds
RUN npx tsc -p tsconfig.docker.json

# Production dependencies stage
FROM base AS deps
ENV NODE_ENV=production

# Install production dependencies only
RUN npm ci --only=production && npm cache clean --force

# Production stage
FROM node:22.18.0-alpine AS production
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3005

# Install runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs apiuser

# Copy production dependencies and compiled JavaScript
COPY --from=deps --chown=apiuser:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=apiuser:nodejs /app/dist ./dist
COPY --chown=apiuser:nodejs .sequelizerc ./
COPY --chown=apiuser:nodejs package.json ./

# Create logs directory
RUN mkdir -p logs && chown -R apiuser:nodejs logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3005/health || exit 1

USER apiuser

EXPOSE 3005

# Production command
CMD ["node", "dist/server.js"]