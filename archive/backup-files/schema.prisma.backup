// Healthcare Management Platform - Prisma Schema
// TypeScript + Next.js 14 + PostgreSQL
// Based on existing Sequelize models and healthcare business requirements

generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS - Healthcare-specific enumerations
// ============================================================================

enum UserRole {
  SYSTEM_ADMIN
  HOSPITAL_ADMIN
  DOCTOR
  HSP // Healthcare Support Personnel
  PATIENT
  CAREGIVER
}

enum AccountStatus {
  PENDING_VERIFICATION
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum CarePlanStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum EventStatus {
  SCHEDULED
  PENDING
  IN_PROGRESS
  COMPLETED
  MISSED
  CANCELLED
  EXPIRED
}

enum EventType {
  MEDICATION
  APPOINTMENT
  VITAL_CHECK
  SYMPTOM_LOG
  DIET_LOG
  EXERCISE
  REMINDER
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationChannel {
  PUSH
  SMS
  EMAIL
  VOICE_CALL
}

enum OrganizationType {
  HOSPITAL
  CLINIC
  PRACTICE
  HEALTH_SYSTEM
  TELEHEALTH
}

enum HSPType {
  REGISTERED_NURSE
  LICENSED_PRACTICAL_NURSE
  NURSE_PRACTITIONER
  PHYSICIAN_ASSISTANT
  CLINICAL_PHARMACIST
  CARE_COORDINATOR
  SOCIAL_WORKER
  DIETITIAN
  PHYSICAL_THERAPIST
  OCCUPATIONAL_THERAPIST
  RESPIRATORY_THERAPIST
  MEDICAL_ASSISTANT
  OTHER
}

// ============================================================================
// CORE MODELS - User Management & Organizations
// ============================================================================

model Organization {
  id   String @id @default(uuid())
  name String

  // Organization Details
  type        OrganizationType
  address     Json?
  phone       String?
  email       String?
  website     String?
  license_number String?
  
  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patients           Patient[]
  healthcare_providers HealthcareProvider[]
  clinics            Clinic[]

  @@map("organizations")
}

model User {
  id String @id @default(uuid())

  // Authentication
  email         String      @unique
  password_hash String
  role          UserRole
  account_status AccountStatus @default(PENDING_VERIFICATION)

  // Profile Information
  first_name    String?
  middle_name   String?
  last_name     String?
  date_of_birth DateTime?
  gender        Gender?
  phone_number  String?
  profile_image_url String?

  // Security
  last_login_at          DateTime?
  failed_login_attempts  Int       @default(0)
  account_locked_until   DateTime?
  email_verified         Boolean   @default(false)
  email_verification_token String?
  password_reset_token   String?
  password_reset_expires DateTime?

  // Two-Factor Authentication
  two_factor_enabled Boolean @default(false)
  two_factor_secret  String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations - One-to-one with specialized profiles
  patient             Patient?
  healthcare_provider HealthcareProvider?
  
  // Notifications & Devices
  user_devices    UserDevice[]
  notifications   Notification[]

  @@map("users")
}

model Patient {
  id      String @id @default(uuid())
  user_id String @unique

  // Organization linkage (optional)
  organization_id String?

  // Medical Identifiers
  medical_record_number String? @unique
  patientId           String? @unique // Custom identifier

  // Emergency Information
  emergency_contacts Json?
  
  // Medical Information
  blood_type          String?
  allergies          Json?
  medical_conditions Json?
  medical_history    Json?
  
  // Physical Measurements
  height_cm Float?
  weight_kg Float?
  
  // Insurance & Billing
  insurance_info Json?
  
  // Care Coordination
  primary_doctor_id String?
  care_coordinator_id String?
  
  // Consent Management
  hipaa_authorization Boolean @default(false)
  research_consent    Boolean @default(false)
  marketing_consent   Boolean @default(false)

  // Healthcare-specific requirements
  needs_interpreter Boolean @default(false)
  preferred_language String?
  cultural_preferences Json?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user                    User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization           Organization?            @relation(fields: [organization_id], references: [id])
  primary_doctor         HealthcareProvider?      @relation("PrimaryDoctor", fields: [primary_doctor_id], references: [id])
  care_coordinator       HealthcareProvider?      @relation("CareCoordinator", fields: [care_coordinator_id], references: [id])
  
  // Medical Records
  care_plans             CarePlan[]
  medications            Medication[]
  appointments           Appointment[]
  vital_readings         VitalReading[]
  symptoms               Symptom[]
  adherence_records      AdherenceRecord[]
  patient_doctor_assignments PatientDoctorAssignment[]
  
  // Services & Subscriptions
  patient_services       PatientService[]
  patient_subscriptions  PatientSubscription[]

  @@map("patients")
}

model HealthcareProvider {
  id      String @id @default(uuid())
  user_id String @unique

  // Organization linkage (optional - can be independent)
  organization_id String?

  // Professional Information
  license_number     String?
  speciality_id      String?
  npi_number         String? // National Provider Identifier
  dea_number         String? // Drug Enforcement Administration
  
  // Provider Type (for HSPs)
  hsp_type           HSPType?
  
  // Professional Details
  years_experience   Int?
  education         Json?
  certifications    Json?
  languages_spoken  Json?
  
  // Practice Information
  clinic_affiliations Json?
  hospital_privileges Json?
  
  // Availability & Scheduling
  working_hours     Json?
  consultation_fee  Float?
  
  // Capabilities (what this provider can do)
  can_prescribe_medications Boolean @default(false)
  can_order_tests          Boolean @default(false)
  can_diagnose            Boolean @default(false)
  can_create_care_plans   Boolean @default(false)
  
  // Professional Status
  is_accepting_patients Boolean @default(true)
  practice_status      String  @default("active")

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organization_id], references: [id])
  speciality   Speciality?   @relation(fields: [speciality_id], references: [id])
  
  // As Primary Doctor
  primary_patients    Patient[] @relation("PrimaryDoctor")
  coordinated_patients Patient[] @relation("CareCoordinator")
  
  // Professional Activities
  care_plans         CarePlan[]
  appointments       Appointment[]
  prescribed_medications Medication[]
  doctor_assignments PatientDoctorAssignment[]
  
  // Practice Management
  clinics           Clinic[]
  services          ServicePlan[]
  
  // Availability
  doctor_availability DoctorAvailability[]

  @@map("healthcare_providers")
}

// ============================================================================
// MEDICAL SPECIALTY & CLINICAL INFORMATION
// ============================================================================

model Speciality {
  id   String @id @default(uuid())
  name String @unique
  
  description      String?
  category        String?
  requires_referral Boolean @default(false)
  
  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  healthcare_providers HealthcareProvider[]

  @@map("specialities")
}

model Clinic {
  id String @id @default(uuid())
  
  // Basic Information
  name            String
  address         Json
  phone           String?
  email           String?
  
  // Geographic Information
  latitude        Float?
  longitude       Float?
  timezone        String?
  
  // Operational Information
  operating_hours Json?
  services_offered Json?
  
  // Relations
  organization_id String?
  doctorId       String?
  
  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  organization Organization?       @relation(fields: [organization_id], references: [id])
  doctor       HealthcareProvider? @relation(fields: [doctorId], references: [id])
  appointments Appointment[]

  @@map("clinics")
}

// ============================================================================
// CARE PLANS & MEDICAL MANAGEMENT
// ============================================================================

model CarePlan {
  id         String @id @default(uuid())
  patientId String
  doctorId  String

  // Plan Details
  name        String
  description String?
  status      CarePlanStatus @default(DRAFT)
  
  // Medical Information
  primary_diagnosis    String?
  secondary_diagnoses  Json?
  icd_10_codes        Json?
  treatment_goals     Json?
  
  // Plan Timeline
  start_date DateTime
  end_date   DateTime?
  
  // Plan Configuration
  plan_details Json?
  notes       String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient Patient            @relation(fields: [patientId], references: [id])
  doctor  HealthcareProvider @relation(fields: [doctorId], references: [id])
  
  // Associated Medical Records
  medications Medication[]

  @@map("care_plans")
}

// ============================================================================
// MEDICATION MANAGEMENT
// ============================================================================

model Medicine {
  id String @id @default(uuid())

  // Drug Information
  name               String
  generic_name       String?
  brand_names        Json?
  drug_class         String?
  controlled_substance_schedule String?
  
  // Regulatory Information
  fda_approval_date  DateTime?
  ndc_number         String? // National Drug Code
  
  // Safety Information
  contraindications  Json?
  side_effects       Json?
  drug_interactions  Json?
  warnings           Json?
  
  // Dosage Information
  available_strengths Json?
  dosage_forms       Json?
  
  // Status
  isActive Boolean @default(true)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  medications Medication[]

  @@map("medicines")
}

model Medication {
  id           String @id @default(uuid())
  patientId   String
  medicine_id  String
  care_plan_id String?
  prescribed_by String

  // Prescription Details
  dosage           String
  frequency        String
  route            String? // oral, injection, topical, etc.
  instructions     String?
  
  // Timeline
  start_date       DateTime
  end_date         DateTime?
  
  // Status & Tracking
  isActive        Boolean @default(true)
  adherence_score  Float?  @default(0)
  
  // Refill Information
  quantity_prescribed Int?
  refills_remaining   Int?
  
  // Safety & Monitoring
  requires_monitoring Boolean @default(false)
  monitoring_notes   String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient      Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicine     Medicine           @relation(fields: [medicine_id], references: [id])
  care_plan    CarePlan?          @relation(fields: [care_plan_id], references: [id])
  prescriber   HealthcareProvider @relation(fields: [prescribed_by], references: [id])
  
  // Tracking Records
  adherence_records AdherenceRecord[]

  @@map("medications")
}

// ============================================================================
// APPOINTMENTS & SCHEDULING
// ============================================================================

model Appointment {
  id         String @id @default(uuid())
  patientId String
  doctorId  String
  clinic_id  String?

  // Appointment Details
  appointment_type AppointmentStatus @default(SCHEDULED)
  status          AppointmentStatus
  
  // Scheduling
  scheduled_date   DateTime
  scheduled_time   String // Using String for flexibility (HH:MM format)
  duration_minutes Int     @default(30)
  
  // Virtual Appointments
  is_virtual   Boolean @default(false)
  meeting_link String?
  
  // Clinical Information
  chief_complaint   String?
  appointment_notes String?
  outcome_summary   String?
  
  // Follow-up
  follow_up_required Boolean @default(false)
  follow_up_date     DateTime?
  
  // Communication
  reminder_sent Boolean @default(false)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  HealthcareProvider @relation(fields: [doctorId], references: [id])
  clinic  Clinic?            @relation(fields: [clinic_id], references: [id])

  @@map("appointments")
}

model DoctorAvailability {
  id        String @id @default(uuid())
  doctorId String

  // Availability Details
  day_of_week      Int // 0 = Sunday, 1 = Monday, etc.
  start_time       String
  end_time         String
  is_available     Boolean @default(true)
  
  // Slot Configuration
  slot_duration    Int @default(30) // minutes
  buffer_time      Int @default(15) // minutes between appointments
  
  // Special Dates
  specific_date    DateTime? // For one-time availability changes
  is_recurring     Boolean   @default(true)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  doctor HealthcareProvider @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("doctor_availability")
}

// ============================================================================
// VITAL SIGNS & HEALTH MONITORING
// ============================================================================

model VitalType {
  id   String @id @default(uuid())
  name String @unique

  // Vital Configuration
  unit            String
  normalRangeMin Float?
  normalRangeMax Float?
  critical_low    Float?
  critical_high   Float?
  
  // Display Information
  description     String?
  measurement_instructions String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  vital_readings VitalReading[]

  @@map("vital_types")
}

model VitalReading {
  id           String @id @default(uuid())
  patientId   String
  vital_type_id String

  // Reading Values
  value_primary   Float  // Main value (e.g., systolic BP, temperature)
  value_secondary Float? // Secondary value (e.g., diastolic BP)
  unit           String
  
  // Reading Context
  measured_at        DateTime
  measurement_method String? // manual, device, estimated
  device_id         String? // for device integration
  notes             String?
  
  // Clinical Assessment
  is_critical       Boolean @default(false)
  alert_triggered   Boolean @default(false)
  verified_by       String? // healthcare provider ID
  
  // Context Information
  patient_condition String? // fasting, post-exercise, etc.

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient    Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  vital_type VitalType @relation(fields: [vital_type_id], references: [id])

  @@map("vital_readings")
}

// ============================================================================
// SYMPTOMS & HEALTH TRACKING
// ============================================================================

model Symptom {
  id         String @id @default(uuid())
  patientId String

  // Symptom Details
  symptom_name  String
  severity      Int    // 1-10 scale
  description   String?
  
  // Timing
  onset_date    DateTime?
  duration      String?  // "2 days", "1 week", etc.
  
  // Context
  triggers      Json?
  relieving_factors Json?
  associated_symptoms Json?
  
  // Assessment
  impact_on_daily_life String?
  
  // Clinical Review
  reviewed_by   String?
  clinical_notes String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("symptoms")
}

// ============================================================================
// ADHERENCE & TRACKING
// ============================================================================

model AdherenceRecord {
  id            String @id @default(uuid())
  patientId    String
  medication_id String

  // Adherence Details
  scheduled_time DateTime
  taken_time     DateTime?
  was_taken      Boolean @default(false)
  
  // Additional Context
  notes          String?
  side_effects   Json?
  
  // Verification
  verified_by    String? // healthcare provider or device
  verification_method String? // self-report, device, observation

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient    Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medication Medication @relation(fields: [medication_id], references: [id], onDelete: Cascade)

  @@map("adherence_records")
}

// ============================================================================
// SERVICES & SUBSCRIPTIONS (Business Logic)
// ============================================================================

model ServicePlan {
  id        String @id @default(uuid())
  doctorId String

  // Service Details
  name         String
  description  String?
  amount       Float
  currency     String @default("USD")
  
  // Duration & Billing
  duration_days Int
  is_recurring  Boolean @default(false)
  
  // Service Configuration
  service_type  String? // consultation, monitoring, etc.
  features      Json?
  
  // Status
  isActive Boolean @default(true)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  doctor           HealthcareProvider    @relation(fields: [doctorId], references: [id])
  patient_services PatientService[]
  subscriptions    SubscriptionService[]

  @@map("service_plans")
}

model Subscription {
  id String @id @default(uuid())

  // Subscription Details
  name         String
  description  String?
  billing_cycle String // monthly, quarterly, annually
  
  // Status
  isActive Boolean @default(true)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  services              SubscriptionService[]
  patient_subscriptions PatientSubscription[]

  @@map("subscriptions")
}

model SubscriptionService {
  id              String @id @default(uuid())
  subscription_id String
  service_plan_id String

  // Timestamps
  created_at DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  service_plan ServicePlan  @relation(fields: [service_plan_id], references: [id], onDelete: Cascade)

  @@unique([subscription_id, service_plan_id])
  @@map("subscription_services")
}

model PatientService {
  id              String @id @default(uuid())
  patientId      String
  service_plan_id String

  // Service Assignment
  assigned_date DateTime @default(now())
  start_date    DateTime
  end_date      DateTime?
  
  // Status
  isActive Boolean @default(true)
  
  // Payment
  amount_paid Float?
  payment_date DateTime?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient      Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  service_plan ServicePlan @relation(fields: [service_plan_id], references: [id])

  @@map("patient_services")
}

model PatientSubscription {
  id              String @id @default(uuid())
  patientId      String
  subscription_id String

  // Subscription Details
  start_date     DateTime
  end_date       DateTime?
  next_billing   DateTime
  
  // Status
  status         String @default("active") // active, inactive, past_due, cancelled
  auto_renew     Boolean @default(true)
  
  // Billing
  amount         Float
  currency       String @default("USD")
  last_payment   DateTime?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscription_id], references: [id])

  @@map("patient_subscriptions")
}

// ============================================================================
// DOCTOR-PATIENT ASSIGNMENTS (Healthcare Business Logic)
// ============================================================================

model PatientDoctorAssignment {
  id         String @id @default(uuid())
  patientId String
  doctorId  String

  // Assignment Details
  assignment_type String // primary, secondary, consultant, specialist, emergency
  isActive      Boolean @default(true)
  
  // Timeline
  assigned_date DateTime @default(now())
  end_date     DateTime?
  
  // Assignment Context
  reason       String?
  notes        String?
  
  // Permissions
  can_prescribe     Boolean @default(true)
  can_modify_plan   Boolean @default(true)
  emergency_contact Boolean @default(false)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  patient Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  HealthcareProvider @relation(fields: [doctorId], references: [id])

  @@unique([patientId, doctorId, assignment_type])
  @@map("patient_doctor_assignments")
}

// ============================================================================
// NOTIFICATIONS & COMMUNICATION
// ============================================================================

model UserDevice {
  id      String @id @default(uuid())
  user_id String

  // Device Information
  device_token String @unique
  device_type  String // ios, android, web
  device_name  String?
  
  // Notification Preferences
  push_enabled  Boolean @default(true)
  badge_count   Int     @default(0)
  
  // Status
  isActive     Boolean   @default(true)
  last_used_at  DateTime?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_devices")
}

model Notification {
  id      String @id @default(uuid())
  user_id String

  // Notification Details
  title          String
  message        String
  type          String // medication_reminder, appointment, alert, etc.
  
  // Delivery
  channels       Json // [push, sms, email]
  scheduled_for  DateTime?
  sent_at        DateTime?
  
  // Status
  is_read        Boolean @default(false)
  is_sent        Boolean @default(false)
  
  // Context
  related_id     String? // ID of related record (medication, appointment, etc.)
  related_type   String? // medication, appointment, etc.
  
  // Priority
  priority       PriorityLevel @default(MEDIUM)

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ============================================================================
// AUDIT & COMPLIANCE (HIPAA Requirements)
// ============================================================================

model AuditLog {
  id String @id @default(uuid())

  // Actor Information
  user_id    String?
  user_email String?
  user_role  UserRole?
  
  // Action Details
  action       String // CREATE, READ, UPDATE, DELETE
  resource     String // table/model name
  resource_id  String?
  
  // Request Information
  ip_address   String?
  user_agent   String?
  session_id   String?
  
  // Change Details
  old_values   Json?
  new_values   Json?
  
  // Context
  request_id   String?
  api_endpoint String?
  
  // HIPAA Compliance
  phi_accessed Boolean @default(false) // Protected Health Information
  access_reason String?

  // Timestamp
  created_at DateTime @default(now())

  @@map("audit_logs")
}