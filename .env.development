# ============================================================================
# HEALTHCARE APPLICATION - DEVELOPMENT ENVIRONMENT CONFIGURATION
# ============================================================================
# Copy this file to .env.development and customize the values
# 
# SECURITY WARNINGS:
# 1. Change ALL passwords and secrets before deploying to production
# 2. NEVER commit real credentials to version control
# 3. Use environment-specific values for different deployments
# 4. Generate cryptographically secure secrets for JWT and sessions
# ============================================================================

# ============================================================================
# APPLICATION CORE SETTINGS
# Used by: src/server.js, src/routes/index.js
# ============================================================================
NODE_ENV=development                    # Runtime environment (development/production/test)
PORT=3001                              # Backend server port - used in src/server.js
FRONTEND_URL=http://192.168.0.148:3002     # Frontend URL for CORS - used in src/server.js

# ============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# Used by: src/config/config.js, src/config/database-postgres.js
# ============================================================================
# These values MUST match your docker-compose.dev.yml configuration
POSTGRES_HOST=postgres                 # Database host (use 'postgres' for Docker, 'localhost' for local)
POSTGRES_PORT=5432                     # Standard PostgreSQL port
POSTGRES_DB=healthapp_dev             # Development database name
POSTGRES_USER=healthapp_user          # Database user with full access to healthapp_dev
POSTGRES_PASSWORD=pg_password  # Database password - CHANGE THIS
DB_DIALECT=postgres                   # Sequelize dialect (postgres/mysql/sqlite)
DB_TIMEZONE=+00:00                   # UTC timezone for consistent datetime handling

# Database Connection Pool Settings (Optional - defaults in config/database-postgres.js)
# DB_POOL_MAX=20                      # Maximum connections in pool
# DB_POOL_MIN=5                       # Minimum connections in pool

# ============================================================================
# REDIS CONFIGURATION (Session Storage & Caching)
# Used by: Application for session management and data caching
# ============================================================================
REDIS_HOST=redis                      # Redis host (use 'redis' for Docker, 'localhost' for local)
REDIS_PORT=6379                      # Standard Redis port
REDIS_PASSWORD=redis_password  # Redis authentication - CHANGE THIS

# ============================================================================
# JWT AUTHENTICATION CONFIGURATION
# Used by: src/config/jwt.js, authentication middleware
# ============================================================================
# Generate a cryptographically secure 256-bit secret: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=aff33ded63114a2169524d80704c54e6f734982fbe0e7d6041022611cbe46ece82e4b971d63affb87aa9dd7ef444626c891f1617149e67b69bd86e0bde89f0d0  # MUST be 256-bit for HS256
JWT_EXPIRES_IN=24h                   # Access token expiration (24 hours for development)
JWT_REFRESH_EXPIRE=7d                # Refresh token expiration (7 days)

# ============================================================================
# API CONFIGURATION
# Used by: Frontend for API calls, CORS configuration
# ============================================================================
NEXT_PUBLIC_API_URL=http://192.168.0.148:3001  # Public API URL exposed to frontend

# ============================================================================
# AWS S3 FILE STORAGE (Optional - for file uploads)
# Used by: File upload services, patient document storage
# ============================================================================
# Uncomment and configure for file upload functionality
# Required for: Patient documents, medical images, prescription uploads
# AWS_ACCESS_KEY_ID=your_aws_access_key       # AWS IAM user access key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key   # AWS IAM user secret key
# AWS_REGION=us-east-1                        # AWS region for S3 bucket
# AWS_S3_BUCKET=healthapp-dev-bucket          # Development S3 bucket name

# ============================================================================
# GETSTREAM REAL-TIME FEATURES (Optional)
# Used by: Real-time notifications, medication reminders, chat features
# ============================================================================
# Required for: Real-time patient-doctor messaging, medication alerts
GETSTREAM_API_KEY=your_getstream_api_key    # GetStream.io API key
GETSTREAM_SECRET=your_getstream_secret      # GetStream.io secret key

# ============================================================================
# EMAIL NOTIFICATIONS (SMTP Configuration)
# Used by: Email notification services, password reset, appointment reminders
# ============================================================================
# Uncomment and configure for email notifications
# Required for: Password reset, appointment reminders, medication alerts
# EMAIL_HOST=smtp.gmail.com           # SMTP server hostname
# EMAIL_PORT=587                      # SMTP port (587 for TLS, 465 for SSL)
# EMAIL_USER=your_email@gmail.com     # SMTP username/email
# EMAIL_PASS=your_app_password        # SMTP password (use app password for Gmail)

# ============================================================================
# HIPAA COMPLIANCE & SECURITY
# Used by: src/middleware/hipaaCompliance.js for PHI encryption
# ============================================================================
# Generate secure keys: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# HIPAA_AUDIT_ENCRYPTION_KEY=         # 32-byte key for audit log encryption
# PHI_ENCRYPTION_KEY=                 # 32-byte key for PHI data encryption

# ============================================================================
# MONITORING & OBSERVABILITY (Optional)
# Used by: Grafana dashboard, application monitoring
# ============================================================================
# GRAFANA_PASSWORD=admin123           # Grafana admin password - CHANGE THIS

# ============================================================================
# RATE LIMITING & SECURITY
# Used by: src/middleware/rateLimiter.js (if implemented)
# ============================================================================
RATE_LIMIT_WINDOW_MS=900000          # Rate limit window in milliseconds (15 minutes)
RATE_LIMIT_MAX_REQUESTS=100          # Maximum requests per window per IP

# ============================================================================
# SESSION MANAGEMENT
# Used by: Express session middleware for user sessions
# ============================================================================
# Generate secure session secret: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
SESSION_SECRET=796c22365ef8f5112256f06474b237f1a5adeead1b0d2971c277097c51fbeb55a6c0bbdf82d799b575549b23437891d34fe38d158b6eefa2ef738ba77c03c034  # Session signing secret - CHANGE THIS
SESSION_TIMEOUT=3600000              # Session timeout in milliseconds (1 hour)

# ============================================================================
# DEVELOPMENT & DEBUGGING
# Used by: src/middleware/logger.js, development debugging
# ============================================================================
DEBUG=healthapp:*                    # Debug namespace for development logging
LOG_LEVEL=debug                      # Logging level (debug/info/warn/error) - used in logger.js

# ============================================================================
# VERSIONING & DEPLOYMENT
# Used by: Docker image tagging, application versioning
# ============================================================================
VERSION=1.0.0                        # Application version for Docker builds
